{"version":3,"sources":["xlsform-simple-schema/functions/odk-formulas/evaluation/ODKFormulaEvaluationContext.ts","lib/ODKSurveyContext.ts","lib/getFirstColumnNameWithError.tsx","lib/createLabelInAllLanguages.tsx","xlsform-simple-schema/types/ODKNode.ts","lib/ODKNodeContext.ts","toaster.ts","lib/useConfirmNodeDeletion.tsx","xlsform-simple-schema/functions/odk-formulas/evaluation/XPath.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/types.ts","xlsform-simple-schema/types/Errors.ts","xlsform-simple-schema/functions/odk-formulas/odk-formula-parser/ODKFormulaLexer.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/parselets/InfixParselet.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/parselets/PrefixParselet.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/Parser.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/expressions/NameExpression.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/expressions/OperatorExpression.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/parselets/BinaryOperatorParselet.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/expressions/CallExpression.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/parselets/CallParselet.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/expressions/ConditionalExpression.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/parselets/ConditionalParselet.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/parselets/GroupParselet.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/parselets/NameParselet.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/expressions/PostfixExpression.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/parselets/PostfixOperatorParselet.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/expressions/PrefixExpression.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/parselets/PrefixOperatorParselet.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/index.ts","xlsform-simple-schema/functions/odk-formulas/odk-formula-parser/ODKFormulaPrecedence.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/expressions/LiteralExpression.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/parselets/LiteralParselet.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/expressions/SelectorExpression.ts","xlsform-simple-schema/functions/odk-formulas/pratt-parser-base/parselets/SelectorParselet.ts","xlsform-simple-schema/functions/odk-formulas/odk-formula-parser/ODKFormulaParser.ts","xlsform-simple-schema/types/RowSchemas.ts","xlsform-simple-schema/types/RowTypes.ts","survey/useNodeDragAndDrop.tsx","lib/getLastRowIndexOfGroup.ts","survey/AddFieldMenuItem.tsx","survey/DetailsPopover/ActionMenu.tsx","components/expression/HighlightedExpression.tsx","components/unindent.ts","components/Markdown.tsx","components/StyledMarkdown.tsx","lib/colors.ts","survey/DetailsPopover/ExpressionPanel.tsx","lib/typesToIcons.tsx","survey/DetailsPopover/ChoiceListMenu.tsx","survey/DetailsPopover/FieldTypeMenu.tsx","survey/DetailsPopover/FieldConfigurationButton.tsx","survey/DetailsPopover/NoChoicesState.tsx","survey/DetailsPopover/FieldPathBreadcrumbs.tsx","survey/DetailsPopover/DetailsPopover.tsx","code/ResultCodeTree.tsx","components/ExcelFileInput.tsx","components/LanguageSelector.tsx","components/OverflowScrollContainer.tsx","xlsform-simple-schema/functions/loadSurveyFromXLSX.ts","xlsform-simple-schema/functions/nestSurvey.ts","xlsform-simple-schema/types/XLSForm.ts","xlsform-simple-schema/functions/odk-formulas/evaluation/ODKFormulaFunctions.ts","xlsform-simple-schema/functions/odk-formulas/evaluation/evaluateExpression.ts","xlsform-simple-schema/functions/odk-formulas/evaluation/evaluateODKFormula.ts","xlsform-simple-schema/functions/odk-formulas/evaluation/evaluateNodeColumn.ts","xlsform-simple-schema/functions/evaluateNodeAndChildren.ts","lib/useChangeHooks.tsx","xlsform-simple-schema/functions/patchXLSFormCell.ts","SheetTabs.tsx","components/PaddedContainer.tsx","survey/fields/ObjectArrayField.tsx","survey/fields/ObjectField.tsx","survey/internalFields.ts","survey/fields/BooleanField.tsx","survey/fields/CheckboxGroupField.tsx","survey/fields/DateField.tsx","survey/fields/Label.tsx","survey/fields/NumberField.tsx","survey/fields/RadioGroupField.tsx","survey/fields/TextField.tsx","survey/fields/ValueField.tsx","survey/FieldSetForKey.tsx","table/XLSFormWorksheet.tsx","xlsform-simple-schema/functions/schema-creation/getNodeOptionalFunction.ts","xlsform-simple-schema/functions/schema-creation/getStringInterpolationFunctionOrString.ts","xlsform-simple-schema/functions/schema-creation/Geometry.ts","xlsform-simple-schema/functions/schema-creation/getQuantitativeValueSchema.ts","xlsform-simple-schema/functions/schema-creation/MediaSchemas.ts","xlsform-simple-schema/functions/schema-creation/getAllowedChoiceValues.ts","xlsform-simple-schema/functions/schema-creation/evaluateDynamicChoiceListName.ts","xlsform-simple-schema/functions/schema-creation/evaluateFilteredChoiceNames.ts","xlsform-simple-schema/functions/schema-creation/questionTypesToSchemaGenerators.ts","xlsform-simple-schema/functions/schema-creation/createRecursiveNodeSchemaDefinition.ts","xlsform-simple-schema/functions/schema-creation/createLeafNodeSchemaDefinition.ts","App.tsx","survey/XLSFormSurvey.tsx","xlsform-simple-schema/functions/schema-creation/createSurveySchemaFromXLSForm.ts","reportWebVitals.ts","index.tsx"],"names":["knownLiteralsWithoutDollarSign","yes","no","TRUE","FALSE","true","false","getEmptyContext","survey","type","typeParameters","row","name","label","children","indentationLevel","rowIndex","nodesToAnswers","Map","evaluationResults","stackDepth","ODKSurveyContext","React","schema","SimpleSchema","context","language","languageCode","languageName","debug","xlsForm","undefined","setContext","onChangeAnswer","onChangeCell","onMoveNode","onSpliceRows","onRemoveRowAndChildren","getFirstColumnNameWithError","nodeEvaluationResults","keys","find","k","get","error","createLabelInAllLanguages","languages","result","forEach","lang","i","evaluatableColumnNames","isNodeRelevant","node","isRelevantEvaluationResult","isGroupNode","ODKNodeContext","Set","Object","freeze","AppToaster","Toaster","create","className","position","Position","TOP","useConfirmNodeDeletion","useContext","useState","isAlertOpen","setAlertOpen","setNode","isGroup","closeAlert","useCallback","removeNode","show","intent","message","showRemoveConfirmationDialog","alert","cancelButtonText","confirmButtonText","icon","Intent","DANGER","isOpen","onCancel","onConfirm","canOutsideClickCancel","canEscapeKeyCancel","length","findNodeByNameInsideScope","scope","childScope","foundChild","findNodeByNameInCurrentAndAncestorScopes","child","stack","getAncestors","parentScope","findNodeByPathRelativeToScope","pathComponents","pathComponent","Error","slice","getReverseNodeAbsolutePath","getNodeAbsolutePath","reverse","getNodeAbsolutePathString","join","getScopedNodeIndexPath","isEqual","push","childNode","foundStack","pop","getNodeIndexPath","getScopedAncestors","TokenType","ODKFormulaError","token","this","EvaluationError","expression","underlyingEvaluationError","nodeStack","ancestors","ParseError","tokens","LexerError","SyntaxError","SemanticError","FunctionNotImplementedError","functionName","LEFT_PAREN","RIGHT_PAREN","COMMA","ASSIGN","PLUS","MINUS","ASTERISK","GREATER_THAN","LESS_THAN","BOOLEAN_AND","BOOLEAN_OR","SLASH","CARET","TILDE","BANG","MODULO","COMPARISON","BACKSLASH","QUESTION","COLON","SINGLE_QUOTE","DOUBLE_QUOTE","NAME","LITERAL","NUMBER_LITERAL","INT_LITERAL","FLOAT_LITERAL","STRING_LITERAL","BOOLEAN_LITERAL","WHITESPACE","UNKNOWN","EOF","INVALID","punctuator","tokenType","Expression","kind","tokenPatterns","SELECTOR","ODKFormulaLexer","text","index","value","tokenPattern","regex","match","substr","errorToken","INTERNAL_LEXER_ERROR","InfixParselet","PrefixParselet","Parser","options","readTokens","prefixParselets","infixParselets","parselet","set","precedence","consumeAnything","prefix","left","parse","getPrecedence","infix","onExpression","expected","lookAhead","shift","distance","nextToken","next","onToken","parser","NameExpression","builder","OperatorExpression","operatorToken","right","print","BinaryOperatorParselet","isRight","parseExpression","CallExpression","fn","leftParenToken","argsAndDelimiters","rightParenToken","args","filter","e","CallParselet","rightParenTokenType","argumentDelimiterTokenType","delimiterToken","arg","consume","ConditionalExpression","condition","questionMarkToken","thenArm","colonToken","elseArm","ConditionalParselet","GroupParselet","NameParselet","getName","t","_parser","PostfixExpression","PostfixOperatorParselet","PrefixExpression","PrefixOperatorParselet","PrattParser","ODKFormulaPrecedence","BOOLEAN_OP","CONDITIONAL","ASSIGNMENT","SUM","PRODUCT","EXPONENT","PREFIX","POSTFIX","CALL","LiteralExpression","String","LiteralParselet","getValue","getType","SelectorExpression","selectorToken","selector","SelectorParselet","getSelector","ODKFormulaParser","expressions","register","startsWith","split","parseFloat","parseInt","Precedence","infixRight","infixLeft","getStringMapSchemaDefinition","schemaDefinition","blackbox","custom","getLocalizedStringSchemaDefinition","optionalLocalizedString","optional","optionalStringMap","formulaValidationFunction","lexer","addValidationErrors","key","questionRowSchema","includes","field","ErrorTypes","REQUIRED","operator","isSet","constraint","constraint_message","image","video","hint","guidance_hint","required_message","relevant","choice_filter","calculation","trigger","readonly","required","parameters","repeat_count","appearance","default","instance","bind","body","choiceRowSchema","settingsRowSchema","form_title","form_id","public_key","submission_url","default_language","version","assertValidQuestionRow","validate","ODKNodeDragAndDropContext","onDropNode","assertIsODKNode","Array","every","p","resultIsInvalid","getLastRowIndexOfGroup","hasChildren","indexOfGroupOrRepeatEnd","flatNodes","findIndex","n","untitledFieldIndex","AddFieldMenuItem","caption","onClick","after","before","inside","NodeActionMenu","onRemove","disabled","StyledCode","styled","code","Colors","RED2","GREEN3","BLUE3","ORANGE3","ORANGE4","GRAY1","BLUE2","RED5","TokenElement","parentExpression","href","target","referencedNode","data-referenced-node","DetailsPopover","editable","nameOfOnlyShownTab","InvalidExpression","props","style","lastToken","indexAfterLastToken","map","Classes","TEXT_DISABLED","HighlightedExpression","isErroneousExpression","expressionOrToken","unindent","input","firstLineWithContent","line","replace","matchedIndentation","matchedIndentationString","indentationRegExp","RegExp","MarkdownDiv","omit","dangerouslySetInnerHTML","__html","marked","Markdown","StyledMarkdown","DARK_GRAY1","alpha","color","alphaColor","rgb","opacity","toString","ExpressionPanel","columnName","cellValue","results","cellIsEmpty","isLiteral","isName","answer","nodeName","StyledPanel","backgroundColor","LIGHT_GRAY5","marginTop","padding","background","borderTop","LIGHT_GRAY3","StyledCodeBlock","fontSize","lineHeight","state","JSON","stringify","StyledCalloutWithCode","toMarkdown","TEXT_MUTED","typesToIcons","integer","decimal","range","select_one","select_one_from_file","select_multiple","select_multiple_from_file","rank","note","geopoint","geotrace","geoshape","date","time","datetime","audio","file","barcode","calculate","acknowledge","hidden","start","end","today","deviceid","simserial","subscriberid","phonenumber","username","email","audit","begin_group","begin_repeat","fieldTypeNames","fieldCategoriesToIcons","literal","choice","geo","media","stats","track","special","grouping","fieldCategoryNames","fieldTypesToCategories","ChoiceListMenu","choiceListsByName","choicesByName","choiceListNames","onChange","event","checked","currentTarget","choiceListName","without","newTypeValue","newRow","margin","vertical","listName","isSelected","nameElement","choiceNamesToRows","choiceNames","sortedChoiceRows","sortBy","r","toLowerCase","shownChoices","marginInline","restElement","UI_TEXT","marginLeft","paddingRight","aria-label","shownLabel","fill","display","LIST_UNSTYLED","justifyContent","large","FieldTypeMenu","dataset","c","category","data-type","FieldConfigurationButton","showType","surveyHasChoiceLists","choiceListMenu","noChoicesAvailable","addExampleChoices","choiceRows","addExampleChoicesButton","action","title","description","NoChoicesState","typeName","hasItems","content","lazy","minimal","small","rightIcon","outlined","observeParents","minVisibleItems","collapseFrom","Boundary","END","items","visibleItemRenderer","overflowRenderer","overflowItems","transition","maxWidth","FieldPathBreadcrumbs","path","width","overflowListProps","Code","div","Callout","RenderTarget","ref","detailsButtonCaption","targetProps","isRelevant","hasMissingParameters","hasError","isDraggedOver","setIsDraggedOver","dragProps","onDragStart","dataTransfer","setData","sourceNode","sourcePath","onDragOver","preventDefault","getData","onDrop","data","console","log","destinationNode","draggable","onDragLeave","useNodeDragAndDrop","flex","elementRef","Boolean","firstColumnNameWithError","firstColumnNameWithContent","setWidth","handleResize","entries","setTimeout","newWidth","contentRect","Math","abs","tabId","setTabId","editHeader","marginBottom","FLEX_EXPANDER","detailsContent","onResize","selectedTabId","renderActiveTabPanelOnly","panel","id","getTab","Provider","interactionKind","popoverClassName","PopoverClasses","POPOVER2_CONTENT_SIZING","placement","rootBoundary","onOpening","modifiers","arrow","enabled","preventOverflow","renderTarget","SecondaryLabel","keysWithErrors","valueString","htmlTitle","getNodeTree","transform","childNodes","nodeData","ResultCodeTree","evaluationContext","rootSurveyGroup","isExpanded","hasCaret","secondaryLabel","contents","ExcelFileInput","onFileChange","files","wb","ExcelJS","reader","FileReader","readAsArrayBuffer","onload","buffer","ArrayBuffer","xlsx","load","then","workbook","onLoadWorkbook","onInputChange","LanguageSelect","Select","ofType","renderItem","handleClick","shouldDismissPopover","LanguageSelector","onItemSelect","itemRenderer","activeItem","noResults","filterable","OverflowScrollContainer","overflow","nestDoubleColonFields","namespacePrefixes","defaultSuffix","foundSuffixes","add","namespacePrefix","suffix","objectToExtend","normalizeType","autoCleanOptions","getAutoValues","trimStrings","mutate","loadQuestionRow","cleanRow","clean","loadChoicesRow","assertValidChoiceRow","loadSettingsRow","assertValidSettingsRow","localizableColumnNames","loadWorksheet","sheetName","loadRowFn","defaultLanguage","excelWorksheet","getWorksheet","rows","firstRow","getRows","values","columnNames","columnNamesNormalized","headerRow","normalizeColumnNames","columnNamesToTrues","findLanguagesInColumnNames","eachRow","rowRawData","columnIndex","rowDataWithNamespacedFields","details","loadExcelRow","loadFormFromExcelWorkbook","a","settings","choices","loadXLSFormFromRows","assertNoEndMarker","loadChoices","worksheet","list","worksheets","formRootNameFromSettings","titleFromSettings","onRow","root","currentGroup","newGroupNode","newChildNode","nestSurvey","assertString","argNo","number","ordinalize","assertNumber","assertBoolean","functions","if","elseExpression","not","coalesce","arg2","boolean","_xpath","once","_expression","selected","space_delimited_array","string","_space_delimited_array","_n","_multi_select_question","_choice_name","_select_question","_name","_group","_i","_sub_grp","_sub_i","_sub_sub_grp","_sub_sub_i","count","_nodeset","sum","max","min","contains","substring","endsWith","_string","_target","translate","_fromchars","_tochars","trim","concat","_separator","round","places","int","floor","Number","NaN","digest","_data","_algorithm","_encodingMethod","pow","exponent","log10","sin","cos","tan","asin","acos","atan","atan2","y","x","sqrt","exp","exp10","pi","PI","now","Date","setHours","toISOString","_dateTime","_days","_time","_date","_format","area","_nodesetOrGeoshape","_nodesetOrGeoshapeOrGeotrace","random","randomize","_seed","uuid","_length","checklist","_min","_max","_response","evaluateExpression","deeperContext","evaluateLiteralExpression","evaluateNameExpression","evaluateNodeColumn","evaluateSelectorExpression","leftBeforeCasting","rightBeforeCasting","evaluateOperatorExpression","nameExpressionOrString","stringFromStringOrExpression","evaluatedArgs","apply","s","evaluateCallExpression","str","valueBeforeCasting","allowUndefinedNames","literalBag","nodeOrNodes","evaluationResult","evaluateNonDollarNameFn","assertExpressionAfterEvaluation","evaluateODKFormula","formula","fallback","originalFormula","fallbackValue","evaluateNodeAndChildren","onEval","fallbacks","getEvaluatedXLSFormResult","columnNamesToResults","useChangeHooks","setXLSForm","useEffect","newContext","fieldProps","clear","schemaKey","worksheetName","indexPath","valuePathInRow","changeIsInSurveyWorksheet","produce","draft","flat","patchXLSFormCell","rowCount","rowsToAdd","surveyWorksheet","newRows","splice","newWorksheet","numberOfRowsToRemove","SheetTabs","setWorksheetName","Group","align","Alignment","LEFT","active","PaddedContainer","horizontal","ObjectArrayField","ObjectField","subKeys","objectKeys","onChangeSurveyName","onChangeLabel","labelInput","placeholder","minWidth","multiline","HeadingClass","H1","H2","H3","H4","H5","hintString","alignItems","subkey","FieldSetForKey","internalFields","BooleanField","labelElement","defaultChecked","defaultValue","CheckboxGroupField","valueIsInvalid","element","newChoices","delete","from","choiceList","choiceRow","definedLabel","has","inline","jsDateFormatter","formatDate","toLocaleDateString","parseDate","DateField","selectedDate","isUserChange","Label","isEditable","evaluatedLabel","editedLabel","setEditedLabel","onConfirmLabel","minLines","maxLines","NumberField","valueAsNumber","allowNumericCharactersOnly","onValueChange","RadioGroupField","allowedValues","selectedValue","TextField","AutoField","quickType","ValueField","isBoolean","checkbox","valueAsDate","radio","isInternalField","detailsButton","autoFieldProps","labelFor","Stripe","CornerButton","TopCornerButton","BottomCornerButton","Hoverable","getQuickTypeForKey","schemaKeyPath","hoverOpenDelay","hoverCloseDelay","FlexTable","Table","XLSFormWorksheet","numRows","uniq","onConfirmCellEdit","cellRenderer","paddingLeft","enableRowResizing","getNodeOptionalFunction","getStringInterpolationFunctionOrString","inputString","replaceAll","offset","getQuantitativeValueSchema","rootDefinition","Text","oneOf","getMediaObjectSchema","regEx","RegEx","Url","getImageObjectSchema","withThumbnail","getAllowedChoiceValues","choiceListStrings","availableListNames","compact","choiceListString","evaluateDynamicChoiceListName","choiceObjects","o","choiceFilterString","choiceFilterExpression","flatMap","choiceObject","evalResult","evaluateFilteredChoiceNames","questionTypesToSchemaGenerators","Integer","minCount","maxCount","getPointGeometrySchema","getLineStringGeometrySchema","getPolygonGeometrySchema","getAudioObjectSchema","getVideoObjectSchema","EmailWithTLD","createRecursiveNodeSchemaDefinition","schemaDefinitions","definition","childrenSchemaDefinitions","assign","labelString","defaults","schemaGeneratorFunction","firstField","createLeafNodeSchemaDefinition","FocusStyleManager","onlyShowFocusOnTabs","StyledXLSFormSurvey","fieldSets","AppBody","NavbarSwitch","App","setLanguage","setDebug","showTable","setShowTable","showResult","setShowResult","onDebugChange","onShowTableChange","onShowResultChange","fileInput","reset","resetButton","resultCodeElement","whiteSpace","changeHooks","useMemo","mergedSchema","createSurveySchemaFromXLSForm","RIGHT","Divider","boxShadow","zIndex","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","enableAllPlugins","enablePatches","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fea8b1b1.chunk.js","sourcesContent":["import {\n  EvaluatableColumnName,\n  NodesToValues,\n  ODKNode,\n} from \"../../../types/ODKNode\";\nimport { NameExpression } from \"../pratt-parser-base\";\nimport ODKFormulaEvaluationResult from \"./ODKFormulaEvaluationResult\";\n\n/**\n * Contains global information that can be used in a single formula evaluation. The evaluation\n * process needs this to find values of other nodes, for example, when a formulas uses a relative\n * XPath selector to refer to a NodeSet.\n */\n\ntype ODKFormulaEvaluationContext = {\n  /** The survey in which the evaluation takes place */\n  survey: ODKNode;\n  nodesToAnswers: NodesToValues;\n  evaluationResults: NodesToValues<\n    Map<EvaluatableColumnName, ODKFormulaEvaluationResult>\n  >;\n  /** The current stack depth. Used to to prevent stack overflows in recursive calculations. */\n  stackDepth: number;\n  knownLiteralsWithoutDollarSign: Record<string, unknown>;\n  evaluateNonDollarNameFn?: (options: {\n    expression: NameExpression;\n    context: ODKFormulaEvaluationContext;\n    scope: ODKNode;\n  }) => unknown;\n};\n\nexport default ODKFormulaEvaluationContext;\n\n/** These are literals that appeared (and apparently were supported) in our Kobo forms, and are documented in XLSForms. */\nexport const knownLiteralsWithoutDollarSign: Record<string, unknown> = {\n  yes: true,\n  no: false,\n  TRUE: true,\n  FALSE: false,\n  true: true,\n  false: false,\n};\n\nexport const getEmptyContext: (\n  survey?: ODKNode\n) => ODKFormulaEvaluationContext = (survey?: ODKNode) => ({\n  survey: survey || {\n    type: \"\",\n    typeParameters: [],\n    row: {\n      type: \"\",\n      name: \"data\",\n      label: { \"English (en)\": \"[empty survey]\" },\n    },\n    children: [],\n    indentationLevel: 0,\n    rowIndex: -1,\n  },\n  nodesToAnswers: new Map(),\n  evaluationResults: new Map(),\n  stackDepth: 0,\n  knownLiteralsWithoutDollarSign,\n});\n","import * as React from \"react\";\nimport SimpleSchema from \"simpl-schema\";\nimport { XLSForm } from \"../xlsform-simple-schema\";\nimport ODKFormulaEvaluationContext, {\n  getEmptyContext,\n} from \"../xlsform-simple-schema/functions/odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport useChangeHooks from \"./useChangeHooks\";\n\nexport interface IODKSurveyContext {\n  schema?: SimpleSchema;\n  context?: ODKFormulaEvaluationContext;\n  language?: string;\n  languageName?: string;\n  languageCode?: string;\n  debug: boolean;\n  xlsForm?: XLSForm;\n}\n\nexport const ODKSurveyContext = React.createContext<\n  IODKSurveyContext & ReturnType<typeof useChangeHooks>\n>({\n  schema: new SimpleSchema({}),\n  context: getEmptyContext(),\n  language: \"English (en)\",\n  languageCode: \"en\",\n  languageName: \"English\",\n  debug: true,\n  xlsForm: undefined,\n  setContext: () => {},\n  onChangeAnswer: () => {},\n  onChangeCell: () => {},\n  onMoveNode: () => {},\n  onSpliceRows: () => {},\n  onRemoveRowAndChildren: () => {},\n});\n","import ODKFormulaEvaluationResult from \"../xlsform-simple-schema/functions/odk-formulas/evaluation/ODKFormulaEvaluationResult\";\n\nexport function getFirstColumnNameWithError(\n  nodeEvaluationResults: Map<string, ODKFormulaEvaluationResult> | undefined\n) {\n  return (\n    nodeEvaluationResults &&\n    [...nodeEvaluationResults.keys()].find(\n      (k) => nodeEvaluationResults?.get(k)?.error\n    )\n  );\n}\n","import { LocalizedString } from \"../xlsform-simple-schema/types/RowTypes\";\n\nexport function createLabelInAllLanguages(\n  label: string,\n  languages: Readonly<Set<string>>\n): LocalizedString {\n  const result: LocalizedString = {};\n  languages.forEach((lang) => {\n    result[lang] = label;\n  });\n  return result;\n}\n","import { createLabelInAllLanguages } from \"../../lib/createLabelInAllLanguages\";\nimport ODKFormulaEvaluationContext from \"../functions/odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport {\n  IBeginGroupMarkerRow,\n  IBeginRepeatMarkerRow,\n} from \"./BeginOrEndMarkerRow\";\nimport { QuestionRow } from \"./RowTypes\";\n\nexport type ODKNodeAnswer = {};\n\nexport type ODKNodeWithoutRuntimeInfo =\n  | {\n      row?: QuestionRow & (IBeginRepeatMarkerRow | IBeginGroupMarkerRow);\n      children: ODKNodeWithoutRuntimeInfo[];\n      indentationLevel: number;\n      rowIndex: number;\n    }\n  | {\n      row: QuestionRow;\n      children: ODKNodeWithoutRuntimeInfo[];\n      indentationLevel: number;\n      rowIndex: number;\n    };\n\nexport type ODKNode =\n  | {\n      row: QuestionRow & (IBeginRepeatMarkerRow | IBeginGroupMarkerRow);\n      type: string;\n      typeParameters: string[];\n      children: ODKNode[];\n      indentationLevel: number;\n      rowIndex: number;\n    }\n  | {\n      row: QuestionRow;\n      type: string;\n      typeParameters: string[];\n      children: ODKNode[];\n      indentationLevel: number;\n      rowIndex: number;\n    };\n\nlet i = 0;\nexport function getEmptyNode(\n  languages: Readonly<Set<string>>\n): Readonly<ODKNode> {\n  i += 1;\n  return Object.freeze({\n    row: {\n      type: \"text\",\n      name: `empty_node_${i}`,\n      label: createLabelInAllLanguages(`Empty node ${i}`, languages),\n    },\n    type: \"text\",\n    typeParameters: [],\n    children: [],\n    indentationLevel: 0,\n    rowIndex: -2,\n  });\n}\n\nexport type NodesToValues<T = unknown> = Readonly<Map<Readonly<ODKNode>, T>>;\n\nexport type EvaluatableColumnName =\n  | \"relevant\"\n  | \"calculation\"\n  | \"required\"\n  | \"readonly\"\n  | \"constraint\";\nexport const evaluatableColumnNames: EvaluatableColumnName[] = [\n  \"calculation\",\n  \"required\",\n  \"relevant\",\n  \"readonly\",\n  \"constraint\",\n];\n\nexport function isNodeRelevant(\n  node: ODKNode,\n  context?: ODKFormulaEvaluationContext\n) {\n  if (!context) {\n    return false;\n  }\n  const isRelevantEvaluationResult = context.evaluationResults\n    .get(node)\n    ?.get(\"relevant\")?.result;\n  return isRelevantEvaluationResult === undefined || isRelevantEvaluationResult;\n}\n\nexport function isNodeReadonly(\n  node: ODKNode,\n  context?: ODKFormulaEvaluationContext\n) {\n  if (!context) {\n    return false;\n  }\n  const isReadonlyEvaluationResult = context.evaluationResults\n    .get(node)\n    ?.get(\"readonly\")?.result;\n  return isReadonlyEvaluationResult === undefined || isReadonlyEvaluationResult;\n}\n\nexport function isGroupNode(node: ODKNode) {\n  return node.type === \"begin_group\" || node.type === \"begin_repeat\";\n}\n\nexport function isGroupRow(row: QuestionRow) {\n  return (\n    row.type === \"begin_group\" ||\n    row.type === \"begin_repeat\" ||\n    row.type === \"end_group\" ||\n    row.type === \"end_repeat\"\n  );\n}\n","import * as React from \"react\";\nimport ODKFormulaEvaluationResult from \"../xlsform-simple-schema/functions/odk-formulas/evaluation/ODKFormulaEvaluationResult\";\nimport {\n  EvaluatableColumnName,\n  getEmptyNode,\n  ODKNode,\n} from \"../xlsform-simple-schema/types/ODKNode\";\n\nexport interface IODKNodeContext {\n  node: ODKNode;\n  nodeEvaluationResults?: Map<\n    EvaluatableColumnName,\n    ODKFormulaEvaluationResult\n  >;\n}\n\nexport const ODKNodeContext = React.createContext<IODKNodeContext>({\n  node: getEmptyNode(new Set([\"English (en)\"])),\n});\n","import { Position, Toaster } from \"@blueprintjs/core\";\n\n/** Singleton toaster instance. Create separate instances for different options. */\nexport const AppToaster = Toaster.create({\n  className: \"recipe-toaster\",\n  position: Position.TOP,\n});\n","import { Alert, Intent } from \"@blueprintjs/core\";\nimport { useCallback, useContext, useState } from \"react\";\nimport { AppToaster } from \"../toaster\";\nimport { isGroupNode, ODKNode } from \"../xlsform-simple-schema/types/ODKNode\";\nimport { ODKSurveyContext } from \"./ODKSurveyContext\";\n\nexport default function useConfirmNodeDeletion() {\n  const context = useContext(ODKSurveyContext);\n  const [isAlertOpen, setAlertOpen] = useState(false);\n  const [node, setNode] = useState<ODKNode>();\n  const isGroup = node && isGroupNode(node);\n\n  const closeAlert = useCallback(() => {\n    setAlertOpen(false);\n  }, []);\n\n  const removeNode = useCallback(() => {\n    if (!node) {\n      return;\n    }\n    AppToaster.show({\n      intent: \"none\",\n      message: (\n        <>\n          <code>{node.row.name}</code> field removed.\n        </>\n      ),\n    });\n    context.onRemoveRowAndChildren(node);\n    setAlertOpen(false);\n  }, [context, node]);\n\n  const showRemoveConfirmationDialog = useCallback((node: ODKNode) => {\n    setNode(node);\n    setAlertOpen(true);\n  }, []);\n\n  const alert = (\n    <Alert\n      cancelButtonText=\"Cancel\"\n      confirmButtonText=\"Delete\"\n      icon=\"trash\"\n      intent={Intent.DANGER}\n      isOpen={isAlertOpen}\n      onCancel={closeAlert}\n      onConfirm={removeNode}\n      canOutsideClickCancel={true}\n      canEscapeKeyCancel={true}\n    >\n      <p>\n        Are you sure you want to remove the <code>{node?.row.name}</code>{\" \"}\n        {isGroup ? \"group\" : \"field\"}?\n      </p>\n      {isGroup && node?.children.length && (\n        <p>This will also remove the group’s nested fields.</p>\n      )}\n    </Alert>\n  );\n\n  return {\n    showRemoveConfirmationDialog,\n    alert,\n  };\n}\n","import { isEqual } from \"lodash\";\nimport { ODKNode } from \"../../../types/ODKNode\";\nimport ODKFormulaEvaluationContext from \"./ODKFormulaEvaluationContext\";\n\n/**\n * Recursively searches for a node by its name, starting from the given scope. Includes children of\n * the current scope in search.\n *\n * @param name the name of the node to select\n * @param context global survey context to search in\n * @param scope current scope to limit the search. Skip this argument to search in the survey's root\n *   node.\n */\nexport function findNodeByNameInsideScope(\n  name: string,\n  context: ODKFormulaEvaluationContext,\n  scope: ODKNode = context.survey\n): ODKNode | ODKNode[] | undefined {\n  if (scope.row?.name === name) {\n    return scope;\n  } else if (scope.children?.length) {\n    for (let i = 0; i < scope.children.length; i += 1) {\n      const childScope = scope.children[i];\n      if (childScope.row?.name === name) {\n        return childScope;\n      }\n      const foundChild = findNodeByNameInsideScope(name, context, childScope);\n      if (foundChild) {\n        return foundChild;\n      }\n    }\n  }\n  return undefined;\n}\n\n/**\n * Recursively searches for a node by its name, starting from the given scope and moving upwards in\n * the hierarchy. Includes ancestors of the current scope in search, until it reaches the root\n * scope.\n *\n * @param name the name of the node to select\n * @param context global survey context to search in\n * @param scope current scope to limit the search. Skip this argument to search in the survey's root\n *   node.\n */\nexport function findNodeByNameInCurrentAndAncestorScopes(\n  name: string,\n  context: ODKFormulaEvaluationContext,\n  scope: ODKNode\n): ODKNode | ODKNode[] | undefined {\n  if (scope.row?.name === name) {\n    return scope;\n  } else if (scope.children) {\n    for (let i = 0; i < scope.children.length; i += 1) {\n      const child = scope.children[i];\n      if (child.row?.name === name) {\n        return child;\n      }\n    }\n  }\n  const stack = getAncestors(scope, context);\n  const parentScope = stack?.[stack.length - 1];\n  if (!parentScope) {\n    return undefined;\n  }\n  return (\n    findNodeByNameInCurrentAndAncestorScopes(name, context, parentScope) ||\n    undefined\n  );\n}\n\n/**\n * Returns a node that matches the given absolute path, or its relative path as seen from the given\n * scope. Works a bit like a file structure.\n *\n * @param pathComponents Path of the node to select. Array of strings, e.g. `['..', '..', 'name']`.\n * @param context global survey context to search in\n * @param scope current scope to limit the search. Skip this argument to search in the survey's root\n *   node.\n */\nexport function findNodeByPathRelativeToScope(\n  pathComponents: string[],\n  context: ODKFormulaEvaluationContext,\n  scope: ODKNode = context.survey\n): ODKNode | ODKNode[] | undefined {\n  const pathComponent = pathComponents[0];\n  // console.log('Searching', pathComponent, 'in scope', scope.row?.name, 'stack', scope.stack);\n  let result: ODKNode | undefined;\n\n  if (pathComponent === \".\") {\n    result = scope;\n  } else if (pathComponent === \"/\") {\n    result = context.survey;\n  } else if (pathComponent === \"..\") {\n    if (scope === context.survey) {\n      throw new Error(\n        \"Reached root - Can’t traverse further up the hierarchy.\"\n      );\n    }\n    const stack = getAncestors(scope, context);\n    result = stack?.[stack.length - 1];\n  } else if (pathComponent === scope.row.name) {\n    result = scope;\n  } else if (scope.children?.length) {\n    for (let i = 0; i < scope.children.length; i += 1) {\n      const childScope = scope.children[i];\n      if (childScope.row.name === pathComponent) {\n        result = childScope;\n        break;\n      }\n    }\n  }\n\n  if (pathComponents.length === 1) {\n    return result;\n  }\n\n  return findNodeByPathRelativeToScope(\n    pathComponents.slice(1),\n    context,\n    result\n  );\n}\n\nfunction getReverseNodeAbsolutePath(\n  node: ODKNode | undefined,\n  context: ODKFormulaEvaluationContext\n): string[] {\n  if (!node) {\n    return [\"/\"];\n  }\n\n  if (!node?.row?.name) {\n    throw new Error(\n      `Encountered a row without a name (row #${node.rowIndex}). This should not happen. Please ensure the survey data is valid.`\n    );\n  }\n\n  const stack = getAncestors(node, context);\n  return [\n    node.row?.name,\n    ...getReverseNodeAbsolutePath(stack?.[stack.length - 1], context),\n  ];\n}\n\nexport function getNodeAbsolutePath(\n  node: ODKNode,\n  context: ODKFormulaEvaluationContext\n): string[] {\n  return getReverseNodeAbsolutePath(node, context)?.reverse();\n}\n\nexport function getNodeAbsolutePathString(\n  node: ODKNode,\n  context: ODKFormulaEvaluationContext\n): string {\n  return getNodeAbsolutePath(node, context).slice(1).join(\".\");\n}\n\nexport function isXPath(string: string): boolean {\n  return !!string.match(/^\\/(\\/?[\\w*]+(?:\\[[^]+?])?)$/);\n}\n\nexport function getScopedNodeIndexPath(\n  node: ODKNode,\n  scope: ODKNode,\n  stack: number[] = []\n): number[] | undefined {\n  if (isEqual(node, scope)) {\n    return stack;\n  }\n  if (scope.children?.length) {\n    for (let i = 0; i < scope.children.length; i += 1) {\n      stack.push(i);\n      const childNode = scope.children[i];\n      const foundStack = getScopedNodeIndexPath(node, childNode, stack);\n      if (foundStack !== undefined) {\n        return foundStack;\n      }\n      stack.pop();\n    }\n  }\n  return undefined;\n}\n\nexport function getNodeIndexPath(\n  node: ODKNode,\n  context: ODKFormulaEvaluationContext\n): number[] | undefined {\n  return getScopedNodeIndexPath(node, context.survey);\n}\n\nexport function getScopedAncestors(\n  node: ODKNode,\n  scope: ODKNode,\n  stack: ODKNode[] = []\n): ODKNode[] | undefined {\n  if (isEqual(node, scope)) {\n    return stack;\n  }\n  if (scope.children?.length) {\n    stack.push(scope);\n    for (let i = 0; i < scope.children.length; i += 1) {\n      const childNode = scope.children[i];\n      const foundStack = getScopedAncestors(node, childNode, stack);\n      if (foundStack) {\n        return foundStack;\n      }\n    }\n    stack.pop();\n  }\n}\n\nexport function getAncestors(\n  node: ODKNode,\n  context: ODKFormulaEvaluationContext\n) {\n  return getScopedAncestors(node, context.survey);\n}\n","export enum TokenType {\n  LEFT_PAREN,\n  RIGHT_PAREN,\n  COMMA,\n  ASSIGN,\n  PLUS,\n  MINUS,\n  ASTERISK,\n  DOLLAR,\n  LEFT_BRACE,\n  RIGHT_BRACE,\n  GREATER_THAN,\n  LESS_THAN,\n  SLASH,\n  POINT,\n  CARET,\n  TILDE,\n  BANG,\n  BACKSLASH,\n  QUESTION,\n  COLON,\n  SINGLE_QUOTE,\n  DOUBLE_QUOTE,\n  MODULO,\n  BOOLEAN_AND,\n  BOOLEAN_OR,\n  COMPARISON,\n  NAME,\n  LITERAL,\n  NUMBER_LITERAL,\n  FLOAT_LITERAL,\n  INT_LITERAL,\n  STRING_LITERAL,\n  BOOLEAN_LITERAL,\n  SELECTOR,\n  WHITESPACE,\n  UNKNOWN,\n  EOF,\n  INVALID,\n  INTERNAL_LEXER_ERROR,\n}\n\nexport const tokenTypes = [\n  TokenType.LEFT_PAREN,\n  TokenType.RIGHT_PAREN,\n  TokenType.COMMA,\n  TokenType.ASSIGN,\n  TokenType.PLUS,\n  TokenType.MINUS,\n  TokenType.ASTERISK,\n  TokenType.GREATER_THAN,\n  TokenType.LESS_THAN,\n  TokenType.BOOLEAN_AND,\n  TokenType.BOOLEAN_OR,\n  TokenType.SLASH,\n  TokenType.CARET,\n  TokenType.TILDE,\n  TokenType.BANG,\n  TokenType.MODULO,\n  TokenType.COMPARISON,\n  TokenType.BACKSLASH,\n  TokenType.QUESTION,\n  TokenType.COLON,\n  TokenType.SINGLE_QUOTE,\n  TokenType.DOUBLE_QUOTE,\n  TokenType.NAME,\n  TokenType.LITERAL,\n  TokenType.NUMBER_LITERAL,\n  TokenType.INT_LITERAL,\n  TokenType.FLOAT_LITERAL,\n  TokenType.STRING_LITERAL,\n  TokenType.BOOLEAN_LITERAL,\n  TokenType.WHITESPACE,\n  TokenType.UNKNOWN,\n  TokenType.EOF,\n  TokenType.INVALID,\n];\n\n/**\n * If the TokenType represents a punctuator (i.e. a token that can split an\n * identifier like '+', this will get its text.\n */\nexport function punctuator(tokenType: TokenType): string {\n  switch (tokenType) {\n    case TokenType.LEFT_PAREN:\n      return \"(\";\n    case TokenType.RIGHT_PAREN:\n      return \")\";\n    case TokenType.COMMA:\n      return \",\";\n    case TokenType.ASSIGN:\n      return \"=\";\n    case TokenType.PLUS:\n      return \"+\";\n    case TokenType.MINUS:\n      return \"-\";\n    case TokenType.ASTERISK:\n      return \"*\";\n    case TokenType.SLASH:\n      return \"/\";\n    case TokenType.CARET:\n      return \"^\";\n    case TokenType.TILDE:\n      return \"~\";\n    case TokenType.BANG:\n      return \"!\";\n    case TokenType.BACKSLASH:\n      return \"\\\\\";\n    case TokenType.QUESTION:\n      return \"?\";\n    case TokenType.COLON:\n      return \":\";\n    default:\n      return \"[undefined punctuator]\";\n  }\n}\n\n/**\n * A simple token class. These are generated by Lexer and consumed by Parser.\n */\nexport type Token = {\n  type: TokenType;\n  text: string;\n  index: number;\n};\n\n/**\n * Interface for all expression AST node classes.\n */\nexport abstract class Expression {\n  abstract readonly kind: string;\n  abstract tokens: Token[];\n  abstract children: (Token | Expression)[];\n  /**\n   * Pretty-print the expression to a string.\n   */\n  abstract print(builder: StringBuilder): void;\n}\n\nexport type StringBuilder = (result: string) => void;\n","import ODKFormulaEvaluationContext from \"../functions/odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport { getScopedAncestors } from \"../functions/odk-formulas/evaluation/XPath\";\nimport { Expression, Token } from \"../functions/odk-formulas/pratt-parser-base\";\nimport { ODKNode } from \"./ODKNode\";\n\nexport abstract class ODKFormulaError extends Error {\n  token?: Token;\n  toMarkdown(): string {\n    return this.message;\n  }\n}\n\nexport class EvaluationError extends ODKFormulaError {\n  nodeStack: readonly Readonly<ODKNode>[];\n\n  constructor(\n    message: string,\n    readonly type: string,\n    readonly expression: Expression | undefined,\n    readonly context: ODKFormulaEvaluationContext,\n    readonly scope: ODKNode,\n    readonly underlyingEvaluationError: EvaluationError | undefined = undefined\n  ) {\n    super(message);\n\n    const ancestors = getScopedAncestors(scope, context.survey);\n\n    this.nodeStack = [...(ancestors || []), scope];\n  }\n\n  toMarkdown(): string {\n    return this.message;\n  }\n}\n\nexport class ParseError extends ODKFormulaError {\n  constructor(\n    readonly type: string,\n    message: string,\n    readonly tokens?: Token[]\n  ) {\n    super(message);\n  }\n\n  toMarkdown(): string {\n    return this.message;\n  }\n}\n\nexport class LexerError extends ODKFormulaError {\n  constructor(readonly token: Token, readonly message: string) {\n    super(message);\n  }\n}\n\nexport class SyntaxError extends ODKFormulaError {}\n\nexport class SemanticError extends ODKFormulaError {}\n\nexport class FunctionNotImplementedError extends ODKFormulaError {\n  constructor(functionName: string) {\n    super(\n      `The \\`${functionName}\\` function is not supported yet. If you need it, please contact the developers.`\n    );\n  }\n}\n\nexport class UnsupportedFeatureError extends ODKFormulaError {\n  constructor(feature: string) {\n    super(`${feature} is not supported.`);\n  }\n}\n","import { LexerError } from \"../../../types/Errors\";\nimport { Token, TokenType } from \"../pratt-parser-base/types\";\n\nexport const xPathPrefixRegExp = /^\\/(\\/?[\\w*]+(?:\\[[^]+?]\\B)?)/;\n\nconst tokenPatterns: [TokenType, RegExp][] = [\n  [TokenType.STRING_LITERAL, /^'(\\\\\\\\|\\\\'|[^'])*'/],\n  [TokenType.STRING_LITERAL, /^\"(\\\\\\\\|\\\\\"|[^\"])*\"/],\n  [TokenType.SLASH, /^div/],\n  [TokenType.MODULO, /^mod/],\n  [TokenType.BOOLEAN_AND, /^and/],\n  [TokenType.BOOLEAN_OR, /^or/],\n  [TokenType.FLOAT_LITERAL, /^-?\\d+\\.\\d+/],\n  [TokenType.INT_LITERAL, /^-?\\d+/],\n  [TokenType.NAME, /^\\$?{[^}]+}/],\n  [TokenType.NAME, /^[a-zA-Z_\\w_][a-zA-Z_\\w_-]*/],\n  [TokenType.SELECTOR, xPathPrefixRegExp], // Match XPaths\n  [TokenType.LEFT_PAREN, /^\\(/],\n  [TokenType.RIGHT_PAREN, /^\\)/],\n  [TokenType.COMMA, /^,/],\n  [TokenType.PLUS, /^\\+/],\n  [TokenType.MINUS, /^-/],\n  [TokenType.ASTERISK, /^\\*/],\n  [TokenType.COMPARISON, /^(>=|>|<=|<|=|!=)/],\n  [TokenType.COMPARISON, /^(>=|>|<=|<|=|!=)/],\n  [TokenType.INVALID, /^(\\w+|[\\s\\S])/],\n];\n\nexport default class ODKFormulaLexer implements Iterator<Token> {\n  index = 0;\n  constructor(readonly text: string) {}\n  next(): { value: Token } {\n    if (this.index >= this.text.length) {\n      // Once we've reached the end of the string, just return EOF tokens. We'll\n      // just keeping returning them as many times as we're asked so that the\n      // parser's lookahead doesn't have to worry about running out of tokens.\n      return { value: { type: TokenType.EOF, text: \"\", index: this.index } };\n    }\n\n    // Consume and ignore whitespace\n    while (this.text[this.index] === \" \") {\n      this.index += 1;\n    }\n\n    for (let i = 0; i < tokenPatterns.length; i += 1) {\n      const tokenPattern = tokenPatterns[i];\n      const [type, regex] = tokenPattern;\n      const result = this.text.slice(this.index).match(regex);\n      if (result === null) {\n        continue;\n      }\n      const text = result[0];\n      const token: Token = {\n        type,\n        text: this.text.substr(this.index, text.length),\n        index: this.index,\n      };\n      this.index += text.length;\n      return { value: token };\n    }\n\n    const errorToken: Token = {\n      type: TokenType.INTERNAL_LEXER_ERROR,\n      text: this.text[this.index],\n      index: this.index,\n    };\n    throw new LexerError(\n      errorToken,\n      \"Lexer should never get here. If we get here, this means there is no invalid token defined at the end of the pattern list. This invalid token should match at least one character that is not recognized by all other patterns.\"\n    );\n  }\n}\n","import Parser from '../Parser';\nimport { Expression, Token } from '../types';\n\n/**\n * One of the two parselet interfaces used by the Pratt parser. An\n * InfixParselet is associated with a token that appears in the middle of the\n * expression it parses. Its parse() method will be called after the left-hand\n * side has been parsed, and it in turn is responsible for parsing everything\n * that comes after the token. This is also used for postfix expressions, in\n * which case it simply doesn't consume any more tokens in its parse() call.\n */\nexport default abstract class InfixParselet {\n  abstract parse(parser: Parser, left: Expression, token: Token): Expression;\n  abstract getPrecedence(): number;\n}\n","import Parser from '../Parser';\nimport { Expression, Token } from '../types';\n\n/**\n * One of the two interfaces used by the Pratt parser. A PrefixParselet is\n * associated with a token that appears at the beginning of an expression. Its\n * parse() method will be called with the consumed leading token, and the\n * parselet is responsible for parsing anything that comes after that token.\n * This interface is also used for single-token expressions like variables, in\n * which case parse() simply doesn't consume any more tokens.\n * @author rnystrom\n *\n */\nexport default abstract class PrefixParselet {\n  abstract parse(parser: Parser, token: Token): Expression;\n}\n","import { ParseError } from \"../../../types/Errors\";\nimport InfixParselet from \"./parselets/InfixParselet\";\nimport PrefixParselet from \"./parselets/PrefixParselet\";\nimport { Expression, Token, TokenType } from \"./types\";\n\nexport type TokenCallback = (expression: Token) => void;\nexport type ExpressionCallback = (expression: Expression) => void;\nexport interface ITokenizer {\n  next: () => { value: Token };\n}\nexport type ParserOptions = {\n  tokens: ITokenizer;\n  onToken?: TokenCallback;\n  onExpression?: ExpressionCallback;\n};\n\nexport default class Parser {\n  private readTokens: Token[] = [];\n  private prefixParselets: Map<TokenType, PrefixParselet> = new Map();\n  private infixParselets: Map<TokenType, InfixParselet> = new Map();\n\n  constructor(readonly options: ParserOptions) {}\n\n  public register(\n    token: TokenType,\n    parselet: PrefixParselet | InfixParselet\n  ): void {\n    if (parselet instanceof PrefixParselet) {\n      this.prefixParselets.set(token, parselet);\n    } else if (parselet instanceof InfixParselet) {\n      this.infixParselets.set(token, parselet);\n    } else {\n      throw new Error(\n        `Found a parselet that was neither an infix nor a prefix parselet: No idea what to do with it…`\n      );\n    }\n  }\n\n  public parseExpression(precedence = 0): Expression {\n    const token = this.consumeAnything();\n    if (!token) {\n      throw new ParseError(\n        \"prematureEOF\",\n        \"Parser encountered end of tokens. This should not happen.\"\n      );\n    }\n    const prefix = this.prefixParselets.get(token.type);\n    if (!prefix)\n      throw new ParseError(\n        \"undefinedPrefix\",\n        `Expected start of a new expression, but \\`${token.text}\\` is not an allowed prefix.`,\n        [token]\n      );\n\n    let left: Expression = prefix.parse(this, token);\n\n    while (precedence < this.getPrecedence()) {\n      const token = this.consumeAnything();\n      if (!token) {\n        throw new ParseError(\n          \"prematureEndOfTokens\",\n          \"Parser encountered end of tokens. This should not happen.\"\n        );\n      }\n      const infix = this.infixParselets.get(token.type);\n      if (!infix)\n        throw new ParseError(\n          \"undefinedInfix\",\n          `\\`${token.text}\\` is not an allowed infix.`,\n          [token]\n        );\n      left = infix.parse(this, left, token);\n    }\n\n    this.options.onExpression?.(left);\n    return left;\n  }\n\n  public match(expected: TokenType): Token | undefined {\n    const token = this.lookAhead(0);\n    if (token.type !== expected) {\n      return undefined;\n    }\n\n    return this.consumeAnything();\n  }\n\n  public consume(expected: TokenType): Token {\n    const token = this.lookAhead(0);\n    if (token.type !== expected) {\n      throw new Error(\n        \"Expected token \" + expected + \" and found \" + token.type\n      );\n    }\n\n    const consumedToken = this.consumeAnything();\n    if (!consumedToken) {\n      throw new Error(\"Could not consume token \" + expected);\n    }\n    return token;\n  }\n\n  public consumeAnything(): Token | undefined {\n    // Make sure we've read the token.\n    this.lookAhead(0);\n\n    return this.readTokens.shift();\n  }\n\n  private lookAhead(distance: number): Token {\n    // Read in as many as needed.\n    while (distance >= this.readTokens.length) {\n      const nextToken = this.options.tokens.next();\n      if (nextToken.value) this.options.onToken?.(nextToken.value);\n      this.readTokens.push(nextToken.value);\n    }\n\n    // Get the queued token.\n    return this.readTokens[distance];\n  }\n\n  private getPrecedence(): number {\n    const parser = this.infixParselets.get(this.lookAhead(0).type);\n    if (parser) return parser.getPrecedence();\n    return 0;\n  }\n}\n","import { Expression, StringBuilder, Token } from \"../types\";\n\n/**\n * A simple variable name expression like \"abc\".\n */\nexport default class NameExpression extends Expression {\n  kind = \"name\";\n  children = this.tokens;\n\n  constructor(\n    readonly tokens: Token[],\n    readonly name: string,\n    readonly text: string\n  ) {\n    super();\n  }\n\n  public print(builder: StringBuilder): void {\n    builder(this.name);\n  }\n}\n","import { Expression, StringBuilder, Token } from \"../types\";\n\n/**\n * A binary arithmetic expression like \"a + b\" or \"c ^ d\".\n */\nexport default class OperatorExpression extends Expression {\n  kind = \"operator\";\n  children = [this.left, this.operatorToken, this.right];\n\n  constructor(\n    readonly tokens: Token[],\n    readonly left: Expression,\n    readonly operatorToken: Token,\n    readonly right: Expression\n  ) {\n    super();\n  }\n\n  public print(builder: StringBuilder): void {\n    builder(\"(\");\n    this.left.print(builder);\n    builder(\" \");\n    builder(this.operatorToken.text);\n    builder(\" \");\n    this.right.print(builder);\n    builder(\")\");\n  }\n}\n","import OperatorExpression from \"../expressions/OperatorExpression\";\nimport Parser from \"../Parser\";\nimport { Expression, Token } from \"../types\";\nimport InfixParselet from \"./InfixParselet\";\n\n/**\n * Generic infix parselet for a binary arithmetic operator. The only\n * difference when parsing, \"+\", \"-\", \"*\", \"/\", and \"^\" is precedence and\n * associativity, so we can use a single parselet class for all of those.\n */\nexport default class BinaryOperatorParselet extends InfixParselet {\n  constructor(readonly precedence: number, readonly isRight: boolean) {\n    super();\n  }\n\n  public parse(\n    parser: Parser,\n    left: Expression,\n    operatorToken: Token\n  ): Expression {\n    // To handle right-associative operators like \"^\", we allow a slightly\n    // lower precedence when parsing the right-hand side. This will let a\n    // parselet with the same precedence appear on the right, which will then\n    // take *this* parselet's result as its left-hand argument.\n    const right = parser.parseExpression(\n      this.precedence - (this.isRight ? 1 : 0)\n    );\n\n    return new OperatorExpression(\n      [...left.tokens, operatorToken, ...right.tokens],\n      left,\n      operatorToken,\n      right\n    );\n  }\n\n  public getPrecedence(): number {\n    return this.precedence;\n  }\n}\n","import { Expression, StringBuilder, Token } from \"../types\";\n\n/**\n * A function call like \"a(b, c, d)\".\n */\nexport default class CallExpression extends Expression {\n  kind = \"call\";\n  readonly args: Expression[];\n  children = [\n    this.fn,\n    this.leftParenToken,\n    ...this.argsAndDelimiters,\n    this.rightParenToken,\n  ];\n\n  constructor(\n    readonly tokens: Token[],\n    readonly fn: Expression,\n    readonly leftParenToken: Token,\n    readonly argsAndDelimiters: (Expression | Token)[],\n    readonly rightParenToken: Token\n  ) {\n    super();\n    this.args = argsAndDelimiters.filter(\n      (e) => e instanceof Expression\n    ) as Expression[];\n  }\n\n  public print(builder: StringBuilder): void {\n    this.fn.print(builder);\n    builder(\"(\");\n    for (let i = 0; i < this.args.length; i++) {\n      this.args[i].print(builder);\n      if (i < this.args.length - 1) builder(\", \");\n    }\n    builder(\")\");\n  }\n}\n","import CallExpression from \"../expressions/CallExpression\";\nimport { Expression, Token, TokenType } from \"../types\";\nimport InfixParselet from \"./InfixParselet\";\nimport Parser from \"../Parser\";\n\n/**\n * Parselet to parse a function call like \"a(b, c, d)\".\n */\nexport default class CallParselet extends InfixParselet {\n  constructor(\n    readonly rightParenTokenType: TokenType,\n    readonly argumentDelimiterTokenType: TokenType,\n    readonly precedence: number\n  ) {\n    super();\n  }\n\n  public parse(\n    parser: Parser,\n    left: Expression,\n    leftParenToken: Token\n  ): Expression {\n    // Parse the token-separated arguments until we hit the token that marks the argument list end.\n    const args: Expression[] = [];\n    let rightParenToken: Token | undefined = parser.match(\n      this.rightParenTokenType\n    );\n    const tokens: Token[] = [...left.tokens, leftParenToken];\n    const argsAndDelimiters: (Expression | Token)[] = [];\n    if (rightParenToken) {\n      // There may be no arguments at all.\n      tokens.push(rightParenToken);\n    } else {\n      let delimiterToken;\n      do {\n        const arg = parser.parseExpression();\n        args.push(arg);\n        tokens.push(...arg.tokens);\n        argsAndDelimiters.push(arg);\n        delimiterToken = parser.match(this.argumentDelimiterTokenType);\n        if (delimiterToken) {\n          tokens.push(delimiterToken);\n          argsAndDelimiters.push(delimiterToken);\n        }\n      } while (delimiterToken);\n      rightParenToken = parser.consume(this.rightParenTokenType);\n      if (rightParenToken) {\n        tokens.push(rightParenToken);\n      }\n    }\n\n    return new CallExpression(\n      tokens,\n      left,\n      leftParenToken,\n      argsAndDelimiters,\n      rightParenToken\n    );\n  }\n\n  public getPrecedence(): number {\n    return this.precedence;\n  }\n}\n","import { Expression, StringBuilder, Token } from \"../types\";\n\n/**\n * A ternary conditional expression like \"a ? b : c\".\n */\nexport default class ConditionalExpression extends Expression {\n  kind = \"conditional\";\n  children = [\n    this.condition,\n    this.questionMarkToken,\n    this.thenArm,\n    this.colonToken,\n    this.elseArm,\n  ];\n\n  constructor(\n    readonly tokens: Token[],\n    readonly condition: Expression,\n    readonly questionMarkToken: Token,\n    readonly thenArm: Expression,\n    readonly colonToken: Token,\n    readonly elseArm: Expression\n  ) {\n    super();\n  }\n\n  public print(builder: StringBuilder): void {\n    builder(\"(\");\n    this.condition.print(builder);\n    builder(\" ? \");\n    this.thenArm.print(builder);\n    builder(\" : \");\n    this.elseArm.print(builder);\n    builder(\")\");\n  }\n}\n","import ConditionalExpression from \"../expressions/ConditionalExpression\";\nimport Parser from \"../Parser\";\nimport { Expression, Token, TokenType } from \"../types\";\nimport InfixParselet from \"./InfixParselet\";\n\n/**\n * Parselet for the condition or \"ternary\" operator, like \"a ? b : c\".\n */\nexport default class ConditionalParselet extends InfixParselet {\n  constructor(readonly precedence: number) {\n    super();\n  }\n\n  public parse(\n    parser: Parser,\n    left: Expression,\n    questionMarkToken: Token\n  ): Expression {\n    const thenArm = parser.parseExpression();\n    const colonToken = parser.consume(TokenType.COLON);\n    const elseArm = parser.parseExpression(this.precedence - 1);\n    return new ConditionalExpression(\n      [\n        ...left.tokens,\n        questionMarkToken,\n        ...thenArm.tokens,\n        colonToken,\n        ...elseArm.tokens,\n      ],\n      left,\n      questionMarkToken,\n      thenArm,\n      colonToken,\n      elseArm\n    );\n  }\n\n  public getPrecedence(): number {\n    return this.precedence;\n  }\n}\n","import Parser from \"../Parser\";\nimport { Expression, Token, TokenType } from \"../types\";\nimport PrefixParselet from \"./PrefixParselet\";\n\n/**\n * Parses parentheses used to group an expression, like \"a * (b + c)\".\n */\nexport default class GroupParselet extends PrefixParselet {\n  constructor(readonly rightParenTokenType: TokenType) {\n    super();\n  }\n\n  public parse(parser: Parser, leftParenToken: Token): Expression {\n    const expression = parser.parseExpression();\n    const rightParenToken = parser.consume(this.rightParenTokenType);\n    expression.tokens = [leftParenToken, ...expression.tokens, rightParenToken];\n    expression.children = [leftParenToken, expression, rightParenToken];\n    return expression;\n  }\n}\n","import NameExpression from \"../expressions/NameExpression\";\nimport Parser from \"../Parser\";\nimport { Expression, Token } from \"../types\";\nimport PrefixParselet from \"./PrefixParselet\";\n\n/**\n * Simple parselet for a named variable like \"abc\".\n */\nexport default class NameParselet extends PrefixParselet {\n  constructor(readonly getName: (text: string) => string = (t) => t) {\n    super();\n  }\n  public parse(_parser: Parser, token: Token): Expression {\n    const name = this.getName(token.text);\n    return new NameExpression([token], name, token.text);\n  }\n}\n","import { Expression, punctuator, StringBuilder, Token } from \"../types\";\n\n/**\n * A postfix unary arithmetic expression like \"a!\".\n */\nexport default class PostfixExpression extends Expression {\n  kind = \"postfix\";\n  children = [this.left, this.operatorToken];\n\n  constructor(\n    readonly tokens: Token[],\n    readonly left: Expression,\n    readonly operatorToken: Token\n  ) {\n    super();\n  }\n\n  public print(builder: StringBuilder): void {\n    builder(\"(\");\n    this.left.print(builder);\n    builder(punctuator(this.operatorToken.type));\n    builder(\")\");\n  }\n}\n","import PostfixExpression from \"../expressions/PostfixExpression\";\nimport Parser from \"../Parser\";\nimport { Expression, Token } from \"../types\";\nimport InfixParselet from \"./InfixParselet\";\n\n/**\n * Generic infix parselet for an unary arithmetic operator. Parses postfix\n * unary \"?\" expressions.\n */\nexport default class PostfixOperatorParselet extends InfixParselet {\n  constructor(readonly precedence: number) {\n    super();\n  }\n\n  public parse(_parser: Parser, left: Expression, token: Token): Expression {\n    return new PostfixExpression([...left.tokens, token], left, token);\n  }\n\n  public getPrecedence(): number {\n    return this.precedence;\n  }\n}\n","import { Expression, punctuator, StringBuilder, Token } from \"../types\";\n\n/**\n * A prefix unary arithmetic expression like \"!a\" or \"-b\".\n */\nexport default class PrefixExpression extends Expression {\n  kind = \"prefix\";\n  children = [this.right];\n\n  constructor(\n    readonly tokens: Token[],\n    readonly operatorToken: Token,\n    readonly right: Expression\n  ) {\n    super();\n  }\n\n  public print(builder: StringBuilder): void {\n    builder(\"(\");\n    builder(punctuator(this.operatorToken.type));\n    this.right.print(builder);\n    builder(\")\");\n  }\n}\n","import PrefixExpression from \"../expressions/PrefixExpression\";\nimport Parser from \"../Parser\";\nimport { Expression, Token } from \"../types\";\nimport PrefixParselet from \"./PrefixParselet\";\n\n/**\n * Generic prefix parselet for an unary arithmetic operator. Parses prefixes, for example\n * unary \"-\", \"+\", \"~\", and \"!\" expressions.\n */\nexport default class PrefixOperatorParselet extends PrefixParselet {\n  constructor(readonly precedence: number) {\n    super();\n  }\n\n  public parse(parser: Parser, token: Token): Expression {\n    // To handle right-associative operators like \"^\", we allow a slightly\n    // lower precedence when parsing the right-hand side. This will let a\n    // parselet with the same precedence appear on the right, which will then\n    // take *this* parselet's result as its left-hand argument.\n    const right = parser.parseExpression(this.precedence);\n\n    return new PrefixExpression([token, ...right.tokens], token, right);\n  }\n\n  public getPrecedence(): number {\n    return this.precedence;\n  }\n}\n","import Parser from './Parser';\n\nexport const PrattParser = Parser;\n\nexport * from './parselets/index';\nexport * from './expressions/index';\nexport * from './types';\n\nexport default PrattParser;\n","/**\n * Defines the different precedence levels used by the infix parsers. These\n * determine how a series of infix expressions will be grouped. For example,\n * \"a + b * c - d\" will be parsed as \"(a + (b * c)) - d\" because \"*\" has higher\n * precedence than \"+\" and \"-\". Here, bigger numbers mean higher precedence.\n */\nexport default class ODKFormulaPrecedence {\n  // Ordered in increasing precedence.\n  public static BOOLEAN_OP = 1;\n  public static CONDITIONAL = 2;\n  public static ASSIGNMENT = 3;\n  public static SUM = 4;\n  public static PRODUCT = 5;\n  public static EXPONENT = 6;\n  public static PREFIX = 7;\n  public static POSTFIX = 8;\n  public static CALL = 9;\n}\n","import { Expression, StringBuilder, Token } from \"../types\";\n\n/**\n * A literal expression like `true`, `\"some string\"`, `1.2345`.\n */\nexport default class LiteralExpression<T> extends Expression {\n  kind = \"literal\";\n  children = this.tokens;\n\n  constructor(\n    readonly tokens: Token[],\n    readonly type: string,\n    readonly value: T\n  ) {\n    super();\n  }\n\n  public print(builder: StringBuilder): void {\n    if (this.type === \"string\") {\n      builder(`'${this.value}'`);\n      return;\n    }\n    builder(\"[\");\n    builder(this.type);\n    builder(\" \");\n    builder(String(this.value));\n    builder(\"]\");\n  }\n}\n","import LiteralExpression from \"../expressions/LiteralExpression\";\nimport Parser from \"../Parser\";\nimport { Expression, Token } from \"../types\";\nimport PrefixParselet from \"./PrefixParselet\";\n\n/**\n * Simple parselet for a literal value, like `-4` or `true`.\n */\nexport default class LiteralParselet<T> extends PrefixParselet {\n  constructor(\n    readonly getValue: (token: Token) => T,\n    readonly getType: (token: Token) => string\n  ) {\n    super();\n  }\n\n  public parse(_parser: Parser, token: Token): Expression {\n    const value = this.getValue(token);\n    const type = this.getType(token);\n    return new LiteralExpression<T>([token], type, value);\n  }\n}\n","import { Expression, StringBuilder, Token } from \"../types\";\n\n/**\n * A simple variable name expression like \"a > b > c\" or \"[foo=~bar]\".\n */\nexport default class SelectorExpression<T> extends Expression {\n  kind = \"selector\";\n  children = [this.selectorToken];\n  tokens = [this.selectorToken];\n\n  constructor(readonly selectorToken: Token, readonly selector: T) {\n    super();\n  }\n\n  public print(builder: StringBuilder): void {\n    builder(this.selectorToken.text);\n  }\n}\n","import SelectorExpression from \"../expressions/SelectorExpression\";\nimport Parser from \"../Parser\";\nimport { Expression, Token } from \"../types\";\nimport PrefixParselet from \"./PrefixParselet\";\n\n/**\n * Simple parselet for a selector variable like \"x > y > z\" or \"a/b/c[d='123']\".\n *\n * Expects that the lexer recognizes the whole selector already completely as one token.\n */\nexport default class SelectorParselet<T> extends PrefixParselet {\n  constructor(readonly getSelector: (text: string) => T) {\n    super();\n  }\n  public parse(_parser: Parser, token: Token): Expression {\n    const selector = this.getSelector(token.text);\n    return new SelectorExpression(token, selector);\n  }\n}\n","import {\n  default as PrattParser,\n  TokenType,\n  // AssignParselet,\n  BinaryOperatorParselet,\n  CallParselet,\n  ConditionalParselet,\n  GroupParselet,\n  NameParselet,\n  PostfixOperatorParselet,\n  PrefixOperatorParselet,\n  Token,\n  Expression,\n} from \"../pratt-parser-base/index\";\nimport Precedence from \"./ODKFormulaPrecedence\";\nimport LiteralParselet from \"../pratt-parser-base/parselets/LiteralParselet\";\nimport SelectorParselet from \"../pratt-parser-base/parselets/SelectorParselet\";\nimport { ParserOptions } from \"../pratt-parser-base/Parser\";\n\n/**\n * Extends the generic Parser class with support for parsing the actual ODK formula grammar.\n * grammar.\n *\n * Example based on a blog post by Bob Nystrom:\n *\n * http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n */\nexport default class ODKFormulaParser extends PrattParser {\n  expressions: Expression[] = [];\n  tokens: Token[] = [];\n\n  constructor(options: ParserOptions) {\n    super({\n      onExpression: (e) => this.expressions.push(e),\n      onToken: (t) => this.tokens.push(t),\n      ...options,\n    });\n\n    // Register all of the parselets for the grammar.\n\n    // Register the ones that need special parselets.\n    this.register(\n      TokenType.NAME,\n      new NameParselet((name) =>\n        name.startsWith(\"$\") ? name.slice(2, name.length - 1) : name\n      )\n    );\n    this.register(\n      TokenType.SELECTOR,\n      new SelectorParselet((text) => text.split(\"/\"))\n    );\n    this.register(\n      TokenType.FLOAT_LITERAL,\n      new LiteralParselet(\n        (t) => parseFloat(t.text),\n        () => \"float\"\n      )\n    );\n    this.register(\n      TokenType.INT_LITERAL,\n      new LiteralParselet(\n        (t) => parseInt(t.text, 10),\n        () => \"int\"\n      )\n    );\n    this.register(\n      TokenType.STRING_LITERAL,\n      new LiteralParselet(\n        (t) => t.text.slice(1, t.text.length - 1),\n        () => \"string\"\n      )\n    );\n    this.register(\n      TokenType.QUESTION,\n      new ConditionalParselet(Precedence.CONDITIONAL)\n    );\n    this.register(\n      TokenType.LEFT_PAREN,\n      new GroupParselet(TokenType.RIGHT_PAREN)\n    );\n    this.register(\n      TokenType.LEFT_PAREN,\n      new CallParselet(TokenType.RIGHT_PAREN, TokenType.COMMA, Precedence.CALL)\n    );\n\n    this.infixRight(TokenType.COMPARISON, Precedence.CONDITIONAL);\n\n    this.infixLeft(TokenType.BOOLEAN_AND, Precedence.BOOLEAN_OP);\n    this.infixLeft(TokenType.BOOLEAN_OR, Precedence.BOOLEAN_OP);\n    this.infixLeft(TokenType.PLUS, Precedence.SUM);\n    this.infixLeft(TokenType.MINUS, Precedence.SUM);\n    this.infixLeft(TokenType.ASTERISK, Precedence.PRODUCT);\n    this.infixLeft(TokenType.SLASH, Precedence.PRODUCT);\n    this.infixLeft(TokenType.MODULO, Precedence.EXPONENT);\n  }\n\n  /**\n   * Registers a postfix unary operator parselet for the given token and\n   * precedence.\n   */\n  public postfix(token: TokenType, precedence: number): void {\n    this.register(token, new PostfixOperatorParselet(precedence));\n  }\n\n  /**\n   * Registers a prefix unary operator parselet for the given token and\n   * precedence.\n   */\n  public prefix(token: TokenType, precedence: number): void {\n    this.register(token, new PrefixOperatorParselet(precedence));\n  }\n\n  /**\n   * Registers a left-associative binary operator parselet for the given token\n   * and precedence.\n   */\n  public infixLeft(token: TokenType, precedence: number): void {\n    this.register(token, new BinaryOperatorParselet(precedence, false));\n  }\n\n  /**\n   * Registers a right-associative binary operator parselet for the given token\n   * and precedence.\n   */\n  public infixRight(token: TokenType, precedence: number): void {\n    this.register(token, new BinaryOperatorParselet(precedence, true));\n  }\n}\n","// tslint:disable-next-line: import-name\nimport SimpleSchema, {\n  SchemaDefinition,\n  ValidationFunction,\n} from \"simpl-schema\";\nimport ODKFormulaLexer from \"../functions/odk-formulas/odk-formula-parser/ODKFormulaLexer\";\nimport ODKFormulaParser from \"../functions/odk-formulas/odk-formula-parser/ODKFormulaParser\";\n\nexport const getStringMapSchemaDefinition = <T>(\n  schemaDefinition: Partial<SchemaDefinition<T>> = {}\n): SchemaDefinition<T> => {\n  return {\n    type: Object,\n    blackbox: true,\n    custom() {\n      const { value } = this;\n      if (value === undefined) {\n        return;\n      }\n      if (typeof value === \"string\") {\n        return \"notAllowed\";\n      }\n      const keys = Object.keys(value);\n      for (let i = 0; i < keys.length; i += 1) {\n        const key = keys[i];\n        if (typeof value[key] !== \"string\") {\n          return \"notAllowed\";\n        }\n      }\n      return undefined;\n    },\n    ...schemaDefinition,\n  };\n};\n\nexport const getLocalizedStringSchemaDefinition = getStringMapSchemaDefinition;\n\nconst optionalLocalizedString = getLocalizedStringSchemaDefinition({\n  optional: true,\n});\nconst optionalStringMap = getStringMapSchemaDefinition({ optional: true });\n\nconst formulaValidationFunction: ValidationFunction<unknown> = function () {\n  try {\n    const lexer = new ODKFormulaLexer(this.value);\n    const parser = new ODKFormulaParser({ tokens: lexer });\n    parser.parseExpression();\n  } catch (e) {\n    this.addValidationErrors([\n      {\n        name: this.key,\n        type: `Invalid formula: ${e.message}`,\n        value: this.value,\n      },\n    ]);\n  }\n};\n\nexport const questionRowSchema = new SimpleSchema({\n  type: {\n    type: String,\n  },\n  name: {\n    type: String,\n    optional: true,\n    custom() {\n      const shouldBeRequired = ![\"end_group\", \"end_repeat\"].includes(\n        this.field(\"type\").value\n      );\n      if (shouldBeRequired) {\n        const error = SimpleSchema.ErrorTypes.REQUIRED;\n\n        // inserts\n        if (!this.operator) {\n          if (!this.isSet || this.value === null || this.value === \"\")\n            return error;\n        }\n\n        // updates\n        else if (this.isSet) {\n          if (\n            (this.operator === \"$set\" && this.value === null) ||\n            this.value === \"\"\n          )\n            return error;\n          if (this.operator === \"$unset\") return error;\n          if (this.operator === \"$rename\") return error;\n        }\n      }\n      return undefined;\n    },\n  },\n  constraint: {\n    type: String,\n    optional: true,\n    custom: formulaValidationFunction,\n  },\n  constraint_message: optionalLocalizedString,\n  label: optionalLocalizedString,\n  image: optionalLocalizedString,\n  video: optionalLocalizedString,\n  hint: optionalLocalizedString,\n  guidance_hint: optionalLocalizedString,\n  required_message: optionalLocalizedString,\n  relevant: {\n    type: String,\n    optional: true,\n    custom: formulaValidationFunction,\n  },\n  choice_filter: {\n    // Only on 'select*' types\n    type: String,\n    optional: true,\n  },\n  calculation: {\n    type: String,\n    optional: true,\n    custom: formulaValidationFunction,\n  },\n  trigger: {\n    type: String,\n    optional: true,\n    custom: formulaValidationFunction,\n  },\n  readonly: {\n    type: String,\n    optional: true,\n  },\n  required: {\n    type: String,\n    optional: true,\n    custom: formulaValidationFunction,\n  },\n  parameters: {\n    type: String,\n    optional: true,\n  },\n  repeat_count: {\n    type: String,\n    optional: true,\n    custom: formulaValidationFunction,\n  },\n  appearance: {\n    type: String,\n    optional: true,\n  },\n  default: {\n    type: String,\n    optional: true,\n  },\n  instance: optionalStringMap,\n  bind: optionalStringMap,\n  body: optionalStringMap,\n});\n\nexport const choiceRowSchema = new SimpleSchema({\n  \"list name\": {\n    type: String,\n  },\n  name: {\n    type: String,\n  },\n  label: getLocalizedStringSchemaDefinition(),\n});\n\nexport const settingsRowSchema = new SimpleSchema({\n  form_title: {\n    type: String,\n    optional: true,\n  },\n  form_id: {\n    type: String,\n    optional: true,\n  },\n  public_key: {\n    type: String,\n    optional: true,\n  },\n  submission_url: {\n    type: String,\n    optional: true,\n  },\n  default_language: {\n    type: String,\n    optional: true,\n  },\n  version: {\n    type: String,\n    optional: true,\n  },\n});\n","import {\n  choiceRowSchema,\n  questionRowSchema,\n  settingsRowSchema,\n} from \"./RowSchemas\";\n\n/** Represents a row in the 'survey' worksheet */\n\nexport type StringMap = Record<string, string>;\nexport type LocalizedString = StringMap;\n\nexport type QuestionRow = Record<\n  string,\n  string | LocalizedString | undefined\n> & {\n  /** specifies the type of entry you are adding. */\n  type: string;\n  /** specifies the unique variable name for that entry. No two entries can have the same name. Names have to start with a letter or an underscore. Names can only contain letters, digits, hyphens, underscores, and periods. Names are case-sensitive. */\n  name: string;\n  /** contains the actual text you see in the form. Alternatively, label translation columns can be used. */\n  label: LocalizedString;\n  constraint?: string;\n  constraint_message?: LocalizedString;\n  image?: LocalizedString;\n  audio?: LocalizedString;\n  video?: LocalizedString;\n  hint?: LocalizedString;\n  guidance_hint?: string;\n  relevant?: string;\n  choice_filter?: string;\n  calculation?: string;\n  trigger?: string;\n  readonly?: \"true\" | \"false\";\n  required?: string;\n  required_message?: LocalizedString;\n  parameters?: string;\n  repeat_count?: string;\n  appearance?: string;\n  default?: string;\n  instance?: StringMap;\n  bind?: StringMap;\n  body?: StringMap;\n};\n\n/** Represents a row in the 'choices' worksheet */\n\nexport type ChoiceRow = Record<string, string | LocalizedString> & {\n  /** lets you group together a set of related answer choices, i.e., answer choices that should appear together under a question. */\n  \"list name\": string;\n  /** specifies the unique variable name for that answer choice. */\n  name: string;\n  /** shows the answer choice exactly as you want it to appear on the form. Alternatively, label translation columns can be used. */\n  label: LocalizedString;\n};\n\n/** Represents a row in the 'settings' worksheet */\n\nexport type SettingsRow = Record<string, string> & {\n  /** The title of the form that is shown to users. The form title is pulled from form_id if form_title is blank or missing. */\n  form_title: string;\n  /** The name used to uniquely identify the form on the server. The form id is pulled from the XLS file name if form_id is blank or missing. */\n  form_id: string;\n  /** For encryption-enabled forms, this is where the public key is copied and pasted. */\n  public_key: string;\n  /** This url can be used to override the default server where finalized records are submitted to. */\n  submission_url: string;\n  /** In localized forms, this sets which language should be used as the default. The same format as described for adding translations should be used, including the language code. */\n  default_language: string;\n  /** String of up to 10 numbers that describes this revision. Revised form definitions must have numerically greater versions than previous ones. A common convention is to use strings of the form 'yyyymmddrr'. For example, 2017021501 is the 1st revision from Feb 15th, 2017. */\n  version: string;\n};\n\nexport function assertValidQuestionRow(\n  row: Record<string, unknown>\n): asserts row is QuestionRow {\n  return questionRowSchema.validate(row);\n}\nexport function assertValidChoiceRow(\n  row: Record<string, unknown>\n): asserts row is ChoiceRow {\n  return choiceRowSchema.validate(row, { keys: [\"list name\", \"name\"] });\n}\nexport function assertValidSettingsRow(\n  row: Record<string, unknown>\n): asserts row is SettingsRow {\n  return settingsRowSchema.validate(row);\n}\n","import * as React from \"react\";\nimport ODKFormulaEvaluationContext from \"../xlsform-simple-schema/functions/odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport { getNodeAbsolutePathString } from \"../xlsform-simple-schema/functions/odk-formulas/evaluation/XPath\";\nimport { ODKNode } from \"../xlsform-simple-schema/types/ODKNode\";\nimport { assertValidQuestionRow } from \"../xlsform-simple-schema/types/RowTypes\";\n\nexport type DropNodeHandler = (options: {\n  sourceNode: ODKNode;\n  destinationNode: ODKNode;\n  sourcePath: string;\n  position: \"before\" | \"after\" | \"inside\";\n}) => void;\n\nexport const ODKNodeDragAndDropContext = React.createContext<{\n  onDropNode: DropNodeHandler;\n}>({ onDropNode: () => {} });\n\nfunction assertIsODKNode(node: any): asserts node is ODKNode {\n  const error = () => {\n    throw new Error(\"Given data is not a valid ODK node.\");\n  };\n  if (typeof node !== \"object\") {\n    error();\n  }\n\n  assertValidQuestionRow(node.row);\n  if (\n    typeof node.type !== \"string\" ||\n    !(node.typeParameters instanceof Array) ||\n    !node.typeParameters.every((p: unknown) => typeof p === \"string\") ||\n    typeof node.indentationLevel !== \"number\" ||\n    typeof node.rowIndex !== \"number\" ||\n    (node.resultIsInvalid !== undefined &&\n      typeof node.resultIsInvalid !== \"boolean\")\n  ) {\n    error();\n  }\n  node.children.forEach(assertIsODKNode);\n}\n\nexport function useNodeDragAndDrop({\n  context,\n  node,\n  setIsDraggedOver,\n}: {\n  context?: ODKFormulaEvaluationContext;\n  node: ODKNode;\n  setIsDraggedOver: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n  const { onDropNode } = React.useContext(ODKNodeDragAndDropContext);\n  const onDragStart = React.useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      if (!context) {\n        return;\n      }\n      event.dataTransfer.setData(\n        \"application/json\",\n        JSON.stringify({\n          sourceNode: node,\n          sourcePath: getNodeAbsolutePathString(node, context),\n        })\n      );\n    },\n    [context, node]\n  );\n\n  const onDragOver = React.useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      event.preventDefault();\n      if (!context) {\n        return;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const data = event.dataTransfer.getData(\"application/json\");\n      setIsDraggedOver(true);\n    },\n    [context, setIsDraggedOver]\n  );\n\n  const onDrop = React.useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      if (!context) {\n        return;\n      }\n      const path = getNodeAbsolutePathString(node, context);\n      const data = JSON.parse(event.dataTransfer.getData(\"application/json\"));\n      const { sourcePath, sourceNode } = data;\n      assertIsODKNode(sourceNode);\n      console.log(\"Dropped on path\", path);\n      setIsDraggedOver(false);\n      onDropNode({\n        sourceNode,\n        sourcePath,\n        destinationNode: node,\n        position: \"before\",\n      });\n    },\n    [context, node, onDropNode, setIsDraggedOver]\n  );\n\n  const onDragLeave = React.useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      if (!context) {\n        return;\n      }\n      const path = getNodeAbsolutePathString(node, context);\n      console.log(\"Left dragging at path\", path);\n      setIsDraggedOver(false);\n    },\n    [context, node, setIsDraggedOver]\n  );\n\n  const dragProps = {\n    draggable: true,\n    onDragStart,\n    onDragOver,\n    onDragLeave,\n    onDrop,\n  };\n\n  return dragProps;\n}\n","import { XLSForm } from \"../xlsform-simple-schema\";\nimport { isGroupNode, ODKNode } from \"../xlsform-simple-schema/types/ODKNode\";\n\nexport default function getLastRowIndexOfGroup(\n  xlsForm: XLSForm,\n  node: ODKNode\n) {\n  const isGroup = isGroupNode(node);\n\n  if (!isGroup) {\n    throw new Error(\n      \"Getting the last row index of a group only works with rows that are groups.\"\n    );\n  }\n  const hasChildren = node.children.length > 0;\n  // The end_group or end_repeat marker is associated to the node, too.\n  const indexOfGroupOrRepeatEnd = hasChildren\n    ? xlsForm.flatNodes.findIndex((n, i) => i > node.rowIndex && n === node)\n    : -1;\n  if (hasChildren && indexOfGroupOrRepeatEnd === -1) {\n    throw new Error(\n      \"Node has children, but its end marker row could not be found in the ‘survey’ sheet. Please ensure the node is actually part of the survey.\"\n    );\n  }\n  return indexOfGroupOrRepeatEnd;\n}\n","import { Code, IconName, MenuItem } from \"@blueprintjs/core\";\nimport { useCallback, useContext } from \"react\";\nimport { createLabelInAllLanguages } from \"../lib/createLabelInAllLanguages\";\nimport getLastRowIndexOfGroup from \"../lib/getLastRowIndexOfGroup\";\nimport { ODKSurveyContext } from \"../lib/ODKSurveyContext\";\nimport { isGroupNode, ODKNode } from \"../xlsform-simple-schema/types/ODKNode\";\nimport { QuestionRow } from \"../xlsform-simple-schema/types/RowTypes\";\n\nlet untitledFieldIndex = 0;\n\nexport default function AddFieldMenuItem({\n  node,\n  position,\n  icon,\n}: {\n  node: ODKNode;\n  position: \"before\" | \"after\" | \"inside\";\n  icon?: IconName;\n}) {\n  const context = useContext(ODKSurveyContext);\n\n  const caption = (\n    <>\n      Add field <strong>{position}</strong> <Code>{node.row.name}</Code>\n    </>\n  );\n\n  const onClick = useCallback(() => {\n    const { xlsForm } = context;\n    if (!xlsForm) {\n      return;\n    }\n\n    const row: QuestionRow = {\n      type: \"text\",\n      name: `untitled_field_${untitledFieldIndex++}`,\n      label: createLabelInAllLanguages(``, xlsForm.languages),\n    };\n\n    let rowIndex = 0;\n    const isGroup = isGroupNode(node);\n    if (isGroup) {\n      rowIndex = {\n        after: getLastRowIndexOfGroup(xlsForm, node) + 1,\n        before: node.rowIndex,\n        inside: node.rowIndex + 1,\n      }[position];\n    } else {\n      rowIndex = {\n        after: node.rowIndex + 1,\n        before: node.rowIndex,\n        inside: 0,\n      }[position];\n    }\n    context.onSpliceRows(\"survey\", rowIndex, 0, row);\n  }, [context, node, position]);\n\n  return (\n    <MenuItem\n      icon={icon}\n      // intent=\"primary\"\n      onClick={onClick}\n      text={caption}\n    />\n  );\n}\n","import { Menu, MenuDivider, MenuItem } from \"@blueprintjs/core\";\nimport { useCallback } from \"react\";\nimport {\n  isGroupNode,\n  ODKNode,\n} from \"../../xlsform-simple-schema/types/ODKNode\";\nimport AddFieldMenuItem from \"../AddFieldMenuItem\";\n\nexport default function NodeActionMenu({\n  node,\n  onRemove,\n}: {\n  node: ODKNode;\n  onRemove: (node: ODKNode) => void;\n}) {\n  const removeNode = useCallback(() => {\n    onRemove(node);\n  }, [node, onRemove]);\n\n  const isGroup = isGroupNode(node);\n\n  return (\n    <>\n      <Menu>\n        <AddFieldMenuItem node={node} position=\"before\" icon=\"arrow-up\" />\n        {isGroup && (\n          <AddFieldMenuItem node={node} position=\"inside\" icon=\"add\" />\n        )}\n        <AddFieldMenuItem node={node} position=\"after\" icon=\"arrow-down\" />\n        <MenuDivider />\n        <MenuItem\n          icon=\"group-objects\"\n          text=\"Nest in group\"\n          onClick={removeNode}\n          disabled={true}\n        />\n        <MenuItem\n          icon=\"ungroup-objects\"\n          text=\"Ungroup\"\n          onClick={removeNode}\n          disabled={true}\n        />\n        <MenuDivider />\n        <MenuItem\n          intent=\"danger\"\n          icon=\"trash\"\n          text=\"Remove field\"\n          onClick={removeNode}\n        />\n      </Menu>\n    </>\n  );\n}\n","import { Classes, Colors } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport styled, { CSSProperties } from \"styled-components\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport DetailsPopover from \"../../survey/DetailsPopover/DetailsPopover\";\nimport {\n  findNodeByNameInCurrentAndAncestorScopes,\n  findNodeByNameInsideScope,\n} from \"../../xlsform-simple-schema/functions/odk-formulas/evaluation/XPath\";\nimport {\n  Expression,\n  NameExpression,\n  Token,\n  TokenType,\n} from \"../../xlsform-simple-schema/functions/odk-formulas/pratt-parser-base\";\nimport { EvaluationError } from \"../../xlsform-simple-schema/types/Errors\";\nimport { ODKNode } from \"../../xlsform-simple-schema/types/ODKNode\";\n\nconst StyledCode = styled.code`\n  font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\",\n    \"Courier New\", monospace;\n\n  .expression.has-error {\n    text-decoration: underline wavy ${Colors.RED2};\n    text-decoration-skip: none;\n    text-decoration-skip-ink: none;\n    text-decoration-color: ${Colors.RED2} !important;\n\n    a {\n      text-decoration: underline wavy ${Colors.RED2};\n      text-decoration-skip: none;\n      text-decoration-skip-ink: none;\n      text-decoration-color: ${Colors.RED2} !important;\n    }\n  }\n\n  .expression-name {\n    color: ${Colors.GREEN3};\n  }\n\n  &.expression-call > .expression-name:first-child,\n  .expression-call > .expression-name:first-child {\n    color: ${Colors.BLUE3};\n  }\n\n  .expression-name {\n    word-break: break-word;\n  }\n\n  .token-STRING_LITERAL {\n    color: ${Colors.ORANGE3};\n  }\n\n  .token-NUMBER_LITERAL {\n    color: ${Colors.ORANGE4};\n  }\n\n  .token-COMMA {\n    color: ${Colors.GRAY1};\n  }\n\n  .token-LEFT_PAREN,\n  .token-RIGHT_PAREN {\n    color: ${Colors.BLUE2};\n    font-weight: bold;\n  }\n\n  .token-INVALID {\n    border: 2px ${Colors.RED5} solid;\n    padding: 2px;\n    margin: -2px;\n    color: ${Colors.RED5};\n  }\n\n  .token-COMMA::after {\n    content: \" \";\n  }\n\n  .expression-operator {\n    clear: left;\n  }\n\n  .token-COMPARISON {\n    &::after,\n    &::before {\n      content: \" \";\n    }\n    font-weight: bold;\n    color: ${Colors.RED2};\n  }\n\n  .token-COLON,\n  .token-BOOLEAN_AND,\n  .token-BOOLEAN_OR,\n  .token-PLUS,\n  .token-GREATER_THAN,\n  .token-LESS_THAN,\n  .token-MODULO,\n  .token-QUESTION {\n    word-break: break-word;\n    display: block;\n    font-weight: bold;\n    color: ${Colors.RED2};\n  }\n`;\n\nfunction TokenElement({\n  token,\n  expression,\n  parentExpression,\n  node,\n}: {\n  token: Token;\n  expression?: Expression;\n  parentExpression?: Expression;\n  node: ODKNode;\n}) {\n  const className = `token token-${TokenType[token.type]}`;\n  const context = React.useContext(ODKSurveyContext);\n  if (\n    token.type === TokenType.NAME &&\n    parentExpression?.kind === \"call\" &&\n    expression instanceof NameExpression &&\n    token === parentExpression.tokens[0]\n  ) {\n    return (\n      <a\n        href={`https://getodk.github.io/xforms-spec/#fn:${token.text}`}\n        className={className}\n        target=\"docs\"\n      >\n        {token.text}\n      </a>\n    );\n  } else if (\n    token.type === TokenType.NAME &&\n    expression instanceof NameExpression &&\n    token.text.startsWith(\"$\") &&\n    context.context\n  ) {\n    const referencedNode =\n      findNodeByNameInCurrentAndAncestorScopes(\n        expression.name,\n        context.context,\n        node\n      ) ||\n      findNodeByNameInsideScope(\n        expression.name,\n        context.context,\n        context.context.survey\n      );\n    if (!referencedNode || referencedNode instanceof Array) {\n      debugger;\n      return (\n        <span className={className} data-referenced-node={referencedNode}>\n          {token.text}\n        </span>\n      );\n    }\n    return (\n      <>\n        {\"${\"}\n        <DetailsPopover\n          node={referencedNode}\n          editable={false}\n          nameOfOnlyShownTab={\"calculation\"}\n        />\n        {\"}\"}\n      </>\n    );\n  }\n  return <span className={className}>{token.text}</span>;\n}\n\nexport function InvalidExpression(props: {\n  code?: string;\n  className?: string;\n  style?: CSSProperties;\n  tokens?: Token[];\n  node: ODKNode;\n}) {\n  if (!props.tokens) {\n    return (\n      <StyledCode\n        style={props.style}\n        className={`${props.className || \"\"} expression expression-invalid`}\n      >\n        {props.code}\n      </StyledCode>\n    );\n  }\n\n  const lastToken = props.tokens[props.tokens.length - 1];\n  const indexAfterLastToken = lastToken.index + lastToken.text.length;\n  return (\n    <StyledCode\n      style={props.style}\n      className={`${props.className || \"\"} expression expression-invalid`}\n    >\n      {props.tokens.map((token) => (\n        <TokenElement token={token} key={token.index} node={props.node} />\n      ))}\n      <span className={Classes.TEXT_DISABLED}>\n        {props.code?.slice(indexAfterLastToken)}\n      </span>\n    </StyledCode>\n  );\n}\n\nexport default function HighlightedExpression(props: {\n  code?: string;\n  state?: \"error\" | \"success\";\n  error?: Error;\n  expression?: Expression;\n  parentExpression?: Expression;\n  className?: string;\n  style?: CSSProperties;\n  tokens?: Token[];\n  node: ODKNode;\n}) {\n  if (!props.expression) {\n    return <InvalidExpression {...props} />;\n  }\n  const isErroneousExpression =\n    props.error instanceof EvaluationError &&\n    props.error.expression === props.expression;\n\n  return (\n    <StyledCode\n      style={props.style}\n      className={`${props.className || \"\"} expression expression-${\n        props.expression.kind\n      } ${isErroneousExpression ? \"has-error\" : \"\"}`}\n    >\n      {props.expression.children.map((expressionOrToken, i) => {\n        if (expressionOrToken instanceof Expression) {\n          return (\n            <HighlightedExpression\n              code={expressionOrToken.tokens.map((t) => t.text).join(\"\")}\n              expression={expressionOrToken}\n              parentExpression={props.expression}\n              tokens={expressionOrToken.tokens}\n              error={props.error}\n              node={props.node}\n            />\n          );\n        } else {\n          return (\n            <TokenElement\n              token={expressionOrToken}\n              key={expressionOrToken.index}\n              expression={props.expression}\n              parentExpression={props.parentExpression}\n              node={props.node}\n            />\n          );\n        }\n      })}\n    </StyledCode>\n  );\n}\n","/**\n * Removes first level of whitespace indentation from a given string by recognizing the indentation\n * level from the first line that has non-whitespace content contains  to remove.\n *\n * This allows to specify hardcoded strings with indentation in code without having to break the\n * code's own indentation:\n *\n * @example\n *   // before:\n *   function getMarkdown() {\n *     return `\n *   # Hello\n *\n *   - this is a markdown list\n *   - with multiple items\n *   `;\n *   }\n *\n *   // with unindent:\n *   function getMarkdown() {\n *     return unindent(`\n *       # Hello\n *\n *       - this is a markdown list\n *       - with multiple items\n *     `);\n *   }\n*/\nexport default function unindent(input: string): string {\n  const firstLineWithContent = input\n    .split(/\\n/)\n    .find(line => line.replace(/\\s/, '').length > 0);\n  if (!firstLineWithContent) {\n    return input;\n  }\n\n  const matchedIndentation = firstLineWithContent.match(/^\\s+/);\n  if (!matchedIndentation) {\n    return input;\n  }\n\n  const matchedIndentationString = matchedIndentation[0];\n  if (!matchedIndentationString) {\n    return input;\n  }\n\n  const indentationRegExp = new RegExp(`^${matchedIndentationString}`);\n  return input\n    .split(/\\n/)\n    .map(line => line.replace(indentationRegExp, ''))\n    .join('\\n');\n}\n","import { Callout } from \"@blueprintjs/core\";\nimport { omit } from \"lodash\";\nimport * as React from \"react\";\nimport unindent from \"./unindent\";\nimport marked from \"marked\";\n\ninterface IProps extends React.HTMLProps<HTMLDivElement> {\n  children: React.ReactNode;\n  marked: (markdown: string) => string;\n}\n\nfunction MarkdownDiv(props: IProps) {\n  if (typeof props.children !== \"string\") {\n    return (\n      <Callout intent=\"danger\">Markdown content must be a string.</Callout>\n    );\n  }\n  return (\n    <div\n      {...omit(props, \"children\", \"marked\")}\n      dangerouslySetInnerHTML={{\n        __html: props.marked?.(unindent(props.children)),\n      }}\n    />\n  );\n}\n\n// const Markdown = LoadableMap({\n//   loader: {\n//     marked: () => import(\"marked\"),\n//   },\n//   render(loaded, props: IProps) {\n//     return <MarkdownDiv {...props} marked={loaded.marked?.default} />;\n//   },\n//   loading: () => null,\n// });\n\nfunction Markdown(props: { children: React.ReactNode }) {\n  return <MarkdownDiv {...props} marked={marked} />;\n}\n\nexport default Markdown;\n","import { Colors } from \"@blueprintjs/core\";\nimport styled from \"styled-components\";\nimport Markdown from \"./Markdown\";\n\nconst StyledMarkdown = styled(Markdown)`\n  h1,\n  h2,\n  h3,\n  h4,\n  h5 {\n    margin: 1em 0;\n  }\n\n  code,\n  pre {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\",\n      \"Courier New\", monospace;\n    color: ${Colors.DARK_GRAY1};\n    /* border: 1px solid rgba(0, 0, 0, 0.2); */\n    margin: -1px;\n    padding: 2px 3px;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n\n  pre {\n    padding: 0.5em 0.55em;\n    margin: 0.5em 0;\n    line-height: 1.3em;\n    background: white;\n    white-space: pre-wrap;\n  }\n\n  code {\n    font-weight: 600;\n  }\n\n  p {\n    margin-block-end: 16px;\n  }\n  p:last-child {\n    margin-block-end: 0;\n  }\n\n  ul,\n  ol {\n    margin: 1em 1.25em;\n  }\n`;\n\nexport default StyledMarkdown;\n","import { hsl, rgb } from \"d3-color\";\nimport { interpolateHsl, interpolateLab } from \"d3-interpolate\";\n\nexport function coloredWhite(color: string, value: number = 0.5) {\n  const labColor = hsl(color);\n  return interpolateHsl(labColor, \"white\")(value).toString();\n}\n\nexport function brighter(color: string, value: number = 0.3) {\n  return hsl(color).brighter(value).toString();\n}\n\nexport function darker(color: string, value: number = 0.3) {\n  return hsl(color).darker(value).toString();\n}\n\nexport function alpha(color: string, value: number = 0.4) {\n  const alphaColor = rgb(color);\n  alphaColor.opacity *= value;\n  return alphaColor.toString();\n}\n\nexport function mixLab(color1: string, color2: string, ratio: number = 0.5) {\n  return interpolateLab(color1, color2)(ratio).toString();\n}\n","import { Callout, Classes, Colors, Icon, Text } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport HighlightedExpression from \"../../components/expression/HighlightedExpression\";\nimport StyledMarkdown from \"../../components/StyledMarkdown\";\nimport { alpha } from \"../../lib/colors\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport ODKFormulaEvaluationResult from \"../../xlsform-simple-schema/functions/odk-formulas/evaluation/ODKFormulaEvaluationResult\";\nimport { getNodeAbsolutePathString } from \"../../xlsform-simple-schema/functions/odk-formulas/evaluation/XPath\";\nimport { EvaluationError } from \"../../xlsform-simple-schema/types/Errors\";\nimport {\n  EvaluatableColumnName,\n  ODKNode,\n} from \"../../xlsform-simple-schema/types/ODKNode\";\nimport {\n  StyledCalloutWithCode,\n  StyledCodeBlock,\n  StyledPanel,\n} from \"./DetailsPopover\";\n\nexport function ExpressionPanel({\n  node,\n  columnName,\n  nodeEvaluationResults,\n  style,\n}: {\n  node: ODKNode;\n  columnName: EvaluatableColumnName;\n  nodeEvaluationResults: Map<string, ODKFormulaEvaluationResult> | undefined;\n  style?: React.CSSProperties;\n}) {\n  const context = React.useContext(ODKSurveyContext);\n  const cellValue = node.row[columnName];\n  const results = nodeEvaluationResults?.get(columnName);\n  const cellIsEmpty = cellValue === undefined;\n  const isLiteral = results?.expression?.kind === \"literal\";\n  const isName = results?.expression?.kind === \"name\";\n  const answer = context.context?.nodesToAnswers.get(node);\n  const nodeName = context.context\n    ? getNodeAbsolutePathString(node, context.context)\n    : node.row.name;\n\n  const panel = (\n    <StyledPanel\n      lang=\"en\"\n      style={{\n        backgroundColor: Colors.LIGHT_GRAY5,\n        marginTop: \"0\",\n        padding: \"20px\",\n        background: `linear-gradient(${alpha(Colors.BLUE3, 0.06)}, ${alpha(\n          Colors.BLUE3,\n          0.05\n        )} 5px, ${alpha(Colors.BLUE3, 0.01)} 10px, transparent 30px)`,\n        borderTop: `solid 1px ${Colors.LIGHT_GRAY3}`,\n        ...style,\n      }}\n    >\n      {!cellIsEmpty && (\n        <>\n          <h4>\n            <Icon icon=\"function\" />{\" \"}\n            {columnName === \"calculation\" ? \"Formula\" : \"Condition\"}\n          </h4>\n          <StyledCodeBlock\n            style={{\n              fontSize: isLiteral || isName ? \"20px\" : \"16px\",\n              lineHeight: \"28px\",\n            }}\n          >\n            <HighlightedExpression\n              node={node}\n              state={results?.state}\n              error={results?.error}\n              expression={results?.expression}\n              code={String(cellValue)}\n              tokens={results?.parser?.tokens}\n            />\n          </StyledCodeBlock>\n          <h4>Result</h4>\n        </>\n      )}\n\n      {!cellIsEmpty && !results && (\n        <Callout intent=\"none\">Not calculated yet.</Callout>\n      )}\n\n      {results?.state !== \"error\" && (\n        <StyledCodeBlock style={{ fontSize: \"20px\", lineHeight: \"28px\" }}>\n          {results?.result === undefined\n            ? \"undefined\"\n            : JSON.stringify(results.result)}\n        </StyledCodeBlock>\n      )}\n\n      {results?.state === \"error\" && (\n        <StyledCalloutWithCode intent=\"danger\">\n          {results.error instanceof EvaluationError && (\n            <>\n              Error in&nbsp;\n              <code>\n                <HighlightedExpression\n                  node={node}\n                  expression={results.error.expression}\n                />\n              </code>\n              :\n            </>\n          )}\n          <StyledMarkdown>{results.error.toMarkdown()}</StyledMarkdown>\n        </StyledCalloutWithCode>\n      )}\n\n      {!cellIsEmpty && results?.result !== undefined && (\n        <Text className={Classes.TEXT_MUTED}>\n          {\n            {\n              calculation: <>This is the result of the formula.</>,\n              required: `This means you ${\n                results?.result ? \"can’t\" : \"can\"\n              } complete the survey without entering data in this field.`,\n              relevant: `This means the survey field is ${\n                results?.result ? \"shown\" : \"hidden\"\n              }.`,\n              readonly: `This means the survey field is ${\n                results?.result ? \"read-only\" : \"editable\"\n              }.`,\n              constraint: `This means the survey field contains an input that is ${\n                results?.result ? \"allowed\" : \"not allowed\"\n              } by the constraint formula..`,\n            }[columnName]\n          }\n        </Text>\n      )}\n\n      {cellIsEmpty && (\n        <Text className={Classes.TEXT_MUTED}>\n          {\n            {\n              calculation:\n                answer === undefined || answer === \"\" ? (\n                  <>\n                    This survey field has no entered answer yet, and the{\" \"}\n                    <code>{columnName}</code> cell is empty.\n                  </>\n                ) : (\n                  <>\n                    This is the answer value entered in the{\" \"}\n                    <code>{nodeName}</code> field.\n                  </>\n                ),\n              required: (\n                <>\n                  This means users are not required to enter this field. This is\n                  the default when the <code>{columnName}</code> cell is empty.\n                </>\n              ),\n              relevant: (\n                <>\n                  This means the survey field is always shown. This is the\n                  default when the <code>{columnName}</code> cell is empty.\n                </>\n              ),\n              readonly: (\n                <>\n                  This means the survey field is not read-only. This is the\n                  default when the <code>{columnName}</code> cell is empty.\n                </>\n              ),\n              constraint: (\n                <>\n                  If the cell contains a formula that evaluates to{\" \"}\n                  <code>true</code>, the field accepts any input. This is the\n                  default when the <code>{columnName}</code> cell is empty.\n                </>\n              ),\n            }[columnName]\n          }\n        </Text>\n      )}\n    </StyledPanel>\n  );\n  return panel;\n}\n","import { IconName } from \"@blueprintjs/core\";\n\nexport const typesToIcons: Record<string, IconName> = {\n  integer: \"numerical\",\n  decimal: \"numerical\",\n  range: \"horizontal-distribution\",\n  text: \"edit\",\n  select_one: \"selection\",\n  select_one_from_file: \"selection\",\n  select_multiple: \"multi-select\",\n  select_multiple_from_file: \"multi-select\",\n  rank: \"sort-numerical\",\n  note: \"lightbulb\",\n  geopoint: \"map-marker\",\n  geotrace: \"geofence\",\n  geoshape: \"geofence\",\n  date: \"calendar\",\n  time: \"time\",\n  datetime: \"time\",\n  image: \"media\",\n  audio: \"headset\",\n  video: \"video\",\n  file: \"upload\",\n  barcode: \"barcode\",\n  calculate: \"function\",\n  acknowledge: \"switch\",\n  hidden: \"eye-off\",\n  \"xml-external\": \"layout-hierarchy\",\n  start: \"time\",\n  end: \"time\",\n  today: \"calendar\",\n  deviceid: \"desktop\",\n  simserial: \"sim-card\",\n  subscriberid: \"id-number\",\n  phonenumber: \"phone\",\n  username: \"person\",\n  email: \"envelope\",\n  audit: \"shield\",\n  begin_group: \"group-objects\",\n  begin_repeat: \"repeat\",\n};\n\nexport const fieldTypeNames: Record<string, string> = {\n  integer: \"Integer number\",\n  decimal: \"Decimal number\",\n  range: \"Slider\",\n  text: \"Text field\",\n  select_one: \"Single choice\",\n  select_one_from_file: \"Single choice from file\",\n  select_multiple: \"Multiple choice\",\n  select_multiple_from_file: \"Multiple choice from file\",\n  rank: \"Rank items\",\n  note: \"Note / Hint\",\n  geopoint: \"Locate a point\",\n  geotrace: \"Trace a line\",\n  geoshape: \"Draw a shape\",\n  date: \"Date\",\n  time: \"Time\",\n  datetime: \"Date and time\",\n  image: \"Image\",\n  audio: \"Audio\",\n  video: \"Video\",\n  file: \"File\",\n  barcode: \"Scan a code\",\n  acknowledge: \"Checkbox\",\n  calculate: \"Calculate formula\",\n  hidden: \"Hidden field\",\n  \"xml-external\": \"External XML reference\",\n  start: \"Survey start date and time\",\n  end: \"Survey submission date and time\",\n  today: \"Survey start day\",\n  deviceid: \"Device ID\",\n  simserial: \"SIM serial number\",\n  subscriberid: \"Subscriber ID\",\n  phonenumber: \"Phone number\",\n  username: \"Username\",\n  email: \"Email address\",\n  audit: \"Audit trail\",\n  begin_group: \"Field group\",\n  begin_repeat: \"Repeat group\",\n};\n\nexport const fieldCategoriesToIcons: Record<string, IconName> = {\n  literal: \"edit\",\n  choice: \"selection\",\n  geo: \"globe\",\n  time: \"time\",\n  media: \"upload\",\n  stats: \"scatter-plot\",\n  track: \"person\",\n  special: \"small-minus\",\n  grouping: \"layout-hierarchy\",\n};\n\nexport const fieldCategoryNames: Record<string, string> = {\n  literal: \"Enter value\",\n  choice: \"Choice\",\n  geo: \"Maps\",\n  time: \"Date and time\",\n  media: \"Upload\",\n  special: \"Other\",\n  stats: \"Statistics\",\n  track: \"Personal data\",\n  grouping: \"Grouping\",\n};\n\nexport const fieldTypesToCategories: Record<string, string> = {\n  text: \"literal\",\n  acknowledge: \"literal\",\n  integer: \"literal\",\n  decimal: \"literal\",\n  range: \"literal\",\n  barcode: \"literal\",\n  select_one: \"choice\",\n  select_one_from_file: \"choice\",\n  select_multiple: \"choice\",\n  select_multiple_from_file: \"choice\",\n  rank: \"choice\",\n  geopoint: \"geo\",\n  geotrace: \"geo\",\n  geoshape: \"geo\",\n  date: \"time\",\n  time: \"time\",\n  datetime: \"time\",\n  image: \"media\",\n  audio: \"media\",\n  video: \"media\",\n  file: \"media\",\n  note: \"special\",\n  calculate: \"special\",\n  hidden: \"special\",\n  \"xml-external\": \"special\",\n  start: \"stats\",\n  end: \"stats\",\n  today: \"stats\",\n  deviceid: \"track\",\n  simserial: \"track\",\n  subscriberid: \"track\",\n  phonenumber: \"track\",\n  username: \"track\",\n  email: \"track\",\n  audit: \"track\",\n  begin_group: \"grouping\",\n  begin_repeat: \"grouping\",\n};\n","import {\n  Callout,\n  Checkbox,\n  Classes,\n  Code,\n  ControlGroup,\n  Menu,\n  Text,\n} from \"@blueprintjs/core\";\nimport { sortBy, without } from \"lodash\";\nimport * as React from \"react\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport { XLSForm } from \"../../xlsform-simple-schema\";\nimport { ODKNode } from \"../../xlsform-simple-schema/types/ODKNode\";\nimport { QuestionRow } from \"../../xlsform-simple-schema/types/RowTypes\";\n\nexport function ChoiceListMenu({\n  xlsForm,\n  node,\n}: {\n  xlsForm: XLSForm;\n  node: ODKNode;\n}) {\n  const choiceListsByName = xlsForm?.choicesByName;\n  const choiceListNames = choiceListsByName\n    ? Object.keys(choiceListsByName)\n    : [];\n  const context = React.useContext(ODKSurveyContext);\n\n  const onChange = React.useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const checked = event.currentTarget.checked;\n      const choiceListName = event.currentTarget.value;\n      let typeParameters = [...node.typeParameters];\n      if (checked) {\n        typeParameters.push(choiceListName);\n      } else {\n        typeParameters = without(typeParameters, choiceListName);\n      }\n      const newTypeValue = [node.type, ...typeParameters].join(\" \");\n      const newRow: QuestionRow = {\n        ...node.row,\n        type: newTypeValue,\n      };\n      context.onSpliceRows(\"survey\", node.rowIndex, 1, newRow);\n    },\n    [context, node]\n  );\n\n  const choiceListMenu = (\n    <Menu>\n      <li className=\"bp3-menu-header\">\n        <h6 className=\"bp3-heading\">Which choice lists should be visible?</h6>\n      </li>\n      <ControlGroup style={{ margin: \"16px 8px 4px\" }} vertical={true}>\n        {choiceListNames.map((listName) => {\n          const isSelected = node.typeParameters.includes(listName);\n          const nameElement = listName;\n          const choiceNamesToRows = choiceListsByName[listName];\n          const choiceNames = Object.keys(choiceNamesToRows);\n\n          const sortedChoiceRows = sortBy(\n            choiceNames.map((n) => choiceNamesToRows[n]),\n            (r) => r.name.toLowerCase()\n          );\n\n          const maxChoicesCount = 4;\n          const shownChoices = sortedChoiceRows\n            .slice(0, maxChoicesCount)\n            .map((row) => (\n              <li>\n                <Code\n                  key={row.name}\n                  style={{\n                    marginInline: \"1px\",\n                  }}\n                >\n                  {row.name}\n                </Code>\n              </li>\n            ));\n          const restElement = sortedChoiceRows.length > maxChoicesCount && (\n            <span\n              className={Classes.UI_TEXT}\n              style={{\n                lineHeight: \"24px\",\n                marginLeft: \"4px\",\n                paddingRight: \"2px\",\n              }}\n              aria-label={`and ${\n                sortedChoiceRows.length - maxChoicesCount\n              } more`}\n            >\n              + {sortedChoiceRows.length - maxChoicesCount}\n            </span>\n          );\n          const shownLabel = (\n            <ControlGroup fill={true} style={{ display: \"inline-flex\" }}>\n              <header aria-label={`Choice list ${listName}, allowed values:`}>\n                <Text>{nameElement}</Text>\n              </header>\n              <ul className={Classes.LIST_UNSTYLED}>\n                <ControlGroup\n                  style={{\n                    justifyContent: \"flex-end\",\n                    marginLeft: \"16px\",\n                  }}\n                >\n                  {shownChoices}\n                  {restElement}\n                </ControlGroup>\n              </ul>\n            </ControlGroup>\n          );\n\n          return (\n            <Checkbox\n              value={listName}\n              onChange={onChange}\n              large={true}\n              checked={isSelected}\n              disabled={\n                node.typeParameters.length === 1 &&\n                listName === node.typeParameters[0]\n              }\n            >\n              {shownLabel}\n            </Checkbox>\n          );\n        })}\n      </ControlGroup>\n\n      <Callout intent=\"primary\">\n        These lists are defined in the <code>choices</code> Excel sheet.\n      </Callout>\n    </Menu>\n  );\n  return choiceListMenu;\n}\n","import { Menu, MenuDivider, MenuItem } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { ODKNodeContext } from \"../../lib/ODKNodeContext\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport {\n  fieldCategoriesToIcons,\n  fieldCategoryNames,\n  fieldTypeNames,\n  fieldTypesToCategories,\n  typesToIcons,\n} from \"../../lib/typesToIcons\";\nimport { QuestionRow } from \"../../xlsform-simple-schema/types/RowTypes\";\n\nexport function FieldTypeMenu() {\n  const context = React.useContext(ODKSurveyContext);\n  const { node } = React.useContext(ODKNodeContext);\n\n  const onClick = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      const type = event.currentTarget.dataset.type;\n      const typeParameters = type?.match(/^select/) ? node.typeParameters : [];\n      const newTypeValue = [type, ...typeParameters].join(\" \");\n      const newRow: QuestionRow = {\n        ...node.row,\n        type: newTypeValue,\n      };\n      context.onSpliceRows(\"survey\", node.rowIndex, 1, newRow);\n    },\n    [context, node]\n  );\n\n  return (\n    <Menu>\n      <li className=\"bp3-menu-header\">\n        <h6 className=\"bp3-heading\">Collecting data</h6>\n      </li>\n\n      {Object.keys(fieldCategoriesToIcons)\n        .filter((c) => c !== \"special\" && c !== \"grouping\")\n        .map((category) => (\n          <MenuItem\n            text={fieldCategoryNames[category]}\n            icon={fieldCategoriesToIcons[category]}\n          >\n            {Object.keys(fieldTypesToCategories)\n              .filter((t) => fieldTypesToCategories[t] === category)\n              .map((type) => (\n                <MenuItem\n                  text={fieldTypeNames[type]}\n                  icon={typesToIcons[type]}\n                  onClick={onClick}\n                  data-type={type}\n                />\n              ))}\n          </MenuItem>\n        ))}\n\n      <MenuDivider />\n\n      {Object.keys(fieldTypesToCategories)\n        .filter((t) => fieldTypesToCategories[t] === \"special\")\n        .map((type) => (\n          <MenuItem\n            text={fieldTypeNames[type]}\n            icon={typesToIcons[type]}\n            onClick={onClick}\n            data-type={type}\n          />\n        ))}\n    </Menu>\n  );\n}\n","import {\n  Boundary,\n  Button,\n  ButtonGroup,\n  Classes,\n  Code,\n  Icon,\n  OverflowList,\n  Text,\n} from \"@blueprintjs/core\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport * as React from \"react\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport { fieldTypeNames, typesToIcons } from \"../../lib/typesToIcons\";\nimport {\n  isGroupNode,\n  ODKNode,\n} from \"../../xlsform-simple-schema/types/ODKNode\";\nimport { ChoiceListMenu } from \"./ChoiceListMenu\";\nimport { FieldTypeMenu } from \"./FieldTypeMenu\";\nimport { NoChoicesState } from \"./NoChoicesState\";\n\nexport function FieldConfigurationButton({\n  node,\n  showType,\n}: {\n  node: ODKNode;\n  showType: boolean;\n}) {\n  const isGroup = isGroupNode(node);\n  const context = React.useContext(ODKSurveyContext);\n  const { xlsForm } = context;\n  const surveyHasChoiceLists =\n    !!xlsForm && Object.keys(xlsForm?.choicesByName).length > 0;\n  const choiceListMenu = xlsForm && (\n    <ChoiceListMenu xlsForm={xlsForm} node={node} />\n  );\n  const noChoicesAvailable = NoChoicesState();\n  const typeName = fieldTypeNames[node.type];\n  const icon = typesToIcons[node.type];\n  const hasItems = node.typeParameters.length > 0;\n\n  return (\n    <ButtonGroup>\n      {showType && (\n        <>\n          {isGroup ? (\n            <Text className={Classes.TEXT_MUTED}>\n              <Icon icon={icon} />\n              &nbsp;{typeName}\n            </Text>\n          ) : (\n            <Popover2 content={<FieldTypeMenu />} lazy={true}>\n              <Button\n                icon={icon || \"blank\"}\n                fill={false}\n                minimal={isGroup}\n                disabled={isGroup}\n                small={isGroup}\n                rightIcon={!isGroup && \"caret-down\"}\n              >\n                {typeName}\n              </Button>\n            </Popover2>\n          )}\n        </>\n      )}\n\n      {node.type.match(/^select/) && (\n        <Popover2\n          lazy={true}\n          content={surveyHasChoiceLists ? choiceListMenu : noChoicesAvailable}\n        >\n          <Button\n            fill={true}\n            outlined={false}\n            rightIcon={\"caret-down\"}\n            intent={hasItems ? \"none\" : \"warning\"}\n          >\n            {!hasItems && \"Set visible choices\"}\n            {hasItems && (\n              <OverflowList\n                observeParents={true}\n                minVisibleItems={2}\n                collapseFrom={Boundary.END}\n                items={node.typeParameters}\n                visibleItemRenderer={(p) => <Code>{p}</Code>}\n                overflowRenderer={(overflowItems) => (\n                  <span>{`+ ${overflowItems.length}`}</span>\n                )}\n                style={{\n                  transition: \"width 0.1s ease-out\",\n                  maxWidth: `200px`,\n                }}\n              />\n            )}\n          </Button>\n        </Popover2>\n      )}\n    </ButtonGroup>\n  );\n}\n","import { Button, ControlGroup, NonIdealState } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { createLabelInAllLanguages } from \"../../lib/createLabelInAllLanguages\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport { ChoiceRow } from \"../../xlsform-simple-schema/types/RowTypes\";\n\nexport function NoChoicesState() {\n  const context = React.useContext(ODKSurveyContext);\n\n  const addExampleChoices = React.useCallback(() => {\n    const languages = context.xlsForm?.languages || new Set([\"English (en)\"]);\n    const choiceRows: ChoiceRow[] = [\n      {\n        \"list name\": \"yes_no_maybe\",\n        name: \"yes\",\n        label: createLabelInAllLanguages(\"yes\", languages),\n      },\n      {\n        \"list name\": \"yes_no_maybe\",\n        name: \"no\",\n        label: createLabelInAllLanguages(\"no\", languages),\n      },\n      {\n        \"list name\": \"yes_no_maybe\",\n        name: \"maybe\",\n        label: createLabelInAllLanguages(\"maybe\", languages),\n      },\n    ];\n    context.onSpliceRows(\"choices\", 0, 0, ...choiceRows);\n  }, [context]);\n\n  const addExampleChoicesButton = (\n    <Button large={true} intent=\"primary\" onClick={addExampleChoices}>\n      Create example choice list\n    </Button>\n  );\n\n  return (\n    <ControlGroup style={{ padding: \"16px\" }}>\n      <NonIdealState\n        icon=\"selection\"\n        action={addExampleChoicesButton}\n        title=\"Sometimes, we have no choice.\"\n        description={\n          <>\n            This survey has no choice lists yet. Please add one first to make it\n            available for this survey question.\n          </>\n        }\n      />\n    </ControlGroup>\n  );\n}\n","import { Breadcrumbs } from \"@blueprintjs/core\";\nimport * as React from \"react\";\n\nexport function FieldPathBreadcrumbs({\n  path,\n  width,\n}: {\n  path: string[];\n  width: number;\n}) {\n  return (\n    <Breadcrumbs\n      items={path.map((k, i) => ({\n        href: `#//${path.slice(0, i + 1).join(\"/\")}`,\n        text: k,\n      }))}\n      collapseFrom=\"start\"\n      overflowListProps={{\n        minVisibleItems: 1,\n        style: {\n          transition: \"width 0.1s ease-out\",\n          width: `${width}px`,\n        },\n      }}\n    />\n  );\n}\n","import {\n  Button,\n  Callout,\n  Classes,\n  Code,\n  Colors,\n  ControlGroup,\n  HTMLDivProps,\n  Icon,\n  IResizeEntry,\n  ResizeSensor,\n  Tab,\n  Tabs,\n} from \"@blueprintjs/core\";\nimport {\n  Classes as PopoverClasses,\n  IPopover2TargetProps,\n  Popover2,\n} from \"@blueprintjs/popover2\";\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport { getFirstColumnNameWithError } from \"../../lib/getFirstColumnNameWithError\";\nimport { ODKNodeContext } from \"../../lib/ODKNodeContext\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport useConfirmNodeDeletion from \"../../lib/useConfirmNodeDeletion\";\nimport ODKFormulaEvaluationResult from \"../../xlsform-simple-schema/functions/odk-formulas/evaluation/ODKFormulaEvaluationResult\";\nimport { getNodeAbsolutePath } from \"../../xlsform-simple-schema/functions/odk-formulas/evaluation/XPath\";\nimport {\n  EvaluatableColumnName,\n  evaluatableColumnNames,\n  isNodeRelevant,\n  ODKNode,\n} from \"../../xlsform-simple-schema/types/ODKNode\";\nimport { useNodeDragAndDrop } from \"../useNodeDragAndDrop\";\nimport NodeActionMenu from \"./ActionMenu\";\nimport { ExpressionPanel } from \"./ExpressionPanel\";\nimport { FieldConfigurationButton } from \"./FieldConfigurationButton\";\nimport { FieldPathBreadcrumbs } from \"./FieldPathBreadcrumbs\";\n\nexport const StyledCodeBlock = styled(Code)`\n  overflow: auto;\n  word-break: break-all;\n  font-size: 16px;\n  line-height: 20px;\n  display: block;\n  border: none;\n  box-shadow: none;\n  background: transparent;\n  padding: 0;\n`;\n\nexport const StyledPanel = styled.div`\n  display: grid;\n  gap: 8px;\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5 {\n    margin: 0;\n    &:not(:first-child) {\n      margin-top: 8px;\n    }\n  }\n`;\n\nexport const StyledCalloutWithCode = styled(Callout)`\n  > code,\n  pre {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\",\n      \"Courier New\", monospace;\n    color: ${Colors.DARK_GRAY1};\n    /* border: 1px solid rgba(0, 0, 0, 0.2); */\n    margin: -1px;\n    padding: 2px 4px;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n\n  pre {\n    padding: 0.5em 0.55em;\n    margin: 0.5em 0;\n    line-height: 1.3em;\n    background: white;\n    white-space: pre-wrap;\n  }\n\n  code {\n    font-weight: 600;\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\",\n      \"Courier New\", monospace;\n  }\n`;\n\nfunction RenderTarget({\n  isOpen,\n  ref,\n  detailsButtonCaption,\n  ...targetProps\n}: IPopover2TargetProps & { detailsButtonCaption: React.ReactNode }) {\n  const context = React.useContext(ODKSurveyContext);\n  const { node, nodeEvaluationResults } = React.useContext(ODKNodeContext);\n  const isRelevant = isNodeRelevant(node, context.context);\n  const hasMissingParameters =\n    node.type.match(/^select/) && node.typeParameters.length === 0;\n  const firstColumnNameWithError = getFirstColumnNameWithError(\n    nodeEvaluationResults\n  );\n  const hasError = !!firstColumnNameWithError;\n  const [isDraggedOver, setIsDraggedOver] = React.useState(false);\n  const dragProps = useNodeDragAndDrop({\n    context: context.context,\n    node,\n    setIsDraggedOver,\n  });\n\n  return ref ? (\n    <ControlGroup\n      style={{\n        display: \"inline-flex\",\n        flex: \"none\",\n        borderTop: isDraggedOver ? `5px solid ${Colors.BLUE3}` : \"none\",\n      }}\n      {...dragProps}\n    >\n      <Button\n        {...targetProps}\n        elementRef={ref}\n        minimal={true}\n        // outlined={true}\n        small={true}\n        lang=\"en\"\n        intent={hasError ? \"danger\" : hasMissingParameters ? \"warning\" : \"none\"}\n        icon={hasError ? \"error\" : undefined}\n        style={{\n          color: hasError || hasMissingParameters ? undefined : \"inherit\",\n          fontSize: \"inherit\",\n          padding: 0,\n        }}\n        className={[!hasError && !isRelevant && Classes.TEXT_MUTED]\n          .filter(Boolean)\n          .join(\" \")}\n      >\n        <ControlGroup>\n          {detailsButtonCaption || (\n            <code style={{ color: \"inherit\" }}>{node.row.name}</code>\n          )}\n          {!isRelevant && (\n            <>\n              &nbsp;\n              <Icon icon=\"eye-off\" style={{ opacity: 0.5, color: \"inherit\" }} />\n            </>\n          )}\n        </ControlGroup>\n      </Button>\n    </ControlGroup>\n  ) : (\n    <div></div>\n  );\n}\n\nexport default function DetailsPopover(props: {\n  detailsButtonCaption?: React.ReactNode;\n  detailsContent?: string | JSX.Element | undefined;\n  node: ODKNode;\n  controlGroupProps?: HTMLDivProps;\n  showJumpButton?: boolean;\n  editable: boolean;\n  nameOfOnlyShownTab?: EvaluatableColumnName;\n}) {\n  const { node, editable, nameOfOnlyShownTab } = props;\n  const context = React.useContext(ODKSurveyContext);\n  const nodeEvaluationResults = context.context?.evaluationResults.get(node);\n  const firstColumnNameWithError = getFirstColumnNameWithError(\n    nodeEvaluationResults\n  );\n  const { row } = node;\n  const firstColumnNameWithContent = evaluatableColumnNames.find((n) => {\n    const value = row[n];\n    return typeof value === \"string\" && value.length > 0;\n  });\n\n  const [width, setWidth] = React.useState(100);\n  const handleResize = React.useCallback(\n    (entries: IResizeEntry[]) => {\n      // console.log(entries.map(e => `${e.contentRect.width} x ${e.contentRect.height}`));\n      setTimeout(() => {\n        const newWidth = entries[0]?.contentRect.width;\n        if (Math.abs(newWidth - width) > 10) {\n          setWidth(newWidth);\n        }\n      }, 50);\n    },\n    [width]\n  );\n\n  const [tabId, setTabId] = React.useState<string | number>(\n    firstColumnNameWithError || firstColumnNameWithContent || \"calculation\"\n  );\n\n  const { alert, showRemoveConfirmationDialog } = useConfirmNodeDeletion();\n\n  if (!context.context) {\n    return null;\n  }\n\n  const path = getNodeAbsolutePath(node, context.context).slice(1);\n\n  const editHeader = (\n    <ControlGroup style={{ marginBottom: \"16px\" }}>\n      <FieldConfigurationButton node={node} showType={true} />\n      <div className={Classes.FLEX_EXPANDER} />\n      <Popover2\n        content={\n          <NodeActionMenu node={node} onRemove={showRemoveConfirmationDialog} />\n        }\n        lazy={true}\n      >\n        <Button fill={false} rightIcon={\"caret-down\"}>\n          Actions\n        </Button>\n      </Popover2>\n    </ControlGroup>\n  );\n\n  const detailsContent = (\n    <ControlGroup vertical={true}>\n      {editable && editHeader}\n\n      <ResizeSensor onResize={handleResize} observeParents={true}>\n        <ControlGroup style={{ width: \"100%\", marginBottom: \"8px\" }}>\n          <FieldPathBreadcrumbs {...{ path, width }} />\n        </ControlGroup>\n      </ResizeSensor>\n\n      {nameOfOnlyShownTab ? (\n        <ExpressionPanel\n          {...{ node, columnName: nameOfOnlyShownTab, nodeEvaluationResults }}\n          style={{ margin: \"0 -20px -20px -20px\" }}\n        />\n      ) : (\n        <Tabs\n          onChange={setTabId}\n          selectedTabId={tabId}\n          renderActiveTabPanelOnly={false}\n        >\n          {evaluatableColumnNames.map((columnName) =>\n            getTab({\n              node,\n              nodeEvaluationResults,\n              columnName: columnName,\n            })\n          )}\n        </Tabs>\n      )}\n    </ControlGroup>\n  );\n\n  return (\n    <ODKNodeContext.Provider value={{ node, nodeEvaluationResults }}>\n      {alert}\n      <Popover2\n        lazy={true}\n        interactionKind=\"click\"\n        popoverClassName={PopoverClasses.POPOVER2_CONTENT_SIZING}\n        minimal={false}\n        placement=\"bottom\"\n        rootBoundary=\"viewport\"\n        onOpening={() => setWidth(0)}\n        modifiers={{\n          arrow: { enabled: true },\n          preventOverflow: { enabled: true },\n        }}\n        content={detailsContent}\n        fill={true}\n        renderTarget={RenderTarget}\n      />\n    </ODKNodeContext.Provider>\n  );\n}\n\nfunction getTab({\n  nodeEvaluationResults,\n  node,\n  columnName,\n}: {\n  nodeEvaluationResults: Map<string, ODKFormulaEvaluationResult> | undefined;\n  node: ODKNode;\n  columnName: EvaluatableColumnName;\n}) {\n  const results = nodeEvaluationResults?.get(columnName);\n  const panel = (\n    <ExpressionPanel\n      {...{ node, columnName, nodeEvaluationResults }}\n      style={{ margin: \"-20px\" }}\n    />\n  );\n\n  return (\n    <Tab\n      id={columnName}\n      panel={panel}\n      title={\n        <>\n          {columnName}\n          {results?.state === \"error\" && (\n            <>\n              &nbsp;\n              <Icon icon=\"warning-sign\" intent=\"warning\" />\n            </>\n          )}\n        </>\n      }\n    />\n  );\n}\n","import { Icon, ITreeNode, Tree } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { ODKSurveyContext } from \"../lib/ODKSurveyContext\";\nimport DetailsPopover from \"../survey/DetailsPopover/DetailsPopover\";\nimport { XLSForm } from \"../xlsform-simple-schema\";\nimport ODKFormulaEvaluationContext from \"../xlsform-simple-schema/functions/odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport {\n  getNodeAbsolutePath,\n  getNodeAbsolutePathString,\n} from \"../xlsform-simple-schema/functions/odk-formulas/evaluation/XPath\";\nimport {\n  evaluatableColumnNames,\n  ODKNode,\n} from \"../xlsform-simple-schema/types/ODKNode\";\n\nfunction SecondaryLabel(props: { node: ODKNode }) {\n  const { node } = props;\n  const context = React.useContext(ODKSurveyContext);\n  const results = context.context?.evaluationResults.get(node);\n  if (!results) {\n    return <Icon icon=\"calculator\" intent=\"none\" />;\n  }\n  const keysWithErrors = evaluatableColumnNames.filter(\n    (k) => results.get(k)?.error\n  );\n  const answer = context.context?.nodesToAnswers.get(node);\n  const valueString = answer === undefined ? null : JSON.stringify(answer);\n  const caption = <span>{valueString}</span>;\n  const error = `Node has errors in the following columns: ${keysWithErrors\n    .map((k) => `‘${k}’`)\n    .join(\", \")}`;\n  const icon = keysWithErrors.length ? (\n    <Icon icon=\"error\" intent=\"danger\" title={error} htmlTitle={error} />\n  ) : null;\n  return (\n    <>\n      {caption}\n      {icon}\n    </>\n  );\n}\n\nexport function getNodeTree(\n  node: ODKNode,\n  context: ODKFormulaEvaluationContext,\n  transform: (result: ITreeNode<ODKNode>) => ITreeNode<ODKNode>\n): ITreeNode<ODKNode> {\n  if (node.children.length === 0) {\n    return transform({\n      id: getNodeAbsolutePath(node, context).join(\".\"),\n      label: node.row.name,\n      childNodes: [],\n      nodeData: node,\n    });\n  }\n\n  return transform({\n    id: getNodeAbsolutePath(node, context).join(\".\"),\n    label: node.row.name,\n    childNodes: node.children.map((childNode) =>\n      getNodeTree(childNode, context, transform)\n    ),\n    nodeData: node,\n  });\n}\n\n// const DragSourcePlaceholder = styled.div`\n//   height: 20px;\n//   background-color: red;\n// `;\n\n// const DragTargetPlaceholder = styled.div`\n//   height: 20px;\n//   background-color: blue;\n// `;\n\nexport default function ResultCodeTree(props: { xlsForm: XLSForm }) {\n  const { xlsForm } = props;\n  const context = React.useContext(ODKSurveyContext);\n  const evaluationContext = context.context;\n\n  const result = React.useMemo(() => {\n    return xlsForm && evaluationContext\n      ? getNodeTree(xlsForm.rootSurveyGroup, evaluationContext, (result) => {\n          const node = result.nodeData;\n          if (!node) {\n            debugger;\n            throw new Error(\n              \"Encountered a tree node that is not associated with a node. Please fix this.\"\n            );\n          }\n\n          if (!context.context) {\n            throw new Error(\n              \"No context defined. Please define a context before using this component.\"\n            );\n          }\n\n          const path = getNodeAbsolutePathString(node, context.context);\n\n          const label = <DetailsPopover node={node} editable={true} />;\n\n          return {\n            ...result,\n            label,\n            key: node.row.name,\n            isExpanded: true,\n            hasCaret: !(result.childNodes?.length === 0),\n            secondaryLabel: node && <SecondaryLabel node={node} />,\n          } as ITreeNode<ODKNode>;\n        })\n      : null;\n  }, [context.context, evaluationContext, xlsForm]);\n\n  return result ? <Tree contents={[result]} /> : <div></div>;\n}\n","import * as React from \"react\";\nimport { FileInput } from \"@blueprintjs/core\";\nimport * as ExcelJS from \"exceljs\";\n\nexport default function ExcelFileInput(props: {\n  onLoadWorkbook: (workbook: ExcelJS.Workbook) => void;\n}) {\n  const onFileChange = React.useCallback(\n    (e) => {\n      const file = e.target.files[0];\n      const wb = new ExcelJS.Workbook();\n      const reader = new FileReader();\n\n      reader.readAsArrayBuffer(file);\n      reader.onload = () => {\n        const buffer = reader.result;\n        if (!(buffer instanceof ArrayBuffer)) {\n          throw new Error(\n            \"Buffer was not defined as Buffer object after reading.\"\n          );\n        }\n        wb.xlsx.load(buffer).then((workbook) => {\n          console.log(workbook, \"workbook instance\");\n          props.onLoadWorkbook(wb);\n        });\n      };\n    },\n    [props]\n  );\n\n  return <FileInput onInputChange={onFileChange} />;\n}\n","import { Button, MenuItem } from \"@blueprintjs/core\";\nimport { ItemRenderer, Select } from \"@blueprintjs/select\";\nimport * as React from \"react\";\n\nconst LanguageSelect = Select.ofType<string>();\n\ntype Props = {\n  language: string;\n  languages: string[];\n  onChange: (language: string) => void;\n};\n\nconst renderItem: ItemRenderer<string> = (language: string, options) => {\n  return (\n    <MenuItem\n      text={language}\n      // active={true}\n      onClick={options.handleClick}\n      shouldDismissPopover={false}\n    />\n  );\n};\n\nexport default function LanguageSelector(props: Props) {\n  const onItemSelect = React.useCallback(\n    (language: string) => {\n      props.onChange(language);\n    },\n    [props]\n  );\n\n  return (\n    <LanguageSelect\n      items={props.languages}\n      itemRenderer={renderItem}\n      activeItem={props.language}\n      noResults={<MenuItem disabled={true} text=\"No languages loaded yet.\" />}\n      onItemSelect={onItemSelect}\n      filterable={false}\n    >\n      {/* children become the popover target; render value here */}\n      <Button text={props.language} rightIcon=\"double-caret-vertical\" />\n    </LanguageSelect>\n  );\n}\n","import { HTMLDivProps } from '@blueprintjs/core';\nimport * as React from 'react';\n\nexport default function OverflowScrollContainer(props: HTMLDivProps) {\n    return <div {...props} style={{ overflow: 'auto', flex: 1, ...props.style }}>\n        {props.children}\n    </div>;\n}","import Excel from \"exceljs\";\nimport { SyntaxError } from \"../types/Errors\";\nimport {\n  choiceRowSchema,\n  questionRowSchema,\n  settingsRowSchema,\n} from \"../types/RowSchemas\";\nimport {\n  assertValidChoiceRow,\n  assertValidQuestionRow,\n  assertValidSettingsRow,\n  ChoiceRow,\n  QuestionRow,\n  SettingsRow,\n} from \"../types/RowTypes\";\nimport {\n  loadXLSFormFromRows,\n  WorksheetName,\n  WorksheetRowsWithMetadata,\n  XLSForm,\n} from \"../types/XLSForm\";\n\nexport function nestDoubleColonFields(\n  row: Record<string, unknown>,\n  namespacePrefixes: string[],\n  defaultSuffix?: string\n): {\n  result: Readonly<Record<string, unknown>>;\n  foundSuffixes: Readonly<Set<string>>;\n} {\n  const result: Record<string, unknown> = {\n    ...row,\n  };\n\n  const foundSuffixes = new Set<string>();\n\n  if (defaultSuffix) {\n    namespacePrefixes.forEach((k) => {\n      if (result[k]) {\n        result[`${k}::${defaultSuffix}`] = result[k];\n      }\n      foundSuffixes.add(defaultSuffix);\n      delete result[k];\n    });\n  }\n\n  namespacePrefixes.forEach((namespacePrefix) => {\n    Object.keys(result)\n      .filter((k) => k.startsWith(namespacePrefix))\n      .forEach((k) => {\n        const [prefix, suffix] = k.split(/::/);\n        /* Example { 'label::English (en)': 'A label!' } */\n        const objectToExtend = result[prefix] as\n          | Record<string, string>\n          | string;\n        const value = String(result[k]);\n        if (objectToExtend === undefined) {\n          result[prefix] = { [suffix]: value };\n          foundSuffixes.add(suffix);\n        } else if (typeof objectToExtend === \"object\") {\n          objectToExtend[suffix] = value;\n          foundSuffixes.add(suffix);\n        } else {\n          throw new SyntaxError(\n            `Can't handle \\`${prefix}\\` column. Columns with prefix \\`${prefix}\\` must be namespaced with \\`::\\`. See chapter [‘Advanced use and extensibility’](https://xlsform.org/en/#advanced-use-and-extensibility) in the documentation.`\n          );\n        }\n        delete result[k];\n      });\n  });\n\n  return { result, foundSuffixes };\n}\n\n// See reference table: https://xlsform.org/en/ref-table/\n\nexport function normalizeColumnNames(\n  headerRow: Excel.CellValue[]\n): readonly string[] {\n  const result: string[] = [];\n  for (let i = 0; i < headerRow.length; i += 1) {\n    const columnName = headerRow[i]?.toString() || \"\";\n    result.push(\n      columnName\n        .replace(/^constraint-msg\\B/, \"constraint_message\")\n        .replace(/^requiredMsg\\B/, \"required_message\")\n        .replace(/^bind::required$/, \"required\")\n        .replace(/^repeat-count$/, \"repeat_count\")\n        .replace(/^media::(image|audio|video)\\B/, \"$1\")\n        .replace(/^photo\\B/, \"image\")\n        .replace(/^list_name$/, \"list name\")\n    );\n  }\n  return Object.freeze(result);\n}\n\n// See reference table: https://xlsform.org/en/ref-table/\n\nexport function normalizeType(type: string): string {\n  return type\n    .replace(/^media::(image|audio|video)\\B/, \"$1\")\n    .replace(/^imei$/, \"deviceid\")\n    .replace(/^phone_number$/, \"phonenumber\")\n    .replace(/^select one\\B/, \"select_one\")\n    .replace(/^select multiple\\B/, \"select_multiple\")\n    .replace(/^location$/, \"geopoint\")\n    .replace(/^photo\\B/, \"image\")\n    .replace(/^trigger$/, \"acknowledge\")\n    .replace(/^begin group$/, \"begin_group\")\n    .replace(/^end group$/, \"end_group\")\n    .replace(/^begin repeat$/, \"begin_repeat\")\n    .replace(/^end repeat$/, \"end_repeat\");\n}\n\nconst autoCleanOptions = {\n  getAutoValues: true,\n  trimStrings: true,\n  mutate: false,\n};\n\nexport function loadQuestionRow(row: Record<string, unknown>): QuestionRow {\n  const cleanRow = questionRowSchema.clean(\n    { ...row, type: normalizeType(String(row.type)) },\n    autoCleanOptions\n  );\n  assertValidQuestionRow(cleanRow);\n  return cleanRow;\n}\n\nexport function loadChoicesRow(row: Record<string, unknown>): ChoiceRow {\n  const cleanRow = choiceRowSchema.clean(row, {\n    ...autoCleanOptions,\n    filter: false,\n  });\n  assertValidChoiceRow(cleanRow);\n  return cleanRow;\n}\n\nexport function loadSettingsRow(row: Record<string, unknown>): SettingsRow {\n  const cleanRow = settingsRowSchema.clean(row, autoCleanOptions);\n  assertValidSettingsRow(cleanRow);\n  return cleanRow;\n}\n\ntype LoadRowFunction<T> = (row: Record<string, unknown>) => T;\n\nexport const localizableColumnNames = [\n  \"label\",\n  \"hint\",\n  \"constraint_message\",\n  \"required_message\",\n  \"image\",\n  \"audio\",\n  \"video\",\n];\n\nexport function loadExcelRow<RowT>({\n  row,\n  columnNames,\n  defaultLanguage,\n  loadRowFn,\n}: {\n  readonly row: Excel.Row;\n  readonly columnNames: readonly string[];\n  readonly defaultLanguage: string | undefined;\n  readonly loadRowFn: LoadRowFunction<RowT>;\n}) {\n  const rowRawData: Record<string, unknown> = {};\n  (row.values as Excel.CellValue[]).slice(1).forEach((value, columnIndex) => {\n    const columnName = columnNames[columnIndex];\n    rowRawData[columnName] = `${value}`;\n  });\n  const { result: rowDataWithLocalizedStrings } = nestDoubleColonFields(\n    rowRawData,\n    localizableColumnNames,\n    defaultLanguage\n  );\n  const {\n    result: rowDataWithNamespacedFields,\n  } = nestDoubleColonFields(rowDataWithLocalizedStrings, [\n    \"instance\",\n    \"bind\",\n    \"body\",\n  ]);\n  try {\n    return loadRowFn(rowDataWithNamespacedFields);\n  } catch (error) {\n    throw new SyntaxError(\n      `Could not load row ${JSON.stringify(\n        rowDataWithNamespacedFields,\n        null,\n        2\n      )}: ${error} / ${JSON.stringify(error.details)}`\n    );\n  }\n}\n\nfunction findLanguagesInColumnNames(\n  columnNames: readonly string[],\n  defaultLanguage?: string\n): Readonly<Set<string>> {\n  const columnNamesToTrues: Record<string, unknown> = {};\n  columnNames.forEach((name) => {\n    columnNamesToTrues[name] = true;\n  });\n  const { foundSuffixes } = nestDoubleColonFields(\n    columnNamesToTrues,\n    localizableColumnNames,\n    defaultLanguage\n  );\n  return foundSuffixes;\n}\n\nfunction loadWorksheet<RowT>(\n  workbook: Excel.Workbook,\n  sheetName: WorksheetName,\n  loadRowFn: LoadRowFunction<RowT>,\n  defaultLanguage?: string\n): WorksheetRowsWithMetadata<RowT> | undefined {\n  const excelWorksheet = workbook.getWorksheet(sheetName);\n  const rows: RowT[] = [];\n\n  if (!excelWorksheet) {\n    return undefined;\n  }\n\n  const firstRow = excelWorksheet.getRows(1, 1)[0];\n  if (!(firstRow.values instanceof Array)) {\n    throw new SyntaxError(\n      `First row of the ‘${sheetName}’ worksheet must be an array structure, but is a ${typeof firstRow.values} instead. Please fix this.`\n    );\n  }\n\n  // console.log('Column names before normalization:', firstRow.values.slice(1));\n  const columnNames = firstRow.values\n    .slice(1)\n    .map((cellValue) => cellValue?.toString() || \"\");\n  const columnNamesNormalized = normalizeColumnNames(columnNames);\n  const languages = findLanguagesInColumnNames(\n    columnNamesNormalized,\n    defaultLanguage\n  );\n  excelWorksheet.eachRow((row, rowIndex) => {\n    if (rowIndex === 1) {\n      return;\n    }\n    rows.push(\n      loadExcelRow<RowT>({\n        row,\n        columnNames: columnNamesNormalized,\n        defaultLanguage,\n        loadRowFn,\n      })\n    );\n  });\n\n  return { rows, languages, columnNames, columnNamesNormalized };\n}\n\nexport async function loadFormFromExcelWorkbook(\n  workbook: Excel.Workbook\n): Promise<XLSForm> {\n  const settings = loadWorksheet(workbook, \"settings\", loadSettingsRow);\n  const defaultLanguage = settings?.rows[0].default_language || \"English (en)\";\n  const choices = loadWorksheet(\n    workbook,\n    \"choices\",\n    loadChoicesRow,\n    defaultLanguage\n  );\n  const survey = loadWorksheet(\n    workbook,\n    \"survey\",\n    loadQuestionRow,\n    defaultLanguage\n  );\n\n  if (!survey) {\n    throw new Error(\n      \"No `survey` sheet found in workbook. Please define a sheet named `survey` and try again.\"\n    );\n  }\n\n  const xlsForm: XLSForm = loadXLSFormFromRows(\n    survey,\n    defaultLanguage,\n    settings,\n    choices\n  );\n\n  // console.log(xlsForm);\n  // console.log(xlsForm.rootSurveyGroup);\n\n  return xlsForm;\n}\n\nexport default async function loadFormFromXLSXFile(\n  filename: string\n): Promise<XLSForm> {\n  const workbook = new Excel.Workbook();\n  await workbook.xlsx.readFile(filename);\n  return loadFormFromExcelWorkbook(workbook);\n}\n","import {\n  BeginMarkerRow,\n  BeginOrEndMarkerRow,\n} from \"../types/BeginOrEndMarkerRow\";\nimport { SemanticError } from \"../types/Errors\";\nimport { ODKNode } from \"../types/ODKNode\";\nimport { QuestionRow } from \"../types/RowTypes\";\nimport { normalizeType } from \"./loadSurveyFromXLSX\";\n\nfunction assertNoEndMarker(\n  row: QuestionRow | BeginOrEndMarkerRow,\n  i: number\n): asserts row is QuestionRow | BeginMarkerRow {\n  if (row.type.match(/^end[ _](?:group|repeat)$/)) {\n    throw new SemanticError(\n      `Found '${row.type}' without a matching start marker in row ${\n        i + 2\n      }. Please check that the group/repeat nesting is correct. The row: ${row}`\n    );\n  }\n}\n\n/**\n * Calculates a nested `Node` survey model for an array of non-nested survey worksheet rows.\n */\nexport default function nestSurvey({\n  rows,\n  defaultLanguage,\n  formRootNameFromSettings = \"data\",\n  titleFromSettings = \"\",\n  onRow,\n}: {\n  rows: readonly (QuestionRow | BeginOrEndMarkerRow)[];\n  defaultLanguage: string;\n  formRootNameFromSettings?: string;\n  titleFromSettings?: string;\n  onRow?: (row: QuestionRow | BeginOrEndMarkerRow, node: ODKNode) => void;\n}): {\n  node: Readonly<ODKNode>;\n} {\n  const root: ODKNode = {\n    children: [] as ODKNode[],\n    type: \"\",\n    typeParameters: [],\n    rowIndex: -1,\n    indentationLevel: 0,\n    row: {\n      name: formRootNameFromSettings,\n      type: \"\",\n      label: { [defaultLanguage]: titleFromSettings },\n    } as QuestionRow,\n  };\n  const stack: ODKNode[] = [root];\n  let i = 0;\n\n  while (i < rows.length) {\n    const row = rows[i];\n    const [type, ...typeParameters] = normalizeType(row.type).split(\" \");\n    const currentGroup = stack[stack.length - 1];\n\n    if (currentGroup.type === \"begin_group\" && type === \"end_group\") {\n      stack.pop();\n      onRow?.(row, currentGroup);\n    } else if (\n      currentGroup.type === \"begin_repeat\" &&\n      row.type === \"end_repeat\"\n    ) {\n      stack.pop();\n      onRow?.(row, currentGroup);\n    } else if (type.match(/^begin_(?:repeat|group)$/)) {\n      // Found the beginning of a nested group or repeat\n      const newGroupNode: ODKNode = {\n        row: row as BeginMarkerRow,\n        type,\n        typeParameters,\n        children: [],\n        indentationLevel: stack.length - 1,\n        rowIndex: i,\n      };\n      currentGroup.children.push(newGroupNode);\n      stack.push(newGroupNode);\n      onRow?.(row, newGroupNode);\n    } else {\n      // Found a 'normal' survey question\n      assertNoEndMarker(row, i);\n      const newChildNode: ODKNode = {\n        row,\n        type,\n        typeParameters,\n        indentationLevel: stack.length - 1,\n        rowIndex: i,\n        children: [],\n      };\n      currentGroup.children.push(newChildNode);\n      onRow?.(row, newChildNode);\n    }\n\n    i += 1;\n  }\n\n  return { node: root };\n}\n","import nestSurvey from \"../functions/nestSurvey\";\nimport { ODKNode } from \"./ODKNode\";\nimport { ChoiceRow, QuestionRow, SettingsRow } from \"./RowTypes\";\n\nexport type XLSFormWorksheet<RowT> = Readonly<{\n  rows: readonly RowT[];\n  languages: Readonly<Set<string>>;\n  columnNames: readonly string[];\n  columnNamesNormalized: readonly string[];\n}>;\n\nexport type SurveyWorksheet = XLSFormWorksheet<QuestionRow>;\nexport type ChoicesWorksheet = XLSFormWorksheet<ChoiceRow>;\nexport type SettingsWorksheet = XLSFormWorksheet<SettingsRow>;\n\nexport type ChoiceRowByName = Record<string, ChoiceRow>;\nexport type ChoiceRowsByListNameAndName = Record<string, ChoiceRowByName>;\n\nexport type FlatNode = {\n  row: Readonly<QuestionRow>;\n  node: Readonly<ODKNode>;\n};\n\nexport type XLSForm = {\n  worksheets: {\n    survey: SurveyWorksheet;\n    choices?: ChoicesWorksheet;\n    settings?: SettingsWorksheet;\n  };\n  choicesByName: Readonly<ChoiceRowsByListNameAndName>;\n  rootSurveyGroup: Readonly<ODKNode>;\n  languages: Readonly<Set<string>>;\n  flatNodes: readonly ODKNode[];\n};\n\nexport type WorksheetName = keyof XLSForm[\"worksheets\"];\n\nexport type WorksheetRowsWithMetadata<RowT> = {\n  rows: readonly RowT[];\n  languages: Readonly<Set<string>>;\n  columnNames: readonly string[];\n  columnNamesNormalized: readonly string[];\n};\n\nexport function loadChoices(\n  worksheet: ChoicesWorksheet\n): ChoiceRowsByListNameAndName {\n  const map: ChoiceRowsByListNameAndName = {};\n\n  worksheet.rows.forEach((row) => {\n    const listName = row[\"list name\"];\n    const { name } = row;\n    const list = map[listName] || {};\n    list[name] = row;\n    map[listName] = list;\n  });\n\n  return map;\n}\n\nexport function loadXLSFormFromRows(\n  survey: Readonly<WorksheetRowsWithMetadata<QuestionRow>>,\n  defaultLanguage: string,\n  settings?: WorksheetRowsWithMetadata<SettingsRow>,\n  choices?: WorksheetRowsWithMetadata<ChoiceRow>\n) {\n  const flatNodes: ODKNode[] = [];\n  const { node: rootSurveyGroup } = nestSurvey({\n    rows: survey.rows,\n    defaultLanguage,\n    onRow: (row, node) => flatNodes.push(node),\n  });\n\n  const xlsForm: XLSForm = {\n    worksheets: {\n      settings,\n      choices,\n      survey,\n    },\n    rootSurveyGroup,\n    choicesByName: choices ? loadChoices(choices) : {},\n    languages: survey.languages,\n    flatNodes,\n  };\n  return xlsForm;\n}\n","import {\n  SemanticError,\n  FunctionNotImplementedError,\n} from \"../../../types/Errors\";\nimport ODKNodeValue from \"../../../types/ODKNodeValue\";\nimport { ODKNodeWithoutRuntimeInfo } from \"../../../types/ODKNode\";\nimport ODKFormulaExecutionContext from \"./ODKFormulaEvaluationContext\";\nimport { ordinalize } from \"inflection\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\ntype Value = ODKNodeValue;\n\nexport type FormulaFunction = (\n  this: {\n    context: ODKFormulaExecutionContext;\n    scope: ODKNodeWithoutRuntimeInfo;\n  },\n  ...args: Value[]\n) => Value;\n\nfunction assertString(value: unknown, argNo: number): asserts value is string {\n  if (typeof value !== \"string\") {\n    const number = ordinalize(String(argNo + 1));\n    throw new SemanticError(\n      `Expected a string value as ${number} parameter, but got \\`${value}\\`.`\n    );\n  }\n}\n\nfunction assertNumber(value: unknown, argNo: number): asserts value is number {\n  if (typeof value !== \"number\") {\n    const number = ordinalize(String(argNo + 1));\n    throw new SemanticError(\n      `Expected a number value as ${number} parameter, but got \\`${value}\\`.`\n    );\n  }\n}\n\nfunction assertBoolean(\n  value: unknown,\n  argNo: number\n): asserts value is boolean {\n  if (typeof value !== \"boolean\") {\n    const number = ordinalize(String(argNo + 1));\n    throw new SemanticError(\n      `Expected a boolean value as ${number} parameter, but got \\`${value}\\`.`\n    );\n  }\n}\n\n// Documentation: https://docs.getodk.org/form-operators-functions/\nexport const functions: Record<string, FormulaFunction> = {\n  if<T, U>(expression: unknown, then: T, elseExpression: U): T | U {\n    assertBoolean(expression, 0);\n    return expression ? then : elseExpression;\n  },\n\n  true(): boolean {\n    return true;\n  },\n\n  false(): boolean {\n    return false;\n  },\n\n  not(arg: unknown): boolean {\n    assertBoolean(arg, 0);\n    return !arg;\n  },\n\n  coalesce<T extends Value, U extends Value>(arg: T, arg2: U): T | U | string {\n    if (typeof arg !== \"undefined\" && arg !== \"\") {\n      return arg;\n    }\n    if (typeof arg2 !== \"undefined\" && arg2 !== \"\") {\n      return arg2;\n    }\n    return \"\";\n  },\n\n  boolean(arg: Value): boolean {\n    if (typeof arg === \"number\") {\n      return arg !== 0;\n    }\n    if (typeof arg === \"string\") {\n      return arg !== \"\";\n    }\n    if (arg instanceof Array) {\n      return arg.length > 0;\n    }\n    if (typeof arg === \"boolean\") {\n      return arg;\n    }\n    return false;\n  },\n\n  /**\n    Returns an integer equal to the 1-indexed position of the current node within the node defined by xpath.\n    Most often this is used in the form position(..) to identify the current iteration index within a repeat group.\n  */\n  position(_xpath: Value): number {\n    throw new FunctionNotImplementedError(\"position\");\n  },\n  /**\n   * Returns the value expression if the question's value is empty. Otherwise, returns the current value of the question.\n   * This can be used to ensure that a random number is only generated once, or to store the first value entered for a question in a way that is retrievable even if the response is changed later.\n   *   Warning This function is often misunderstood. Read when expressions are evaluated to learn more.\n   */\n  once(_expression: Value): Value {\n    throw new FunctionNotImplementedError(\"once\");\n  },\n\n  /**\n   * Returns True if string is a member of space_delimited_array, otherwise returns False. Commonly used to determined if a specific choice was selected in a select question. (This is possible because a reference to a select question returns a space-delimited array of choice names.)\n   */\n  selected(space_delimited_array: Value, string: Value): boolean {\n    if (space_delimited_array === undefined) {\n      return false;\n    }\n    assertString(space_delimited_array, 0);\n    assertString(string, 1);\n    if (space_delimited_array.length === 0 || string.length === 0) {\n      return false;\n    }\n    return space_delimited_array.split(\" \").includes(string);\n  },\n\n  // Returns the string at the n th position of the space_delimited_array. (The array is zero-indexed.) Returns an empty string if the index does not exist.\n  // This can be used to get the name of a selected choice from a multi-select question. (This is possible because a reference to a select question returns a space-delimited array of choice names.)\n  // Note\n  // If used to get a choice name from a select question, this function returns the name, not the label, of the selected choice. To get the label in the current language, use jr:choice-name().\n  \"selected-at\"(_space_delimited_array: Value, _n): string {\n    throw new FunctionNotImplementedError(\"selected-at\");\n  },\n\n  // Returns the number of choices selected in multi_select_question.\n  \"count-selected\"(_multi_select_question: Value): number {\n    throw new FunctionNotImplementedError(\"count-selected\");\n  },\n\n  // Returns the label value, in the active language, associated with the choice_name in the list of choices for the select_question.\n  // Note\n  // You have to wrap the select_question reference in quotes.\n  // '${question_name}'\n  \"jr:choice-name\"(_choice_name: Value, _select_question: Value): string {\n    throw new FunctionNotImplementedError(\"jr:choice-name\");\n  },\n\n  // Repeat groups\n  // Helpful terms\n  // nodeset\n  // A collection of XML nodes. In XLSForms, this is typically a collection of response values.\n  // Outside a repeat group, referring to a question by name will return a nodeset containing all the responses to that question.\n  // Nodesets can also be created by joining two or more nodes with pipes: /data/age | /data/name.\n\n  // Returns the response value of question name from the repeat-group group, in iteration i.\n  // Nested repeat groups can be accessed using the sub and sub_sub parameters.\n  // See also\n  // Referencing repeated questions from inside the repeat\n  \"indexed-repeat\"(\n    _name: Value,\n    _group: Value,\n    _i: Value,\n    _sub_grp: Value,\n    _sub_i: Value,\n    _sub_sub_grp: Value,\n    _sub_sub_i: Value\n  ): string {\n    throw new FunctionNotImplementedError(\"):\");\n  },\n\n  // Returns the number of items in nodeset. This can be used to count the number of repetitions in a repeat group.\n  count(_nodeset: Value): number {\n    throw new FunctionNotImplementedError(\"count\");\n  },\n\n  // Returns the number of non-empty members of nodeset.\n  \"count-non-empty\"(_nodeset: Value): number {\n    throw new FunctionNotImplementedError(\"count-non-empty\");\n  },\n\n  // Returns the sum of the members of nodeset.\n  // Can be used to tally responses to a repeated select question.\n  sum(_nodeset: Value): number {\n    throw new FunctionNotImplementedError(\"sum\");\n  },\n\n  // Returns the largest member of nodeset.\n  // Warning\n  // The min() and max() functions only work sets of numbers. Empty values (that is, variables referencing unanswered questions) are actually empty strings, and will not be automatically converted to zero (0).\n  // Strings\n  max(_nodeset: Value): Value {\n    throw new FunctionNotImplementedError(\"max\");\n  },\n\n  // Returns the smallest member of nodeset.\n  // Warning\n  // The min() and max() functions only work sets of numbers. Empty values (that is, variables referencing unanswered questions) are actually empty strings, and will not be automatically converted to zero (0).\n  // Strings\n  min(_nodeset: Value): Value {\n    throw new FunctionNotImplementedError(\"min\");\n  },\n\n  // Searching and matching strings\n\n  // Returns True if string is an exact and complete match for expression.\n  // See also\n  // Using regular expressions\n  regex(string: Value, expression: Value): boolean {\n    assertString(string, 0);\n    assertString(expression, 0);\n    return !!string.match(new RegExp(expression));\n  },\n\n  // Returns True if the string contains the substring.\n  contains(string: Value, substring: Value): boolean {\n    assertString(string, 0);\n    assertString(substring, 1);\n    return !!string.match(substring);\n  },\n\n  // Returns True if string begins with substring.\n  \"starts-with\"(string: Value, substring: Value): boolean {\n    assertString(string, 0);\n    assertString(substring, 1);\n    return string.startsWith(substring);\n  },\n\n  // Returns True if the string ends with substring.\n  \"ends-with\"(string: Value, substring: Value): boolean {\n    assertString(string, 0);\n    assertString(substring, 1);\n    return string.endsWith(substring);\n  },\n\n  // Returns the substring of string beginning at the index start and extending to (but not including) index end (or to the termination of string, if end is not provided). Members of string are zero-indexed.\n  substr(string: Value, start: Value, end: Value): string {\n    assertString(string, 0);\n    assertNumber(start, 1);\n    assertNumber(end, 2);\n    return string.substring(start, end);\n  },\n\n  // Returns the substring of string before the first occurrence of the target substring. If the target is not found, or string begins with the target substring, then this will return an empty string.\n  \"substring-before\"(_string: Value, _target): string {\n    throw new FunctionNotImplementedError(\"substring-before\");\n  },\n\n  // Returns the substring of string after the first occurrence of the target substring. If the target is not found this will return an empty string.\n  \"substring-after\"(_string: Value, _target): string {\n    throw new FunctionNotImplementedError(\"substring-after\");\n  },\n\n  // Returns a copy of string, where every occurrence of a character in fromchars is replaced by the corresponding character in tochars. If fromchars is longer than tochars then every occurrence of a character in fromchars that does not have a corresponding character in tochars will be removed.\n  translate(_string: Value, _fromchars: Value, _tochars: Value): string {\n    throw new FunctionNotImplementedError(\"translate\");\n  },\n\n  // Returns the number of characters in string. If no value is passed in, returns the number of characters in the value of the question that this function call is tied to which can be useful in a constraint expression.\n  \"string-length\"(string: Value): number {\n    assertString(string, 0);\n    return string.length;\n  },\n\n  // Returns a string with normalized whitespace by stripping leading and trailing whitespace of string and replacing sequences of whitespace characters with a single space. If no value is passed in, normalizes whitespace of the value of the question that this function call is tied to.\n  \"normalize-space\"(string?: Value): string {\n    assertString(string, 0);\n    return string.trim();\n  },\n\n  // Combining strings\n\n  // Concatenates one or more arguments into a single string. If any arg is a nodeset, the values within the set are concatenated into a string.\n  concat(...args: Value[]): string {\n    return args.join(\"\");\n  },\n\n  // Joins the members of nodeset, using the string separator.\n  join(_separator: Value, _nodeset: ODKNodeValue): string {\n    throw new FunctionNotImplementedError(\"join\");\n  },\n\n  // Converting to and from strings\n\n  // Returns True if string is \"true\" or \"1\". Otherwise, False.\n  \"boolean-from-string\"(string: Value): boolean {\n    return string === \"true\" || string === \"1\";\n  },\n\n  // Converts arg to a string.\n  string(arg: Value): string {\n    return String(arg);\n  },\n\n  // Math\n  // Warning\n  // Math functions (except number()) only work with number values.\n  // You can use number() to convert a string of digits to a number, but it is usually better to get a number value directly.\n  // Empty values (that is, variables referencing unanswered questions) are actually empty strings, and will not be automatically converted to zero (0).\n\n  // Number handling\n\n  // Rounds a decimal number to some number of decimal places.\n  round(number: Value, places: Value): number {\n    assertNumber(number, 0);\n    assertNumber(places, 1);\n    return Math.round(number * 10 ** places) / 10 ** places;\n  },\n\n  // Truncates the fractional portion of a decimal number to return an integer.\n  int(number: Value) {\n    assertNumber(number, 0);\n    return Math.floor(number);\n  },\n\n  // Converts arg to number value.\n  // If arg is a string of digits, returns the number value.\n  // If arg is True, returns 1. If arg is False, returns 0.\n  // If arg cannot be converted, returns NaN (not a number).\n  number(arg: Value): number {\n    if (typeof arg === \"boolean\") {\n      return arg ? 1 : 0;\n    }\n    if (typeof arg === \"string\") {\n      if (arg.trim().match(/-?\\d+(\\.\\d+)?/)) {\n        return Number(arg);\n      }\n    }\n    if (typeof arg === \"number\") {\n      return arg;\n    }\n    return NaN;\n  },\n\n  // Computes and returns the hash value of the data string using the indicated hash algorithm string, and encoding this hash value using the optional encoding string.\n  // Options for the algorithm are MD5, SHA-1, SHA-256, SHA-384, SHA-512.\n  // If the third parameter is not specified, the encoding is base64. Valid options for the encoding are base64 and hex.\n  // This function can be useful if, for example, someone wants to build a unique identifier from sensitive data like a national ID number without compromising that data.\n  // See also\n  // count(), max(), min(), number()\n  digest(_data: Value, _algorithm: Value, _encodingMethod: Value): string {\n    throw new FunctionNotImplementedError(\"digest\");\n  },\n\n  // Calculation\n  pow(number: Value, exponent: Value): number {\n    assertNumber(number, 0);\n    assertNumber(exponent, 1);\n    return Math.pow(number, exponent);\n  },\n  log(number: Value): number {\n    assertNumber(number, 0);\n    return Math.log(number);\n  },\n  log10(number: Value): number {\n    assertNumber(number, 0);\n    return Math.log10(number);\n  },\n  abs(number: Value): number {\n    assertNumber(number, 0);\n    return Math.abs(number);\n  },\n  sin(number: Value): number {\n    assertNumber(number, 0);\n    return Math.sin(number);\n  },\n  cos(number: Value): number {\n    assertNumber(number, 0);\n    return Math.cos(number);\n  },\n  tan(number: Value): number {\n    assertNumber(number, 0);\n    return Math.tan(number);\n  },\n  asin(number: Value): number {\n    assertNumber(number, 0);\n    return Math.asin(number);\n  },\n  acos(number: Value): number {\n    assertNumber(number, 0);\n    return Math.acos(number);\n  },\n  atan(number: Value): number {\n    assertNumber(number, 0);\n    return Math.atan(number);\n  },\n  atan2(y: Value, x: Value): number {\n    assertNumber(y, 0);\n    assertNumber(x, 1);\n    return Math.atan2(y, x);\n  },\n  sqrt(number: Value): number {\n    assertNumber(number, 0);\n    return Math.sqrt(number);\n  },\n  exp(number: Value): number {\n    assertNumber(number, 0);\n    return Math.exp(number);\n  },\n  exp10: (number: Value): number => {\n    assertNumber(number, 0);\n    return 10 ** number;\n  },\n  pi: (): number => {\n    return Math.PI;\n  },\n\n  // Date and time\n\n  // Returns the current date without a time component.\n  today(): Date {\n    const now = new Date();\n    now.setHours(0, 0, 0, 0);\n    return now;\n  },\n\n  // Returns the current datetime in ISO 8601 format, including the timezone.\n  // Warning\n  // This function is often misused. Read when expressions are evaluated to learn more.\n  now(): string {\n    return new Date().toISOString();\n  },\n\n  // Converting dates and time\n\n  // Converts dateTime value to the number of days since January 1, 1970 (the Unix Epoch).\n  // This is the inverse of date().\n  \"decimal-date-time\"(_dateTime: Value): number {\n    throw new FunctionNotImplementedError(\"decimal-date-time\");\n  },\n\n  // Converts an integer representing a number of days from January 1, 1970 (the Unix Epoch) to a standard date value.\n\n  // This is the inverse of decimal-date-time().\n  date(_days: Value): Date {\n    throw new FunctionNotImplementedError(\"date\");\n  },\n\n  // Converts time to a number representing a fractional day. For example, noon is 0.5 and 6:00 PM is 0.75.\n  \"decimal-time\"(_time: Value): number {\n    throw new FunctionNotImplementedError(\"decimal-time\");\n  },\n\n  // Formatting dates and times for display\n\n  // Returns date as a string formatted as defined by format.\n  \"format-date\"(_date: Value, _format: Value): string {\n    throw new FunctionNotImplementedError(\"format-date\");\n  },\n\n  // Returns dateTime as a string formatted as defined by format.\n  \"format-date-time\"(_dateTime: Value, _format: Value): string {\n    throw new FunctionNotImplementedError(\"format-date-time\");\n  },\n\n  // Geography\n\n  // Returns the area, in square meters, of either a nodeset of geopoints or a geoshape value.\n  // It takes into account the circumference of the Earth around the Equator but does not take altitude into account.\n  area(_nodesetOrGeoshape: Value | Value): number {\n    throw new FunctionNotImplementedError(\"area\");\n  },\n\n  // Returns the distance, in meters, of either:\n\n  // a nodeset of geopoints\n  // the perimeter of a geoshape\n  // the length of a geotrace value\n  // It takes into account the circumference of the Earth around the Equator and does not take altitude into account.\n  distance(_nodesetOrGeoshapeOrGeotrace: Value): number {\n    throw new FunctionNotImplementedError(\"distance\");\n  },\n\n  // Utility\n\n  // Returns a random number between 0.0 (inclusive) and 1.0 (exclusive).\n  // Warning\n  // This function is often misused. Read when expressions are evaluated to learn more.\n  random: Math.random,\n\n  // Returns a shuffled nodeset.\n  // A shuffle with a numeric seed is deterministic and reproducible.\n  // The primary use for this function is to randomize the order of choices for a select question. The documentation on select widgets describes how this is done in XLSForm.\n  // randomize() can only be used in a context where a nodeset is accepted. Note that questions of type calculate cannot reference a nodeset.\n  randomize(_nodeset: Value, _seed: Value): ODKNodeValue {\n    throw new FunctionNotImplementedError(\"randomize\");\n  },\n\n  // Without argument, returns a random RFC 4122 version 4 compliant UUID.\n  // With an argument it returns a random GUID of specified length.\n  uuid(_length: Value): string {\n    throw new FunctionNotImplementedError(\"uuid\");\n  },\n\n  // Returns True if the number of response s that are exactly the string \"yes\" is between min and max, inclusive.\n  // Set min or max to -1 to make the argument not applicable.\n  checklist(_min: Value, _max: Value, ..._responses: Value[]): boolean {\n    throw new FunctionNotImplementedError(\"checklist\");\n  },\n\n  // Returns True if the sum of the weight s of each response that is exactly the string \"yes\" is between min and max, inclusive.\n  // Set min or max to -1 to make the argument not\n  \"weighted-checklist\"(\n    _min: Value,\n    _max: Value,\n    _response: Value,\n    ..._weightResponsePairs: Value[]\n  ): boolean {\n    throw new FunctionNotImplementedError(\"weighted-checklist\");\n  },\n};\n\nexport default functions;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ordinalize } from \"inflection\";\nimport { EvaluationError } from \"../../../types/Errors\";\nimport { ODKNode } from \"../../../types/ODKNode\";\nimport ODKNodeValue from \"../../../types/ODKNodeValue\";\nimport {\n  CallExpression,\n  Expression,\n  NameExpression,\n  OperatorExpression,\n} from \"../pratt-parser-base\";\nimport LiteralExpression from \"../pratt-parser-base/expressions/LiteralExpression\";\nimport SelectorExpression from \"../pratt-parser-base/expressions/SelectorExpression\";\nimport evaluateNodeColumn from \"./evaluateNodeColumn\";\nimport ODKFormulaEvaluationContext from \"./ODKFormulaEvaluationContext\";\nimport functions from \"./ODKFormulaFunctions\";\nimport {\n  findNodeByNameInCurrentAndAncestorScopes,\n  findNodeByNameInsideScope,\n  findNodeByPathRelativeToScope,\n} from \"./XPath\";\n\n/**\n * Evaluates a parsed expression / AST, returning the end result as JavaScript value.\n *\n * @param expression The parsed expression / AST to evaluate.\n * @param context the global context in which the formula should be evaluated. This context contains\n *   information about the whole survey - The evaluation needs this to known the values of\n *   references to other survey nodes (e.g. when you use a variable like `${other-field}` in the\n *   formula)\n * @param scope\n *   For resolving XPaths and relative node references correctly, the evaluation process needs to\n *   know the node in which the evaluation should begin. Use this parameter to supply the node that\n *   contained the formula string.\n */\nexport default function evaluateExpression(\n  expression: Expression,\n  context: ODKFormulaEvaluationContext,\n  scope: Readonly<ODKNode>\n): unknown {\n  let result: unknown;\n\n  if (context.stackDepth > 10000) {\n    throw new EvaluationError(\n      `Stack overflow while evaluating \\`${JSON.stringify(expression)}\\``,\n      \"stackOverflow\",\n      expression,\n      context,\n      scope\n    );\n  }\n\n  const deeperContext = {\n    ...context,\n    stackDepth: context.stackDepth + 1,\n  };\n\n  // XXX: This could be caseless, for example by having Expression subclasses that have their own evaluator\n  if (expression instanceof LiteralExpression) {\n    result = evaluateLiteralExpression(expression);\n  } else if (expression instanceof NameExpression) {\n    result = evaluateNameExpression(expression, deeperContext, scope);\n  } else if (expression instanceof SelectorExpression) {\n    result = evaluateSelectorExpression(expression, deeperContext, scope);\n  } else if (expression instanceof OperatorExpression) {\n    result = evaluateOperatorExpression(expression, deeperContext, scope);\n  } else if (expression instanceof CallExpression) {\n    result = evaluateCallExpression(expression, deeperContext, scope);\n  } else {\n    throw new EvaluationError(\n      `Don’t know how to evaluate \\`${expression}\\`.`,\n      \"unsupportedExpressionType\",\n      expression,\n      deeperContext,\n      scope\n    );\n  }\n\n  context.stackDepth -= 1;\n\n  return result;\n}\n\nfunction evaluateLiteralExpression(\n  expression: LiteralExpression<ODKNodeValue>\n): ODKNodeValue {\n  return expression.value;\n}\n\nfunction stringFromStringOrExpression(n: string | Expression) {\n  if (typeof n === \"string\") {\n    return n;\n  }\n  let string = \"\";\n  n.print((str: string) => (string += str));\n  return string;\n}\n\nfunction evaluateCallExpression(\n  expression: CallExpression,\n  context: ODKFormulaEvaluationContext,\n  scope: ODKNode\n): unknown {\n  const nameExpressionOrString =\n    expression.fn instanceof NameExpression\n      ? expression.fn\n      : evaluateExpression(expression.fn, context, scope);\n  let fn: unknown = undefined;\n  if (nameExpressionOrString instanceof NameExpression) {\n    fn = evaluateNameExpression(\n      nameExpressionOrString,\n      context,\n      scope,\n      true,\n      functions\n    );\n  } else if (typeof nameExpressionOrString === \"string\") {\n    fn = functions[nameExpressionOrString];\n  } else {\n    throw new EvaluationError(\n      `Can’t call a function without knowing its name — the name must be either defined as string, return a name string or a function reference.`,\n      \"functionNotFound\",\n      expression,\n      context,\n      scope\n    );\n  }\n\n  if (!fn) {\n    throw new EvaluationError(\n      `Could not find a function named \\`${stringFromStringOrExpression(\n        nameExpressionOrString\n      )}\\`.`,\n      \"functionNotFound\",\n      expression,\n      context,\n      scope\n    );\n  }\n\n  const evaluatedArgs = expression.args.map((arg, i) => {\n    try {\n      return evaluateExpression(arg, context, scope);\n    } catch (e) {\n      const number = ordinalize(String(i + 1));\n\n      throw new EvaluationError(\n        `Error in ${number} argument in \\`${stringFromStringOrExpression(\n          nameExpressionOrString\n        )}() function call\\`: ${e.message}`,\n        \"functionEvalError\",\n        expression,\n        context,\n        scope,\n        e\n      );\n    }\n  });\n  if (typeof fn !== \"function\") {\n    throw new EvaluationError(\n      `Found name \\`${fn}\\`, but it is not a function.`,\n      \"functionNotFound\",\n      expression,\n      context,\n      scope\n    );\n  }\n\n  try {\n    const result = fn.apply(context, evaluatedArgs);\n    return result;\n  } catch (e) {\n    let string = \"\";\n    expression.print((s) => (string += s));\n    throw new EvaluationError(\n      `Error while calling \\`${string}\\`: ${e.message}`,\n      \"functionEvalError\",\n      expression,\n      context,\n      scope,\n      e\n    );\n  }\n}\n\nfunction assertBoolean(\n  value: unknown,\n  valueBeforeCasting: unknown,\n  expression: Expression | undefined,\n  context: ODKFormulaEvaluationContext,\n  scope: ODKNode\n): asserts value is boolean {\n  if (typeof value !== \"boolean\") {\n    throw new EvaluationError(\n      `Found operand \\`${JSON.stringify(\n        valueBeforeCasting\n      )}\\` that is no boolean value. Boolean operators only work with values that are \\`true\\` or \\`false\\`.`,\n      \"invalidOperandType\",\n      expression,\n      context,\n      scope\n    );\n  }\n}\n\nfunction evaluateOperatorExpression(\n  expression: OperatorExpression,\n  context: ODKFormulaEvaluationContext,\n  scope: ODKNode\n): ODKNodeValue {\n  const leftBeforeCasting = evaluateExpression(expression.left, context, scope);\n  const rightBeforeCasting = evaluateExpression(\n    expression.right,\n    context,\n    scope\n  );\n\n  const operator = expression.operatorToken.text;\n\n  if (operator === \"=\") {\n    // eslint-disable-next-line eqeqeq\n    return leftBeforeCasting == rightBeforeCasting;\n  }\n  if (operator === \"!=\") {\n    // eslint-disable-next-line eqeqeq\n    return leftBeforeCasting != rightBeforeCasting;\n  }\n\n  let left;\n  let right;\n  if (operator === \"and\" || operator === \"or\") {\n    if (typeof leftBeforeCasting === \"boolean\") {\n      left = leftBeforeCasting;\n    }\n    if (typeof leftBeforeCasting === \"number\") {\n      left = Boolean(leftBeforeCasting);\n    }\n\n    if (typeof rightBeforeCasting === \"boolean\") {\n      right = rightBeforeCasting;\n    }\n    if (typeof rightBeforeCasting === \"number\") {\n      right = Boolean(rightBeforeCasting);\n    }\n\n    assertBoolean(left, leftBeforeCasting, expression, context, scope);\n    assertBoolean(right, rightBeforeCasting, expression, context, scope);\n\n    switch (operator) {\n      case \"or\":\n        return left || right;\n      case \"and\":\n        return left && right;\n    }\n  }\n\n  if (typeof leftBeforeCasting === \"number\") {\n    left = leftBeforeCasting;\n  }\n  if (typeof leftBeforeCasting === \"string\") {\n    left = parseFloat(leftBeforeCasting);\n  }\n\n  if (typeof rightBeforeCasting === \"number\") {\n    right = rightBeforeCasting;\n  }\n  if (typeof rightBeforeCasting === \"string\") {\n    right = parseFloat(rightBeforeCasting);\n  }\n\n  if (typeof left !== \"number\") {\n    throw new EvaluationError(\n      `Left operand is \\`${JSON.stringify(\n        leftBeforeCasting\n      )}\\`, which is no number. Arithmetic and relative comparison operators only work with operands that are numeric.`,\n      \"invalidOperandType\",\n      expression,\n      context,\n      scope\n    );\n  }\n  if (typeof right !== \"number\") {\n    throw new EvaluationError(\n      `Right operand is \\`${JSON.stringify(\n        rightBeforeCasting\n      )}\\`, which no number. Arithmetic and relative comparison operators only work with operands that are numeric.`,\n      \"invalidOperandType\",\n      expression,\n      context,\n      scope\n    );\n  }\n\n  switch (operator) {\n    case \"+\":\n      return left + right;\n    case \"-\":\n      return left - right;\n    case \"*\":\n      return left * right;\n    case \"div\":\n      return left / right;\n    case \"mod\":\n      return left % right;\n    case \">\":\n      return left > right;\n    case \">=\":\n      return left >= right;\n    case \"<\":\n      return left < right;\n    case \"<=\":\n      return left <= right;\n    default:\n      throw new EvaluationError(\n        `The \\`${operator}\\` operator is not supported`,\n        \"unsupportedOperator\",\n        expression,\n        context,\n        scope\n      );\n  }\n}\n\nfunction evaluateNameExpression(\n  expression: NameExpression,\n  context: ODKFormulaEvaluationContext,\n  scope: ODKNode,\n  allowUndefinedNames = false,\n  literalBag: Record<string, unknown> = context.knownLiteralsWithoutDollarSign\n): unknown {\n  if (expression.text.startsWith(\"$\")) {\n    const nodeOrNodes =\n      findNodeByNameInCurrentAndAncestorScopes(\n        expression.name,\n        context,\n        scope\n      ) || findNodeByNameInsideScope(expression.name, context);\n    if (!nodeOrNodes) {\n      throw new EvaluationError(\n        `Could not find a node with name \\`${expression.name}\\`.`,\n        \"nodeNotFound\",\n        expression,\n        context,\n        scope\n      );\n    }\n    if (nodeOrNodes instanceof Array) {\n      return nodeOrNodes.map((node) =>\n        evaluateNodeColumn(\n          node,\n          context,\n          \"calculation\",\n          context.nodesToAnswers.get(node)\n        )\n      );\n    }\n    const evaluationResult = evaluateNodeColumn(\n      nodeOrNodes,\n      context,\n      \"calculation\",\n      context.nodesToAnswers.get(nodeOrNodes)\n    );\n    if (evaluationResult.error) {\n      throw new EvaluationError(\n        `Error in expression ${expression.text}.`,\n        \"unsupportedNameExpression\",\n        expression,\n        context,\n        scope,\n        evaluationResult.error instanceof EvaluationError\n          ? evaluationResult.error\n          : undefined\n      );\n    }\n    return evaluationResult.result;\n  } else if (expression.text === expression.name) {\n    const value = context.evaluateNonDollarNameFn\n      ? context.evaluateNonDollarNameFn({ expression, context, scope })\n      : literalBag[expression.name];\n    if (value !== undefined || allowUndefinedNames) {\n      return value;\n    }\n    throw new EvaluationError(\n      `Unknown name \\`${expression.text}\\` — did you mean to use \\`\\${${expression.name}}\\` instead of \\`${expression.name}\\`?`,\n      \"unknownNameWithoutDollarSign\",\n      expression,\n      context,\n      scope\n    );\n  }\n  throw new EvaluationError(\n    `Don’t know how to evaluate ${expression}.`,\n    \"unsupportedNameExpression\",\n    expression,\n    context,\n    scope\n  );\n}\n\nexport function evaluateSelectorExpression(\n  expression: SelectorExpression<string[]>,\n  context: ODKFormulaEvaluationContext,\n  scope: ODKNode\n): unknown {\n  const selector = expression.selector;\n  const node = findNodeByPathRelativeToScope(selector, context, scope);\n  if (node instanceof Array) {\n    return node.map((childNode) =>\n      evaluateNodeColumn(\n        childNode,\n        context,\n        \"calculation\",\n        context.nodesToAnswers.get(childNode)\n      )\n    );\n  }\n  return (\n    node &&\n    evaluateNodeColumn(\n      node,\n      context,\n      \"calculation\",\n      context.nodesToAnswers.get(node)\n    )\n  );\n}\n","import ODKFormulaEvaluationContext from \"./ODKFormulaEvaluationContext\";\nimport evaluateExpression from \"./evaluateExpression\";\nimport { ODKNode } from \"../../../types/ODKNode\";\nimport { ODKFormulaError, SemanticError } from \"../../../types/Errors\";\nimport ODKFormulaEvaluationResult from \"./ODKFormulaEvaluationResult\";\nimport { Expression } from \"../pratt-parser-base\";\nimport ODKFormulaLexer from \"../odk-formula-parser/ODKFormulaLexer\";\nimport ODKFormulaParser from \"../odk-formula-parser/ODKFormulaParser\";\n\nfunction assertExpressionAfterEvaluation(\n  expression: unknown\n): asserts expression is Expression {\n  if (!expression) {\n    throw new SemanticError(\n      \"Formula was not evaluated to an expression, but no error was encountered. This means an error handler is missing for this case.\"\n    );\n  }\n}\n\n/**\n * Evaluates a formula string.\n *\n * @returns The resulting value, the AST, and detailed error information if the evaluation fails.\n *\n * @param formula the formula string to evaluate, e.g. '1 + 1'\n * @param context the global context in which the formula should be evaluated. This context contains\n *   information about the whole survey - The evaluation needs this to known the values of\n *   references to other survey nodes (e.g. when you use a variable like `${other-field}` in the\n *   formula)\n * @param scope\n *   For resolving XPaths and relative node references correctly, the evaluation process needs to\n *   know the node in which the evaluation should begin. Use this parameter to supply the node that\n *   contained the formula string.\n */\nexport default function evaluateODKFormula(\n  formula: string,\n  context: ODKFormulaEvaluationContext,\n  scope: ODKNode = context.survey\n): ODKFormulaEvaluationResult {\n  let error;\n  let result;\n  let expression;\n  const lexer = new ODKFormulaLexer(formula);\n  const parser = new ODKFormulaParser({ tokens: lexer });\n  try {\n    expression = parser.parseExpression();\n\n    if (!expression) {\n      throw new Error(\n        `Parsing given formula \\`${formula}\\` returned an empty expression. This should not happen, it means the underlying code should have thrown an exception earlier.`\n      );\n    }\n    result = evaluateExpression(expression, context, scope);\n    assertExpressionAfterEvaluation(expression);\n    return {\n      parser,\n      state: \"success\",\n      expression,\n      result,\n      error: undefined,\n    };\n  } catch (e) {\n    if (e instanceof ODKFormulaError) {\n      error = e;\n    } else {\n      throw e;\n    }\n  }\n\n  return {\n    parser,\n    state: \"error\",\n    expression,\n    error,\n    result: null,\n  };\n}\n","import { EvaluationError } from \"../../../types/Errors\";\nimport { EvaluatableColumnName, ODKNode } from \"../../../types/ODKNode\";\nimport LiteralExpression from \"../pratt-parser-base/expressions/LiteralExpression\";\nimport evaluateODKFormula from \"./evaluateODKFormula\";\nimport ODKFormulaEvaluationContext from \"./ODKFormulaEvaluationContext\";\nimport ODKFormulaEvaluationResult from \"./ODKFormulaEvaluationResult\";\n\n/**\n * Evaluates the JavaScript value of a survey node, returning either a user answer or a calculated\n * formula result.\n *\n * @param node The node containing the survey answer / calculation to evaluate.\n * @param context the global context in which the node's result should be evaluated. This context\n *   contains information about the whole survey - The evaluation needs this to known the values of\n *   references to other survey nodes (e.g. when you use a variable like `${other-field}` in the\n *   formula)\n */\nexport default function evaluateNodeColumn(\n  node: ODKNode,\n  context: ODKFormulaEvaluationContext,\n  columnName: EvaluatableColumnName,\n  fallback: unknown\n): ODKFormulaEvaluationResult {\n  const originalFormula = node.row?.[columnName];\n  if (originalFormula !== undefined && typeof originalFormula !== \"string\") {\n    debugger;\n    throw new Error(\"Sorry, multilingual formulas are not supported yet.\");\n  }\n  const formula = originalFormula?.trim();\n  if (formula === \"\" || formula === undefined) {\n    const fallbackValue = fallback;\n    const isMultiSelectResult = node.type === \"select_multiple\";\n    const value =\n      isMultiSelectResult && fallbackValue instanceof Array\n        ? fallbackValue.join(\" \")\n        : fallbackValue;\n    return {\n      state: \"success\",\n      result: value,\n      expression: new LiteralExpression(\n        [],\n        value instanceof Array ? \"array\" : typeof value,\n        value\n      ),\n      error: undefined,\n    };\n  }\n  const row = node.row;\n  let evaluationResult: ODKFormulaEvaluationResult | undefined = undefined;\n  try {\n    evaluationResult = evaluateODKFormula(formula, context, node);\n  } catch (error) {\n    debugger;\n    throw new EvaluationError(\n      `Error in \\`${columnName}\\` column of the ‘${row?.name}’ question (row #${node.rowIndex}). It contains the formula \\`${row?.[columnName]}\\`. Please ensure the formula is valid. The error was: ${error}`,\n      \"calculationError\",\n      evaluationResult?.expression,\n      context,\n      node,\n      error\n    );\n  }\n  return evaluationResult;\n}\n","import {\n  EvaluatableColumnName,\n  evaluatableColumnNames,\n  ODKNode,\n} from \"../types/ODKNode\";\nimport { XLSForm } from \"../types/XLSForm\";\nimport evaluateNodeColumn from \"./odk-formulas/evaluation/evaluateNodeColumn\";\nimport ODKFormulaEvaluationContext from \"./odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport ODKFormulaEvaluationResult from \"./odk-formulas/evaluation/ODKFormulaEvaluationResult\";\n\nexport function evaluateNodeAndChildren(\n  node: ODKNode,\n  context: ODKFormulaEvaluationContext,\n  onEval: (\n    node: ODKNode,\n    columnName: EvaluatableColumnName,\n    result: ODKFormulaEvaluationResult\n  ) => void\n): void {\n  const fallbacks: Record<EvaluatableColumnName, unknown> = {\n    relevant: true,\n    calculation: context.nodesToAnswers.get(node),\n    required: false,\n    readonly: false,\n    constraint: true,\n  };\n\n  evaluatableColumnNames.forEach((columnName) => {\n    onEval(\n      node,\n      columnName,\n      evaluateNodeColumn(node, context, columnName, fallbacks[columnName])\n    );\n  });\n  node.children?.forEach((child) =>\n    evaluateNodeAndChildren(child, context, onEval)\n  );\n}\n\nexport default function getEvaluatedXLSFormResult(\n  xlsForm: XLSForm,\n  context: ODKFormulaEvaluationContext\n) {\n  evaluateNodeAndChildren(\n    xlsForm.rootSurveyGroup,\n    context,\n    (node, columnName, result) => {\n      // console.log(\"Eval\", { name: node.row.name, columnName, result });\n      let columnNamesToResults = context.evaluationResults.get(node);\n      if (!columnNamesToResults) {\n        columnNamesToResults = new Map();\n        context.evaluationResults.set(node, columnNamesToResults);\n      }\n      columnNamesToResults?.set(columnName, result);\n    }\n  );\n}\n","import { Code } from \"@blueprintjs/core\";\nimport produce from \"immer\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { FieldProps } from \"../survey/FieldProps\";\nimport { AppToaster } from \"../toaster\";\nimport {\n  ChoicesWorksheet,\n  loadXLSFormFromRows,\n  SettingsWorksheet,\n  SurveyWorksheet,\n  WorksheetName,\n  XLSForm,\n} from \"../xlsform-simple-schema\";\nimport getEvaluatedXLSFormResult from \"../xlsform-simple-schema/functions/evaluateNodeAndChildren\";\nimport ODKFormulaEvaluationContext, {\n  getEmptyContext,\n  knownLiteralsWithoutDollarSign,\n} from \"../xlsform-simple-schema/functions/odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport { getNodeIndexPath } from \"../xlsform-simple-schema/functions/odk-formulas/evaluation/XPath\";\nimport patchXLSFormCell from \"../xlsform-simple-schema/functions/patchXLSFormCell\";\nimport { ODKNode } from \"../xlsform-simple-schema/types/ODKNode\";\nimport getLastRowIndexOfGroup from \"./getLastRowIndexOfGroup\";\n\nexport default function useChangeHooks({\n  xlsForm,\n  language,\n  setXLSForm,\n}: {\n  xlsForm?: XLSForm;\n  language?: string;\n  setXLSForm: (value: React.SetStateAction<XLSForm | undefined>) => void;\n}) {\n  const [context, setContext] = useState<ODKFormulaEvaluationContext>();\n\n  useEffect(() => {\n    if (!xlsForm) {\n      setContext(undefined);\n      return;\n    }\n\n    setContext((context) => {\n      if (context && context.survey === xlsForm.rootSurveyGroup) {\n        console.log(\n          \"Context exists already and survey is the same, keeping context.\"\n        );\n        return context;\n      }\n\n      const newContext = getEmptyContext(xlsForm.rootSurveyGroup);\n      newContext.nodesToAnswers = new Map();\n      newContext.survey = xlsForm.rootSurveyGroup;\n      newContext.stackDepth = 0;\n      newContext.knownLiteralsWithoutDollarSign = knownLiteralsWithoutDollarSign;\n      getEvaluatedXLSFormResult(xlsForm, newContext);\n      console.log(\"Setting up new evaluation context\", newContext);\n      return newContext;\n    });\n  }, [xlsForm, xlsForm?.rootSurveyGroup]);\n\n  const onChangeAnswer = React.useCallback(\n    (value: unknown, fieldProps: FieldProps) => {\n      AppToaster.clear();\n      AppToaster.show({\n        message: (\n          <>\n            {fieldProps.schemaKey} → <Code>{JSON.stringify(value)}</Code>\n          </>\n        ),\n      });\n      if (xlsForm && context) {\n        setContext((context) => {\n          if (!context) {\n            return;\n          }\n          const nodesToAnswers = new Map<ODKNode, unknown>(\n            context.nodesToAnswers.entries()\n          );\n          nodesToAnswers.set(fieldProps.node, value);\n          const newContext: ODKFormulaEvaluationContext = {\n            ...context,\n            nodesToAnswers,\n          };\n          getEvaluatedXLSFormResult(xlsForm, newContext);\n          return newContext;\n        });\n      }\n    },\n    [context, xlsForm]\n  );\n\n  const onChangeCell = React.useCallback(\n    (\n      worksheetName: WorksheetName,\n      rowIndex: number,\n      columnName: string,\n      value: unknown,\n      node?: ODKNode\n    ) => {\n      if (!xlsForm || !context || !language) {\n        return;\n      }\n      setXLSForm(\n        patchXLSFormCell({\n          worksheetName,\n          xlsForm,\n          node,\n          rowIndex,\n          columnName,\n          language,\n          value,\n          context,\n        })\n      );\n    },\n    [xlsForm, context, language, setXLSForm]\n  );\n\n  const onSpliceRows = React.useCallback(\n    (\n      worksheetName: WorksheetName,\n      rowIndex: number,\n      rowCount: number,\n      ...rowsToAdd: any[]\n    ) => {\n      if (!xlsForm || !context) {\n        return;\n      }\n\n      setXLSForm((xlsForm: XLSForm | undefined) => {\n        const surveyWorksheet = xlsForm?.worksheets.survey;\n        if (!surveyWorksheet) {\n          throw new Error(\"No survey worksheet defined.\");\n        }\n        const worksheet = xlsForm?.worksheets[worksheetName];\n        if (!worksheet) {\n          return xlsForm;\n        }\n        const newRows = [...worksheet?.rows];\n        newRows.splice(rowIndex, rowCount, ...rowsToAdd);\n        const newWorksheet = { ...worksheet, rows: newRows };\n        return loadXLSFormFromRows(\n          worksheetName === \"survey\"\n            ? (newWorksheet as SurveyWorksheet)\n            : surveyWorksheet,\n          xlsForm?.worksheets.settings?.rows[0]?.default_language ||\n            \"English (en)\",\n          worksheetName === \"settings\"\n            ? (newWorksheet as SettingsWorksheet)\n            : xlsForm?.worksheets.settings,\n          worksheetName === \"choices\"\n            ? (newWorksheet as ChoicesWorksheet)\n            : xlsForm?.worksheets.choices\n        );\n      });\n\n      // setXLSForm(\n      //   produce(xlsForm, (draft) => {\n      //     const worksheet = draft.worksheets[worksheetName];\n      //     worksheet?.rows.splice(rowIndex, rowCount, ...rowsToAdd);\n      //     if (worksheetName === \"choices\") {\n      //       draft.choicesByName = draft.worksheets.choices\n      //         ? loadChoices(draft.worksheets.choices)\n      //         : {};\n      //     }\n      //     // TODO: Regenerate rowIndex values for all nodes\n      //   })\n      // );\n    },\n    [context, setXLSForm, xlsForm]\n  );\n\n  const onRemoveRowAndChildren = React.useCallback(\n    (node: ODKNode) => {\n      if (!xlsForm || !context) {\n        return;\n      }\n      const indexPath = getNodeIndexPath(node, context);\n      if (!indexPath) {\n        throw new Error(\n          \"Can’t remove a node that isn’t reachable from survey root. Please ensure the node is actually part of the survey.\"\n        );\n      }\n      const hasChildren = node.children.length > 0;\n      const numberOfRowsToRemove = hasChildren\n        ? getLastRowIndexOfGroup(xlsForm, node) - node.rowIndex + 1\n        : 1;\n      onSpliceRows(\"survey\", node.rowIndex, numberOfRowsToRemove);\n    },\n    [context, onSpliceRows, xlsForm]\n  );\n\n  const onMoveNode = React.useCallback(\n    (options: {\n      sourcePath: string;\n      sourceNode: ODKNode;\n      destinationNode: ODKNode;\n      position: \"before\" | \"after\" | \"inside\";\n    }) => {\n      if (!xlsForm || !context || !language) {\n        return;\n      }\n      setXLSForm(\n        produce(xlsForm, (draft) => {\n          // set(draft, [\"flatNodes\", rowIndex, \"row\", ...valuePathInRow], value);\n          // set(\n          //   draft,\n          //   [\"worksheets\", worksheetName, \"rows\", rowIndex, ...valuePathInRow],\n          //   value\n          // );\n          // if (indexPath) {\n          //   set(\n          //     draft,\n          //     [\n          //       \"rootSurveyGroup\",\n          //       ...indexPath.map((i) => [\"children\", i]).flat(),\n          //       \"row\",\n          //       ...valuePathInRow,\n          //     ],\n          //     value\n          //   );\n          // }\n        })\n      );\n    },\n    []\n  );\n\n  return {\n    context,\n    setContext,\n    onChangeAnswer,\n    onChangeCell,\n    onMoveNode,\n    onSpliceRows,\n    onRemoveRowAndChildren,\n  };\n}\n","import produce from \"immer\";\nimport { set } from \"lodash\";\nimport { ODKNode } from \"../types/ODKNode\";\nimport { WorksheetName, XLSForm } from \"../types/XLSForm\";\nimport { localizableColumnNames } from \"./loadSurveyFromXLSX\";\nimport ODKFormulaEvaluationContext from \"./odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport { getNodeIndexPath } from \"./odk-formulas/evaluation/XPath\";\n\nexport default function patchXLSFormCell({\n  worksheetName,\n  xlsForm,\n  rowIndex,\n  node,\n  context,\n  language,\n  columnName,\n  value,\n}: {\n  worksheetName: WorksheetName;\n  xlsForm: XLSForm;\n  node?: ODKNode;\n  rowIndex: number;\n  context: ODKFormulaEvaluationContext;\n  language: string;\n  columnName: string;\n  value: unknown;\n}) {\n  const indexPath = node && getNodeIndexPath(node, context);\n  const valuePathInRow = localizableColumnNames.includes(columnName)\n    ? [columnName, language]\n    : [columnName];\n\n  const changeIsInSurveyWorksheet = worksheetName === \"survey\";\n\n  return produce(xlsForm, (draft) => {\n    set(\n      draft,\n      [\"worksheets\", worksheetName, \"rows\", rowIndex, ...valuePathInRow],\n      value\n    );\n\n    if (changeIsInSurveyWorksheet) {\n      set(draft, [\"flatNodes\", rowIndex, \"row\", ...valuePathInRow], value);\n      if (indexPath) {\n        set(\n          draft,\n          [\n            \"rootSurveyGroup\",\n            ...indexPath.map((i) => [\"children\", i]).flat(),\n            \"row\",\n            ...valuePathInRow,\n          ],\n          value\n        );\n      }\n    }\n  });\n}\n","import React from \"react\";\nimport { Alignment, Button, ButtonGroup, Navbar } from \"@blueprintjs/core\";\nimport { WorksheetName } from \"./xlsform-simple-schema\";\n\nexport function SheetTabs({\n  setWorksheetName,\n  worksheetName,\n}: {\n  setWorksheetName: React.Dispatch<React.SetStateAction<WorksheetName>>;\n  worksheetName: string;\n}) {\n  return (\n    <Navbar.Group align={Alignment.LEFT}>\n      <ButtonGroup>\n        <Button\n          onClick={() => setWorksheetName(\"survey\")}\n          active={worksheetName === \"survey\"}\n        >\n          Survey\n        </Button>\n        <Button\n          onClick={() => setWorksheetName(\"choices\")}\n          active={worksheetName === \"choices\"}\n        >\n          Choices\n        </Button>\n        <Button\n          onClick={() => setWorksheetName(\"settings\")}\n          active={worksheetName === \"settings\"}\n        >\n          Settings\n        </Button>\n      </ButtonGroup>\n    </Navbar.Group>\n  );\n}\n","import { HTMLDivProps } from '@blueprintjs/core';\nimport * as React from 'react';\n\nexport default function PaddedContainer(props: HTMLDivProps & {\n    horizontal: number,\n    vertical: number,\n}) {\n    return <div {...{props}} style={{ margin: `${props.horizontal}rem ${props.vertical}rem`, ...props.style}}>\n        {props.children}\n    </div>;\n}","import { Callout } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { FieldProps } from \"../FieldProps\";\n\nexport default function ObjectArrayField(props: FieldProps) {\n  return (\n    <Callout intent={\"warning\"}>\n      <h4>Object arrays are not implemented yet.</h4>\n    </Callout>\n  );\n}\n","import {\n  Callout,\n  ControlGroup,\n  EditableText,\n  H1,\n  H2,\n  H3,\n  H4,\n  H5,\n} from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport { getNodeAbsolutePath } from \"../../xlsform-simple-schema/functions/odk-formulas/evaluation/XPath\";\nimport { isNodeRelevant } from \"../../xlsform-simple-schema/types/ODKNode\";\nimport DetailsPopover from \"../DetailsPopover/DetailsPopover\";\nimport { FieldProps } from \"../FieldProps\";\nimport { FieldSetForKey } from \"../FieldSetForKey\";\n\nexport default function ObjectField(props: FieldProps) {\n  const { onChangeCell } = React.useContext(ODKSurveyContext);\n  const { schema, schemaKey, node } = props;\n  const subKeys = schema.objectKeys(schemaKey);\n  const context = React.useContext(ODKSurveyContext);\n  const { debug } = context;\n\n  const label =\n    node === context.context?.survey\n      ? context.xlsForm?.worksheets.settings?.rows[0].form_title\n      : schema.get(schemaKey, \"label\");\n  const path =\n    context.context && getNodeAbsolutePath(node, context.context).join(\"/\");\n\n  const onChangeSurveyName = React.useCallback(\n    (text: string) => {\n      if (text === label || (label === undefined && text === \"\")) {\n        return;\n      }\n      onChangeCell(\"settings\", 0, \"form_title\", text);\n    },\n    [onChangeCell, label]\n  );\n\n  const onChangeLabel = React.useCallback(\n    (text: string) => {\n      if (text === label || (label === undefined && text === \"\")) {\n        return;\n      }\n      onChangeCell(\"survey\", node.rowIndex, \"label\", text, node);\n    },\n    [node, onChangeCell, label]\n  );\n\n  const labelInput =\n    node === context.context?.survey ? (\n      <EditableText\n        onChange={onChangeSurveyName}\n        onConfirm={onChangeSurveyName}\n        placeholder={`Enter a survey title…`}\n        value={label}\n        minWidth={100}\n      />\n    ) : (\n      <EditableText\n        multiline={true}\n        onChange={onChangeLabel}\n        onConfirm={onChangeLabel}\n        placeholder={`Enter a title for \\`${node.row.name}\\`…`}\n        value={label}\n        minWidth={100}\n      />\n    );\n\n  const HeadingClass = [H1, H2, H3, H4, H5][node.indentationLevel] || H5;\n\n  const hintString =\n    typeof context.language === \"string\" && node.row.hint?.[context.language];\n\n  const isRelevant = isNodeRelevant(node, context.context);\n  if (!isRelevant && !debug) {\n    return null;\n  }\n  return (\n    <ControlGroup\n      vertical={true}\n      style={{ padding: `${6 / (node.indentationLevel + 1)}rem 0` }}\n    >\n      <ControlGroup\n        fill={true}\n        style={{\n          alignItems: \"baseline\",\n        }}\n      >\n        <HeadingClass\n          style={{\n            flex: 1,\n          }}\n          id={path}\n        >\n          {debug ? <>{labelInput}</> : label}\n        </HeadingClass>\n        {debug && node !== context.context?.survey && (\n          <DetailsPopover {...{ ...props }} editable={true} />\n        )}\n      </ControlGroup>\n\n      {subKeys.map((subkey) => (\n        <FieldSetForKey\n          key={subkey}\n          schemaKey={[schemaKey, subkey].join(\".\")}\n          relevant={props.relevant}\n          readonly={props.readonly}\n        />\n      ))}\n\n      {hintString && <Callout intent={\"primary\"}>{hintString}</Callout>}\n    </ControlGroup>\n  );\n}\n","export const internalFields = [\n  undefined,\n  \"\",\n  \"start\",\n  \"end\",\n  \"today\",\n  \"username\",\n  \"simserial\",\n  \"subscriberid\",\n  \"deviceid\",\n  \"phonenumber\",\n  \"calculate\",\n];\n","import { Callout, Checkbox, Code } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { FieldProps } from \"../FieldProps\";\n\ntype Props = FieldProps & {\n  onInputChange: (event: React.FormEvent<HTMLInputElement>) => void;\n  labelElement: React.ReactNode;\n  value: unknown;\n  defaultValue: unknown;\n};\n\nexport default function BooleanField(props: Props) {\n  const { value, labelElement, relevant, readonly } = props;\n\n  //   const context = React.useContext(ODKSurveyContext);\n  if (value !== undefined && typeof value !== \"boolean\") {\n    return (\n      <Callout intent=\"warning\">\n        <h4>\n          Value must be a <Code>boolean</Code> for this field to work\n        </h4>\n      </Callout>\n    );\n  }\n  return (\n    <Checkbox\n      large={true}\n      disabled={relevant === false || readonly}\n      labelElement={labelElement}\n      onChange={props.onInputChange}\n      defaultChecked={\n        typeof props.defaultValue === \"boolean\" ? props.defaultValue : undefined\n      }\n    />\n  );\n}\n","import { Callout, Checkbox, Code, ControlGroup } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport { FieldConfigurationButton } from \"../DetailsPopover/FieldConfigurationButton\";\nimport { FieldProps } from \"../FieldProps\";\n\ntype Props = FieldProps & {\n  value: unknown;\n  allowedValues: string[];\n};\n\nexport default function CheckboxGroupField(props: Props) {\n  const { value, node, relevant, readonly } = props;\n  const context = React.useContext(ODKSurveyContext);\n  const { language, onChangeAnswer } = context;\n\n  const valueIsInvalid =\n    value !== undefined &&\n    typeof value !== \"string\" &&\n    (!(value instanceof Array) ||\n      value.find((element) => typeof element !== \"string\"));\n\n  const choices = React.useMemo<Set<string>>(() => {\n    if (typeof value === \"string\") {\n      return new Set<string>(value === \"\" ? [] : value?.split(\" \"));\n    }\n    if (value instanceof Array || value instanceof Set) {\n      return new Set<string>(value);\n    }\n    return new Set<string>();\n  }, [value]);\n\n  const onChange = React.useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const choice = event.currentTarget.name;\n      const newChoices = new Set(choices);\n      if (event.currentTarget.checked) {\n        newChoices.add(choice);\n      } else {\n        newChoices.delete(choice);\n      }\n      onChangeAnswer(Array.from(newChoices), props);\n    },\n    [props, onChangeAnswer, choices]\n  );\n\n  if (typeof language !== \"string\") {\n    return null;\n  }\n\n  if (valueIsInvalid) {\n    return (\n      <Callout intent=\"warning\">\n        <h4>\n          Value must be a <Code>string</Code> or Array of <Code>string</Code>s\n          for this field to work.\n        </h4>\n      </Callout>\n    );\n  }\n\n  if (context.debug && node.typeParameters.length === 0) {\n    return (\n      <Callout intent=\"warning\" title=\"No choice list set.\">\n        <FieldConfigurationButton node={node} showType={false} />\n      </Callout>\n    );\n  }\n\n  return (\n    <ControlGroup vertical={true}>\n      {node.typeParameters.map((choiceListName) => {\n        const choiceList = context.xlsForm?.choicesByName[choiceListName];\n        if (!choiceList) {\n          return null;\n        }\n        return Object.keys(choiceList).map((value) => {\n          const choiceRow = choiceList[value];\n\n          const definedLabel = choiceRow?.label?.[language];\n          const shownLabel =\n            definedLabel === \"undefined\" ? choiceRow?.name : definedLabel;\n          return (\n            <Checkbox\n              disabled={relevant === false || readonly}\n              label={shownLabel}\n              checked={typeof value === \"string\" && choices.has(value)}\n              name={value}\n              inline={true}\n              large={true}\n              onChange={onChange}\n            />\n          );\n        });\n      })}\n    </ControlGroup>\n  );\n}\n","import { Callout, Code } from \"@blueprintjs/core\";\nimport { DateInput, IDateFormatProps } from \"@blueprintjs/datetime\";\nimport * as React from \"react\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport { FieldProps } from \"../FieldProps\";\n\ntype Props = FieldProps & {\n  labelElement: React.ReactNode;\n  value: unknown;\n  defaultValue: unknown;\n};\n\nconst jsDateFormatter: IDateFormatProps = {\n  // note that the native implementation of Date functions differs between browsers\n  formatDate: (date: Date) => date.toLocaleDateString(),\n  parseDate: (str: string) => (str.length ? new Date(str) : null),\n  placeholder: \"YYYY-MM-DD\",\n};\n\nexport default function DateField(props: Props) {\n  const { value, relevant, readonly } = props;\n  const { onChangeAnswer } = React.useContext(ODKSurveyContext);\n\n  const onChange = React.useCallback(\n    (selectedDate: Date, isUserChange: boolean) => {\n      if (isUserChange) {\n        onChangeAnswer(selectedDate, props);\n      }\n    },\n    [props, onChangeAnswer]\n  );\n\n  if (value !== undefined && !(value instanceof Date)) {\n    return (\n      <Callout intent=\"warning\">\n        <h4>\n          Value must be a <Code>Date</Code> for this field to work\n        </h4>\n      </Callout>\n    );\n  }\n\n  let defaultValue = undefined;\n  if (typeof props.defaultValue === \"string\") {\n    defaultValue = jsDateFormatter.parseDate(props.defaultValue);\n  } else if (props.defaultValue instanceof Date) {\n    defaultValue = props.defaultValue;\n  }\n\n  return (\n    <DateInput\n      {...jsDateFormatter}\n      onChange={onChange}\n      defaultValue={defaultValue || undefined}\n      disabled={relevant === false || readonly}\n    />\n  );\n}\n","import { Classes, ControlGroup, EditableText } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport StyledMarkdown from \"../../components/StyledMarkdown\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport { getNodeAbsolutePath } from \"../../xlsform-simple-schema/functions/odk-formulas/evaluation/XPath\";\nimport { FieldProps } from \"../FieldProps\";\n\nexport function Label(\n  props: FieldProps & {\n    debug: boolean;\n    minimal?: boolean;\n    children: React.ReactNode;\n    isEditable: boolean;\n  }\n) {\n  const {\n    schema,\n    schemaKey,\n    node,\n    debug,\n    relevant,\n    isEditable,\n    children,\n  } = props;\n  const context = React.useContext(ODKSurveyContext);\n  const label = node.row.label?.[context.language || \"English (en)\"];\n  const evaluatedLabel = schema.get(schemaKey, \"label\");\n  const { onChangeCell } = React.useContext(ODKSurveyContext);\n  const path =\n    context.context && getNodeAbsolutePath(node, context.context).join(\"/\");\n  const [editedLabel, setEditedLabel] = React.useState(label);\n\n  const onChangeLabel = React.useCallback((text: string) => {\n    setEditedLabel(text);\n  }, []);\n\n  React.useEffect(() => {\n    setEditedLabel(label);\n  }, [label]);\n\n  const onConfirmLabel = React.useCallback(\n    (text: string) => {\n      if (text === label || (label === undefined && text === \"\")) {\n        return;\n      }\n      onChangeCell(\"survey\", node.rowIndex, \"label\", text, node);\n    },\n    [node, onChangeCell, label]\n  );\n\n  let labelInput =\n    isEditable && debug ? (\n      <EditableText\n        onChange={onChangeLabel}\n        onConfirm={onConfirmLabel}\n        placeholder={`Enter a title for \\`${node.row.name}\\`…`}\n        value={editedLabel}\n        minWidth={100}\n        minLines={1}\n        maxLines={5}\n        multiline={true}\n      />\n    ) : (\n      evaluatedLabel\n    );\n\n  if (children) {\n    return (\n      <ControlGroup\n        style={{ alignItems: \"center\" }}\n        lang={context.languageCode}\n      >\n        {\n          <span\n            id={path}\n            className={relevant ? \"\" : Classes.TEXT_DISABLED}\n            style={{ flex: 1 }}\n          >\n            {debug ? (\n              labelInput\n            ) : (\n              <StyledMarkdown>{evaluatedLabel}</StyledMarkdown>\n            )}\n          </span>\n        }\n        {children}\n      </ControlGroup>\n    );\n  } else {\n    return (\n      <span\n        id={path}\n        className={relevant ? \"\" : Classes.TEXT_DISABLED}\n        style={{ flex: 1 }}\n        lang={context.languageCode}\n      >\n        {debug ? labelInput : <StyledMarkdown>{evaluatedLabel}</StyledMarkdown>}\n      </span>\n    );\n  }\n}\n","import { Callout, Code, NumericInput } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport { FieldProps } from \"../FieldProps\";\n\ntype Props = FieldProps & {\n  onInputChange: (event: React.FormEvent<HTMLInputElement>) => void;\n  labelElement: React.ReactNode;\n  value: unknown;\n  defaultValue: unknown;\n};\n\nexport default function NumberField(props: Props) {\n  const { value, schemaKey, relevant, readonly } = props;\n  const { onChangeAnswer } = React.useContext(ODKSurveyContext);\n  const onChange = React.useCallback(\n    (valueAsNumber: number) => {\n      onChangeAnswer(valueAsNumber, props);\n    },\n    [props, onChangeAnswer]\n  );\n\n  if (\n    value !== undefined &&\n    typeof value !== \"string\" &&\n    typeof value !== \"number\"\n  ) {\n    return (\n      <Callout intent=\"warning\">\n        <h4>\n          Value must be a <Code>number</Code> for this field to work.\n        </h4>\n      </Callout>\n    );\n  }\n\n  return (\n    <NumericInput\n      id={schemaKey}\n      disabled={relevant === false || readonly}\n      name={schemaKey}\n      large={true}\n      allowNumericCharactersOnly={false}\n      placeholder=\"Enter a number…\"\n      value={value}\n      onValueChange={onChange}\n      defaultValue={\n        typeof props.defaultValue === \"number\" ||\n        typeof props.defaultValue === \"string\"\n          ? props.defaultValue\n          : undefined\n      }\n    />\n  );\n}\n","import {\n  Callout,\n  Code,\n  ControlGroup,\n  H4,\n  Radio,\n  RadioGroup,\n} from \"@blueprintjs/core\";\nimport { FLEX_EXPANDER } from \"@blueprintjs/core/lib/esm/common/classes\";\nimport * as React from \"react\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport { FieldConfigurationButton } from \"../DetailsPopover/FieldConfigurationButton\";\nimport { FieldProps } from \"../FieldProps\";\n\ntype Props = FieldProps & {\n  onInputChange: (event: React.FormEvent<HTMLInputElement>) => void;\n  value: unknown;\n  defaultValue: unknown;\n  allowedValues: string[];\n};\n\nexport default function RadioGroupField(props: Props) {\n  const {\n    value,\n    onInputChange,\n    allowedValues,\n    node,\n    relevant,\n    readonly,\n  } = props;\n  const context = React.useContext(ODKSurveyContext);\n  const { language } = context;\n\n  if (value !== undefined && typeof value !== \"string\") {\n    return (\n      <Callout intent=\"warning\">\n        <h4>\n          Value must be a <Code>string</Code> for this field to work\n        </h4>\n      </Callout>\n    );\n  }\n\n  if (language === undefined) {\n    return null;\n  }\n\n  if (context.debug && node.typeParameters.length === 0) {\n    return (\n      <Callout intent=\"warning\">\n        <ControlGroup fill={true}>\n          <H4>No choice list set.</H4>\n          <div className={FLEX_EXPANDER} />\n          <FieldConfigurationButton node={node} showType={false} />\n        </ControlGroup>\n      </Callout>\n    );\n  }\n\n  return (\n    <RadioGroup\n      // label={labelElement}\n      onChange={onInputChange}\n      selectedValue={value}\n      inline={true}\n      disabled={relevant === false || readonly}\n    >\n      {allowedValues.map((value) => {\n        const choiceListName = node.typeParameters[0];\n        const choiceRow =\n          context.xlsForm?.choicesByName[choiceListName]?.[value];\n        const definedLabel = choiceRow?.label?.[language];\n        const shownLabel =\n          definedLabel === \"undefined\" ? choiceRow?.name : definedLabel;\n        return (\n          <Radio\n            label={shownLabel}\n            value={choiceRow?.name}\n            inline={true}\n            large={true}\n          />\n        );\n      })}\n    </RadioGroup>\n  );\n}\n","import { Callout, Code, InputGroup } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { FieldProps } from \"../FieldProps\";\n\ntype Props = FieldProps & {\n  onInputChange: (event: React.FormEvent<HTMLInputElement>) => void;\n  labelElement: React.ReactNode;\n  value: unknown;\n  defaultValue: unknown;\n};\n\nexport default function TextField(props: Props) {\n  const { value, schemaKey, relevant, readonly } = props;\n\n  if (\n    value !== undefined &&\n    typeof value !== \"string\" &&\n    typeof value !== \"number\"\n  ) {\n    return (\n      <Callout intent=\"warning\">\n        <h4>\n          Value must be a <Code>string</Code> or <Code>number</Code> for this\n          field to work.\n        </h4>\n      </Callout>\n    );\n  }\n\n  return (\n    <InputGroup\n      id={schemaKey}\n      disabled={relevant === false || readonly}\n      name={schemaKey}\n      placeholder=\"\"\n      large={true}\n      onChange={props.onInputChange}\n      defaultValue={\n        typeof props.defaultValue === \"string\" ? props.defaultValue : undefined\n      }\n    />\n  );\n}\n","import { Callout, FormGroup } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { ODKSurveyContext } from \"../../lib/ODKSurveyContext\";\nimport evaluateNodeColumn from \"../../xlsform-simple-schema/functions/odk-formulas/evaluation/evaluateNodeColumn\";\nimport DetailsPopover from \"../DetailsPopover/DetailsPopover\";\nimport { FieldProps } from \"../FieldProps\";\nimport { internalFields } from \"../internalFields\";\nimport BooleanField from \"./BooleanField\";\nimport CheckboxGroupField from \"./CheckboxGroupField\";\nimport DateField from \"./DateField\";\nimport { Label } from \"./Label\";\nimport NumberField from \"./NumberField\";\nimport RadioGroupField from \"./RadioGroupField\";\nimport TextField from \"./TextField\";\n\nexport function AutoField(\n  props: FieldProps & {\n    value: unknown;\n    defaultValue: unknown;\n    onInputChange: (event: React.FormEvent<HTMLInputElement>) => void;\n    labelElement: JSX.Element;\n  }\n) {\n  const { quickType, schema, schemaKey } = props;\n  if (quickType === \"number\") {\n    return <NumberField {...props} />;\n  } else if (quickType === \"date\") {\n    return <DateField {...props} />;\n  } else if (quickType === \"boolean\") {\n    return <BooleanField {...props} />;\n  }\n\n  if (quickType === \"stringArray\") {\n    const allowedValues = schema.get(schemaKey + \".$\", \"allowedValues\");\n    if (allowedValues instanceof Array) {\n      return <CheckboxGroupField {...{ ...props, allowedValues }} />;\n    }\n  }\n  const allowedValues = schema.get(schemaKey, \"allowedValues\");\n  if (allowedValues instanceof Array) {\n    return <RadioGroupField {...{ ...props, allowedValues }} />;\n  }\n\n  return <TextField {...props} />;\n}\n\nexport default function ValueField(props: FieldProps) {\n  const { node } = props;\n  const isBoolean = props.quickType === \"boolean\";\n  const context = React.useContext(ODKSurveyContext);\n  const {\n    language,\n    debug,\n    context: evaluationContext,\n    onChangeAnswer,\n  } = context;\n\n  const onInputChange = React.useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const target = event.currentTarget;\n      const values: Record<string, unknown> = {\n        checkbox: target.checked,\n        date: target.valueAsDate,\n        number: target.valueAsNumber,\n        text: target.value,\n        radio: target.value,\n      };\n      const value = values[target.type];\n      onChangeAnswer(value, props);\n    },\n    [onChangeAnswer, props]\n  );\n\n  if (!language || !evaluationContext) {\n    return null;\n  }\n\n  const isInternalField = internalFields.includes(node.type);\n  if (isInternalField && !context.debug) {\n    return null;\n  }\n\n  const detailsButton = <DetailsPopover {...{ ...props }} editable={true} />;\n  const hintString = node.row.hint?.[language] && (\n    <Callout intent=\"primary\">{node.row.hint?.[language]}</Callout>\n  );\n  const labelElement = (\n    <Label {...{ ...props, debug, isEditable: !isBoolean && !isInternalField }}>\n      {props.quickType !== \"boolean\" && debug && detailsButton}\n    </Label>\n  );\n  const evaluationResult = evaluateNodeColumn(\n    node,\n    evaluationContext,\n    \"calculation\",\n    evaluationContext.nodesToAnswers.get(node)\n  );\n  const autoFieldProps = {\n    ...props,\n    labelElement,\n    onInputChange,\n    value: evaluationResult.result,\n    defaultValue: node.row.default,\n  };\n\n  let input = <AutoField {...autoFieldProps} />;\n  if (isBoolean) {\n    return (\n      <FormGroup\n        // helperText={hintString}\n        labelFor={node.row.name}\n        style={{ display: \"flex\" }}\n      >\n        {debug && detailsButton}\n        {input}\n        {hintString}\n      </FormGroup>\n    );\n  }\n\n  if (node.type === \"note\") {\n    return labelElement;\n  }\n  return (\n    <FormGroup\n      // helperText={hintString}\n      label={labelElement}\n      labelFor={node.row.name}\n    >\n      {input}\n      {hintString}\n    </FormGroup>\n  );\n}\n","import { Callout, Classes, Code, Colors, H4 } from \"@blueprintjs/core\";\nimport { ContextMenu2, Popover2 } from \"@blueprintjs/popover2\";\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport { alpha } from \"../lib/colors\";\nimport { ODKSurveyContext } from \"../lib/ODKSurveyContext\";\nimport useConfirmNodeDeletion from \"../lib/useConfirmNodeDeletion\";\nimport { findNodeByPathRelativeToScope } from \"../xlsform-simple-schema/functions/odk-formulas/evaluation/XPath\";\nimport AddFieldMenuItem from \"./AddFieldMenuItem\";\nimport NodeActionMenu from \"./DetailsPopover/ActionMenu\";\nimport { FieldProps } from \"./FieldProps\";\nimport ObjectArrayField from \"./fields/ObjectArrayField\";\nimport ObjectField from \"./fields/ObjectField\";\nimport ValueField from \"./fields/ValueField\";\n\nconst Stripe = styled.div`\n  &:after {\n    content: \"\";\n    position: absolute;\n    left: 0px;\n    width: 1px;\n    bottom: 0;\n    top: 0;\n    background-color: transparent;\n  }\n`;\n\nconst CornerButton = styled.div`\n  position: absolute;\n  left: 0px;\n  height: 44px;\n  width: 44px;\n  background-color: transparent;\n  cursor: pointer;\n`;\n\nconst TopCornerButton = styled(CornerButton)`\n  top: 0;\n  &:hover {\n    background: linear-gradient(\n      135deg,\n      ${alpha(Colors.BLUE3, 0.1)},\n      ${alpha(Colors.BLUE3, 0.0)} 50%\n    );\n  }\n`;\n\nconst BottomCornerButton = styled(CornerButton)`\n  bottom: 0;\n  &:hover {\n    background: linear-gradient(\n      45deg,\n      ${alpha(Colors.BLUE3, 0.1)},\n      ${alpha(Colors.BLUE3, 0.0)} 50%\n    );\n  }\n`;\n\nconst Hoverable = styled.div`\n  padding: 16px 16px 8px;\n  margin: 0;\n  position: relative;\n\n  &:not(:hover):not(:focus-within) {\n    ${Stripe} {\n      background: none;\n    }\n  }\n  &:hover,\n  :focus-within {\n    /* background: linear-gradient(\n      ${alpha(Colors.BLUE3, 0.1)},\n      ${alpha(Colors.BLUE3, 0.03)} 20%,\n      ${alpha(Colors.BLUE3, 0.03)}\n    ); */\n    background: ${alpha(Colors.BLUE3, 0.03)};\n\n    ${Stripe} {\n      &:after {\n        background: ${alpha(Colors.BLUE3, 0.1)};\n      }\n    }\n  }\n`;\n\nexport function FieldSetForKey(props: {\n  schemaKey: string;\n  relevant?: boolean;\n  readonly?: boolean;\n}) {\n  const { schemaKey } = props;\n  const { schema, context, debug } = React.useContext(ODKSurveyContext);\n  const { alert, showRemoveConfirmationDialog } = useConfirmNodeDeletion();\n  if (!context || !schema) {\n    return null;\n  }\n  const quickType = schema.getQuickTypeForKey(schemaKey);\n  const schemaKeyPath = [\".\", ...schemaKey.replace(/\\.\\$/g, \"\").split(\".\")];\n\n  const node = findNodeByPathRelativeToScope(\n    schemaKeyPath,\n    context,\n    context.survey\n  );\n\n  if (node instanceof Array) {\n    if (!debug) {\n      return null;\n    }\n    return (\n      <Callout intent=\"warning\">\n        <H4>\n          Found multiple nodes with path <Code>{schemaKeyPath.join(\"/\")}</Code>.\n          This should not happen.\n        </H4>\n        {/* <p></p> */}\n      </Callout>\n    );\n  }\n  if (!node) {\n    if (!debug) {\n      return null;\n    }\n    return (\n      <Callout intent=\"warning\">\n        <H4>\n          No node found for{\" \"}\n          <Code>{schemaKeyPath[schemaKeyPath.length - 1]}</Code>\n        </H4>\n        {/* <p></p> */}\n      </Callout>\n    );\n  }\n\n  let relevant = props.relevant;\n  if (typeof relevant !== \"boolean\" || relevant === true) {\n    const evaluationResult = context.evaluationResults\n      .get(node)\n      ?.get(\"relevant\");\n\n    if (typeof evaluationResult?.result === \"boolean\") {\n      relevant = evaluationResult.result;\n    } else if (evaluationResult?.result === null) {\n      relevant = false;\n    } else {\n      relevant = true;\n    }\n  }\n\n  let readonly = false;\n  if (typeof props.readonly !== \"undefined\" || props.readonly === true) {\n    const evaluationResult = context.evaluationResults\n      .get(node)\n      ?.get(\"readonly\");\n    readonly =\n      typeof evaluationResult?.result === \"boolean\"\n        ? evaluationResult.result\n        : props.readonly;\n  }\n  // TODO: Add warning for evaluation failure\n\n  const fieldProps: FieldProps = {\n    schema,\n    node,\n    schemaKey,\n    quickType,\n    relevant,\n    readonly,\n  };\n\n  if (!debug && !relevant) {\n    return null;\n  }\n\n  let field;\n  switch (quickType) {\n    case \"object\":\n      field = <ObjectField {...fieldProps} />;\n      break;\n    case \"objectArray\":\n      field = <ObjectArrayField {...fieldProps} />;\n      break;\n    default:\n      field = <ValueField {...fieldProps} />;\n      break;\n  }\n\n  if (debug && node !== context.survey) {\n    return (\n      <>\n        {alert}\n        <ContextMenu2\n          content={\n            <NodeActionMenu\n              node={node}\n              onRemove={showRemoveConfirmationDialog}\n            />\n          }\n        >\n          <Hoverable>\n            <Stripe />\n\n            <Popover2\n              content={\n                <ul className={Classes.LIST_UNSTYLED}>\n                  <AddFieldMenuItem\n                    icon=\"arrow-up\"\n                    node={node}\n                    position=\"before\"\n                  />\n                </ul>\n              }\n              lazy={true}\n              interactionKind=\"click\"\n              placement=\"left\"\n              renderTarget={({ isOpen, ref, ...targetProps }) => (\n                <TopCornerButton {...targetProps} ref={ref} />\n              )}\n              hoverOpenDelay={0}\n              hoverCloseDelay={0}\n            />\n\n            <Popover2\n              content={\n                <ul className={Classes.LIST_UNSTYLED}>\n                  <AddFieldMenuItem\n                    icon=\"arrow-down\"\n                    node={node}\n                    position=\"after\"\n                  />\n                </ul>\n              }\n              lazy={true}\n              interactionKind=\"click\"\n              placement=\"left\"\n              renderTarget={({ isOpen, ref, ...targetProps }) => (\n                <BottomCornerButton {...targetProps} ref={ref} />\n              )}\n              hoverOpenDelay={0}\n              hoverCloseDelay={0}\n            />\n\n            {field}\n          </Hoverable>\n        </ContextMenu2>\n      </>\n    );\n  }\n\n  return field;\n}\n","import { Callout } from \"@blueprintjs/core\";\nimport { Column, EditableCell, Table } from \"@blueprintjs/table\";\nimport { uniq } from \"lodash\";\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport OverflowScrollContainer from \"../components/OverflowScrollContainer\";\nimport { ODKSurveyContext } from \"../lib/ODKSurveyContext\";\nimport { WorksheetName, XLSForm } from \"../xlsform-simple-schema\";\nimport { localizableColumnNames } from \"../xlsform-simple-schema/functions/loadSurveyFromXLSX\";\n\ntype Props = {\n  xlsForm: XLSForm;\n  language: string;\n  debug: boolean;\n  worksheetName: WorksheetName;\n  style?: React.CSSProperties;\n};\n\nconst FlexTable = styled(Table)`\n  /* flex: 1; */\n`;\n\nexport default function XLSFormWorksheet(props: Props) {\n  const { language, xlsForm, worksheetName } = props;\n  const context = React.useContext(ODKSurveyContext);\n  const { onChangeCell } = context;\n  const worksheet = xlsForm.worksheets[props.worksheetName];\n\n  const numRows = worksheet?.rows.length;\n  const columnNames = React.useMemo(\n    () =>\n      uniq(worksheet?.columnNamesNormalized.map((n) => n.replace(/::.*$/, \"\"))),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [xlsForm, worksheet]\n  );\n\n  const onConfirmCellEdit = React.useCallback(\n    (\n      value: string,\n      rowIndex?: number | undefined,\n      columnIndex?: number | undefined\n    ) => {\n      if (columnIndex === undefined || rowIndex === undefined) {\n        return;\n      }\n\n      const row = worksheet?.rows[rowIndex];\n      if (!row) {\n        throw new Error(\"Tried to change a row that doesn’t exist\");\n      }\n      const columnName = columnNames[columnIndex];\n      const oldValue = row[columnName];\n      if (oldValue === value) {\n        return;\n      }\n      onChangeCell(\n        worksheetName,\n        rowIndex,\n        columnName,\n        value,\n        xlsForm.flatNodes[rowIndex]\n      );\n    },\n    [\n      columnNames,\n      onChangeCell,\n      worksheet?.rows,\n      worksheetName,\n      xlsForm.flatNodes,\n    ]\n  );\n\n  const cellRenderer = React.useMemo(() => {\n    return (rowIndex: number, columnIndex: number) => {\n      const row = worksheet?.rows[rowIndex];\n      if (!row) {\n        return <></>;\n      }\n      const key = columnNames[columnIndex];\n      const value = row[key];\n      const node = xlsForm.flatNodes[rowIndex];\n\n      if (value !== undefined && typeof value !== \"string\") {\n        if (localizableColumnNames.includes(key)) {\n          return (\n            <EditableCell\n              {...{ rowIndex, columnIndex }}\n              onConfirm={onConfirmCellEdit}\n              value={value[language]}\n            />\n          );\n        } else {\n          return (\n            <EditableCell\n              {...{ rowIndex, columnIndex }}\n              onConfirm={onConfirmCellEdit}\n              value={JSON.stringify(value)}\n            />\n          );\n        }\n      }\n\n      return (\n        <EditableCell\n          {...{ rowIndex, columnIndex }}\n          onConfirm={onConfirmCellEdit}\n          value={value}\n          style={\n            [\"type\", \"name\"].includes(key)\n              ? { paddingLeft: `${4 + node?.indentationLevel * 8}px` }\n              : {}\n          }\n        >\n          {value}\n        </EditableCell>\n      );\n    };\n  }, [\n    worksheet?.rows,\n    columnNames,\n    xlsForm.flatNodes,\n    onConfirmCellEdit,\n    language,\n  ]);\n\n  if (!worksheet) {\n    return (\n      <Callout intent=\"warning\">No {props.worksheetName} sheet defined</Callout>\n    );\n  }\n\n  return (\n    <OverflowScrollContainer style={{ ...props.style }}>\n      <FlexTable\n        numRows={numRows}\n        enableRowResizing={false}\n        // numFrozenColumns={worksheetName === \"survey\" ? 2 : 0}\n      >\n        {columnNames.map((columnName) => (\n          <Column name={columnName} cellRenderer={cellRenderer} />\n        ))}\n      </FlexTable>\n    </OverflowScrollContainer>\n  );\n}\n","import { ODKNode } from '../../types/ODKNode';\nimport evaluateODKFormula from '../odk-formulas/evaluation/evaluateODKFormula';\nimport ODKFormulaEvaluationContext from '../odk-formulas/evaluation/ODKFormulaEvaluationContext';\n\nexport function getNodeOptionalFunction(node: ODKNode, context: ODKFormulaEvaluationContext) {\n  return function isNodeIrrelevantOrNotRequired() {\n    const isRelevant = node.row.relevant === undefined ||\n      node.row.relevant === '' ||\n      evaluateODKFormula(node.row.relevant, context, node);\n    if (!isRelevant) {\n      return true;\n    }\n    const isRequired = node.row.required === undefined ||\n      node.row.required === '' ||\n      evaluateODKFormula(node.row.required, context, node);\n      return !isRequired;\n    };\n}\n","import { ODKFormulaError } from \"../../types/Errors\";\nimport { ODKNode } from \"../../types/ODKNode\";\nimport evaluateExpression from \"../odk-formulas/evaluation/evaluateExpression\";\nimport ODKFormulaEvaluationContext from \"../odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport { NameExpression, TokenType } from \"../odk-formulas/pratt-parser-base\";\n\nexport function getStringInterpolationFunctionOrString(\n  inputString: string,\n  context: ODKFormulaEvaluationContext,\n  node: ODKNode\n) {\n  const hasInterpolation = !!inputString.match(/\\${([^}]+)}/);\n  if (!hasInterpolation) {\n    return inputString;\n  }\n  return function getInterpolatedString(): string {\n    return inputString.replaceAll(\n      /\\${([^}]+)}/g,\n      (match, name, offset): string => {\n        try {\n          const text = match;\n          const result = evaluateExpression(\n            new NameExpression(\n              [{ type: TokenType.NAME, text, index: offset }],\n              name,\n              match\n            ),\n            context,\n            node\n          );\n          return String(result);\n        } catch (e) {\n          if (e instanceof ODKFormulaError) {\n            return e.toMarkdown();\n          }\n          throw e;\n        }\n      }\n    );\n  };\n}\n","import { SchemaDefinition } from \"simpl-schema\";\n\n/**\n * [GeoJSON](https://tools.ietf.org/html/rfc7946) `Point` object.\n */\nexport interface PointGeometry {\n  type: \"Point\";\n  coordinates: [number, number];\n}\n\nexport interface LineStringGeometry {\n  type: \"LineString\";\n  coordinates: [[number, number]];\n}\n\nexport interface PolygonGeometry {\n  type: \"Polygon\";\n  coordinates: [[[number, number]]];\n}\n\nexport const getPointGeometrySchema = (\n  key: string\n): Record<string, SchemaDefinition<unknown>> => ({\n  [key]: {\n    type: Object,\n  },\n  [`${key}.type`]: {\n    type: String,\n    allowedValues: [\"Point\"],\n    defaultValue: \"Point\",\n  },\n  [`${key}.coordinates`]: {\n    type: Array,\n    minCount: 2,\n    maxCount: 2,\n  },\n  [`${key}.coordinates.$`]: {\n    type: Number,\n    min: -180,\n    max: 180,\n  },\n});\n\nexport const getLineStringGeometrySchema = (\n  key: string\n): Record<string, SchemaDefinition<unknown>> => ({\n  [key]: {\n    type: Object,\n  },\n  [`${key}.type`]: {\n    type: String,\n    allowedValues: [\"LineString\"],\n    defaultValue: \"LineString\",\n  },\n  [`${key}.coordinates`]: {\n    type: Array,\n    minCount: 2,\n  },\n  [`${key}.coordinates.$`]: {\n    type: Array,\n    minCount: 2,\n    maxCount: 2,\n  },\n  [`${key}.coordinates.$.$`]: {\n    type: Number,\n    min: -180,\n    max: 180,\n  },\n});\n\nexport const getPolygonGeometrySchema = (\n  key: string\n): Record<string, SchemaDefinition<unknown>> => ({\n  [key]: {\n    type: Object,\n  },\n  type: {\n    type: String,\n    allowedValues: [\"Polygon\"],\n    defaultValue: \"Polygon\",\n  },\n  [`${key}.coordinates`]: {\n    // rings, outer rings first, holes in the outer ring from 2nd to n-th index\n    type: Array,\n    minCount: 1,\n  },\n  [`${key}.coordinates.$`]: {\n    type: Array,\n    minCount: 2,\n  },\n  [`${key}.coordinates.$.$`]: {\n    //\n    type: Array,\n    minCount: 4,\n    maxCount: 4,\n  },\n  [`${key}.coordinates.$.$.$`]: {\n    type: Number,\n    min: -180,\n    max: 180,\n  },\n});\n\nexport type Geometry = PointGeometry | LineStringGeometry | PolygonGeometry;\n","import SimpleSchema, { SchemaDefinition } from 'simpl-schema';\n\n/**\n * Inspired from https://schema.org/QuantitativeValue\n */\n\nexport const getQuantitativeValueSchema = (key: string, rootDefinition?: SchemaDefinition<unknown>): Record<string, SchemaDefinition<unknown>> => ({\n  [key]: {\n    type: Object,\n    ...rootDefinition\n  },\n  [`${key}.maxValue`]: {\n    type: Number,\n    optional: true,\n  },\n  [`${key}.minValue`]: {\n    type: Number,\n    optional: true,\n  },\n  [`${key}.unitCode`]: {\n    type: Text,\n    optional: true,\n  },\n  [`${key}.unitText`]: {\n    type: Text,\n    optional: true,\n  },\n  [`${key}.value`]: {\n    type: SimpleSchema.oneOf(Number, String, Boolean),\n  },\n});\n","import SimpleSchema, { SchemaDefinition } from 'simpl-schema';\nimport { getQuantitativeValueSchema } from './getQuantitativeValueSchema';\n\n/**\n * Inspired from https://schema.org/MediaObject\n */\n\nexport const getMediaObjectSchema = (key: string, rootDefinition?: Partial<SchemaDefinition<unknown>>): Record<string, SchemaDefinition<unknown>> => ({\n    [key]: {\n      type: Object,\n      ...rootDefinition\n    },\n    [`${key}.bitrate`]: {\n      type: String,\n      label: 'The bitrate of the media object.',\n      optional: true,\n    },\n    [`${key}.contentSize`]: {\n      type: String,\n      label: 'File size in (mega/kilo) bytes.',\n    },\n    [`${key}.contentUrl`]: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Url,\n      label: 'Actual bytes of the media object, for example the image file or video file.',\n    },\n    [`${key}.duration`]: {\n      type: String,\n      label:\n        'The duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format.',\n      optional: true,\n    },\n    [`${key}.embedUrl`]: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Url,\n      label:\n        'A URL pointing to a player for a specific video. In general, this is the information in the src element of an embed tag and should not be the same as the content of the loc tag.',\n      optional: true,\n    },\n    [`${key}.encodingFormat`]: {\n      type: String,\n      label:\n        'Media type typically expressed using a MIME format (see IANA site and MDN reference) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).',\n    },\n    [`${key}.endTime`]: {\n      type: Date,\n      label: 'the time offset of the end of a clip within a larger file.',\n      optional: true,\n    },\n    [`${key}.startTime`]: {\n      type: Date,\n      label: 'the time offset of the start of a clip within a larger file.',\n      optional: true,\n    },\n    [`${key}.uploadDate`]: {\n      type: Date,\n      label: 'Date when this media object was uploaded to this site.',\n      optional: true,\n    },\n    ...getQuantitativeValueSchema(`${key}.height`, {\n      type: SimpleSchema.oneOf(String, Object),\n      label: 'The height of the item.',\n    }),\n    ...getQuantitativeValueSchema(`${key}.width`, {\n      type: SimpleSchema.oneOf(String, Object),\n      label: 'The width of the item.',\n    }),\n  });\n\nexport const getAudioObjectSchema = (key: string, rootDefinition?: Partial<SchemaDefinition<unknown>>): Record<string, SchemaDefinition<unknown>> => ({\n    [key]: {\n      type: Object,\n      ...rootDefinition\n    },\n    [`${key}.transcript`]: {\n      type: String,\n      optional: true,\n    },\n    ...getMediaObjectSchema(`${key}.caption`, {\n      type: SimpleSchema.oneOf(String, Object),\n      label:\n        'The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the encodingFormat.',\n      optional: true,\n    }),\n  });\n\nexport const getImageObjectSchema = (key: string, withThumbnail = true, rootDefinition?: Partial<SchemaDefinition<unknown>>): Record<string, SchemaDefinition<unknown>> => ({\n    [key]: {\n      type: Object,\n      ...rootDefinition\n    },\n    [`${key}.exifData`]: {\n      type: Object,\n      blackbox: true,\n      label: ' or Text\texif data for this object.',\n      optional: true,\n    },\n    [`${key}.representativeOfPage`]: {\n      type: Boolean,\n      label: 'Indicates whether this image is representative of the content of the page.',\n      optional: true,\n    },\n    ...getMediaObjectSchema(`${key}.caption`, {\n    label:\n      'The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the encodingFormat.',\n      optional: true,\n    }),\n    ...(withThumbnail ?\n      getImageObjectSchema(`${key}.thumbnail`, false, { label: 'Thumbnail image for an image or video.', optional: true }) : {})\n});\n\nexport const getVideoObjectSchema = (key: string, rootDefinition?: Partial<SchemaDefinition<unknown>>): Record<string, SchemaDefinition<unknown>> => ({\n    [key]: {\n      type: Object,\n      ...rootDefinition\n    },\n    [`${key}.caption`]: {\n      type: getMediaObjectSchema(`${key}.caption`),\n      label:\n        ' or Text\tThe caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the encodingFormat.',\n      optional: true,\n    },\n    [`${key}.transcript`]: {\n      type: String,\n      label: 'If this MediaObject is an AudioObject or VideoObject, the transcript of that object.',\n      optional: true,\n    },\n    [`${key}.videoFrameSize`]: {\n      type: String,\n      label: 'The frame size of the video.',\n      optional: true,\n    },\n    [`${key}.videoQuality`]: {\n      type: String,\n      optional: true,\n    },\n    ...getImageObjectSchema(`${key}.thumbnail`, true, {\n      label: 'Thumbnail image for an image or video.',\n      optional: true,\n    }),\n  });\n","import { compact } from \"lodash\";\nimport { SemanticError } from \"../../types/Errors\";\nimport { NodeToDefinitionFunctionOptions } from \"./createLeafNodeSchemaDefinition\";\nimport { evaluateDynamicChoiceListName } from \"./evaluateDynamicChoiceListName\";\nimport { evaluateFilteredChoiceNames } from \"./evaluateFilteredChoiceNames\";\n\nexport default function getAllowedChoiceValues(\n  options: NodeToDefinitionFunctionOptions\n): string[] | (() => string[]) {\n  const choiceListStrings = options.node.typeParameters;\n  const availableListNames = Object.keys(options.xlsForm.choicesByName);\n  const { type } = options.node.row;\n  const firstList = availableListNames[0];\n  const hasAvailableChoiceList = firstList !== undefined;\n  if (!hasAvailableChoiceList) {\n    throw new SemanticError(\n      `Node \\`${options.key}\\` uses \\`${type}\\` as its \\`type\\`, but the ‘choices’ worksheet seems to be empty or invalid. Please define some valid choice lists first.`\n    );\n  }\n\n  const { choicesByName } = options.xlsForm;\n\n  let choiceListNames = compact(\n    choiceListStrings.map((choiceListString) => {\n      if (choiceListString.trim().startsWith(\"$\")) {\n        return evaluateDynamicChoiceListName(\n          choiceListString,\n          options,\n          choicesByName\n        );\n      } else {\n        return choiceListString;\n      }\n    })\n  ).filter((n) => n !== undefined && n !== \"\");\n\n  // const hasDefinedChoiceListName = choiceListNames.length > 0;\n  // if (!hasDefinedChoiceListName) {\n  //   const possibleStrings = availableListNames\n  //     .map((cl) => `- \\`${type} ${cl}\\``)\n  //     .join(\"\\n\");\n  //   throw new SemanticError(\n  //     `Node \\`${options.key}\\` is missing a reference to the set of possible answer choices. Its \\`type\\` cell contains \\`${type}\\`, but it should be one of these:\\n\\n${possibleStrings}`\n  //   );\n  // }\n\n  const choiceObjects = choiceListNames\n    .map((n) => choicesByName[n])\n    .filter((o) => o !== undefined);\n  if (choiceObjects.length !== choiceListNames.length) {\n    throw new SemanticError(\n      `Node \\`${options.key}\\` (row #${\n        options.node.rowIndex + 2\n      }) refers to list names \\`${choiceListNames}\\`. One of these lists is either not defined in the ‘choices’ worksheet, or could not be loaded correctly. Found list names:\\n\\n${availableListNames\n        .map((n) => `\\`${n}\\``)\n        .join(\", \")}`\n    );\n  }\n\n  const choiceFilterString = options.node.row.choice_filter?.trim();\n  if (!choiceFilterString || choiceFilterString === \"\") {\n    return choiceObjects.flatMap((choiceObject) => Object.keys(choiceObject));\n  }\n\n  return evaluateFilteredChoiceNames(\n    choiceFilterString,\n    choiceObjects,\n    options.node,\n    options.context\n  );\n}\n","import { EvaluationError } from \"../../types/Errors\";\nimport { ChoiceRow } from \"../../types/RowTypes\";\nimport evaluateODKFormula from \"../odk-formulas/evaluation/evaluateODKFormula\";\nimport { NodeToDefinitionFunctionOptions } from \"./createLeafNodeSchemaDefinition\";\n\nexport function evaluateDynamicChoiceListName(\n  choiceListString: string,\n  options: NodeToDefinitionFunctionOptions,\n  choicesByName: Record<string, Record<string, ChoiceRow>>\n) {\n  const evaluationResult = evaluateODKFormula(\n    choiceListString,\n    options.context,\n    options.node\n  );\n  if (evaluationResult.state === \"error\") {\n    throw new EvaluationError(\n      `Error evaluating \\`${choiceListString}\\` to determine available selection choices.`,\n      \"invalidDynamicChoices\",\n      evaluationResult.expression,\n      options.context,\n      options.node\n    );\n  }\n  if (typeof evaluationResult.result !== \"string\") {\n    throw new EvaluationError(\n      `Evaluating \\`${choiceListString}\\` did not yield a \\`string\\`. Please ensure the referenced field returns a string.`,\n      \"invalidDynamicChoices\",\n      evaluationResult.expression,\n      options.context,\n      options.node\n    );\n  }\n  const choiceListName = evaluationResult.result;\n  if (!choicesByName[choiceListName]) {\n    throw new EvaluationError(\n      `Evaluating \\`${choiceListString}\\` yielded string \\`'${choiceListName}'\\`, but the according choices list does not exist. Please ensure that the field calculates an existing list name.`,\n      \"invalidDynamicChoices\",\n      evaluationResult.expression,\n      options.context,\n      options.node\n    );\n  }\n  return choiceListName;\n}\n","import { EvaluationError } from \"../../types/Errors\";\nimport { ODKNode } from \"../../types/ODKNode\";\nimport { ChoiceRow } from \"../../types/RowTypes\";\nimport evaluateExpression from \"../odk-formulas/evaluation/evaluateExpression\";\nimport ODKFormulaEvaluationContext, {\n  knownLiteralsWithoutDollarSign,\n} from \"../odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport ODKFormulaLexer from \"../odk-formulas/odk-formula-parser/ODKFormulaLexer\";\nimport ODKFormulaParser from \"../odk-formulas/odk-formula-parser/ODKFormulaParser\";\nimport { Expression } from \"../odk-formulas/pratt-parser-base\";\n\nexport function evaluateFilteredChoiceNames(\n  choiceFilterString: string,\n  choiceObjects: Record<string, ChoiceRow>[],\n  node: ODKNode,\n  context: ODKFormulaEvaluationContext\n) {\n  const lexer = new ODKFormulaLexer(choiceFilterString);\n  const parser = new ODKFormulaParser({ tokens: lexer });\n  const choiceFilterExpression: Expression = parser.parseExpression();\n  const result = function filteredChoiceValues() {\n    return choiceObjects\n      .flatMap((choiceObject) => Object.values(choiceObject))\n      .filter((choiceRow) => {\n        const evalResult = evaluateExpression(\n          choiceFilterExpression,\n          {\n            ...context,\n            evaluateNonDollarNameFn: (options) =>\n              choiceRow[options.expression.name] ||\n              knownLiteralsWithoutDollarSign[options.expression.name],\n          },\n          node\n        );\n        if (typeof evalResult !== \"boolean\") {\n          throw new EvaluationError(\n            `\\`choice_filter\\` formula did not evaluate to a \\`boolean\\`. Please ensure the formula returns a \\`boolean\\`.`,\n            \"invalidDynamicChoices\",\n            choiceFilterExpression,\n            context,\n            node\n          );\n        }\n        return evalResult;\n      })\n      .map((choiceRow) => choiceRow.name);\n  };\n  return result;\n}\n","import SimpleSchema from \"simpl-schema\";\nimport {\n  getLineStringGeometrySchema,\n  getPointGeometrySchema,\n  getPolygonGeometrySchema,\n} from \"./Geometry\";\nimport {\n  getAudioObjectSchema,\n  getImageObjectSchema,\n  getMediaObjectSchema,\n  getVideoObjectSchema,\n} from \"./MediaSchemas\";\nimport getAllowedChoiceValues from \"./getAllowedChoiceValues\";\nimport { NodeToDefinitionFunction } from \"./createLeafNodeSchemaDefinition\";\n\nexport const questionTypesToSchemaGenerators: Record<\n  string,\n  NodeToDefinitionFunction<unknown> | undefined\n> = {\n  \"\": () => ({}),\n  integer: (o) => ({ [o.key]: { type: SimpleSchema.Integer } }),\n  decimal: (o) => ({ [o.key]: { type: Number } }),\n  range: (o) => ({ [o.key]: { type: Number } }),\n  text: (o) => ({ [o.key]: { type: String } }),\n  select_one: (o) => ({\n    [o.key]: { type: String, allowedValues: getAllowedChoiceValues(o) },\n  }),\n  select_multiple: (o) => ({\n    [o.key]: { type: Array },\n    [o.key + \".$\"]: { type: String, allowedValues: getAllowedChoiceValues(o) },\n  }),\n  select_one_from_file: (o) => ({ [o.key]: { type: String } }),\n  select_multiple_from_file: (o) => ({\n    [o.key]: { type: Array },\n    [o.key + \".$\"]: { type: String },\n  }),\n  rank: (o) => ({ [o.key]: { type: String } }),\n  note: (o) => ({ [o.key]: { type: String } }),\n  geopoint: (o) => getPointGeometrySchema(o.key),\n  geotrace: (o) => getLineStringGeometrySchema(o.key),\n  geoshape: (o) => getPolygonGeometrySchema(o.key),\n  date: (o) => ({ [o.key]: { type: Date } }),\n  time: (o) => ({ [o.key]: { type: Date } }),\n  datetime: (o) => ({ [o.key]: { type: Date } }),\n  image: (o) => getImageObjectSchema(o.key),\n  audio: (o) => getAudioObjectSchema(o.key),\n  video: (o) => getVideoObjectSchema(o.key),\n  file: (o) => getMediaObjectSchema(o.key),\n  barcode: (o) => ({ [o.key]: { type: String } }),\n  calculate: (o) => ({ [o.key]: { type: String } }),\n  acknowledge: (o) => ({ [o.key]: { type: Boolean } }),\n  hidden: (o) => ({ [o.key]: { type: String } }),\n  \"xml-external\": (o) => ({ [o.key]: { type: String } }),\n  start: (o) => ({ [o.key]: { type: Date } }),\n  end: (o) => ({ [o.key]: { type: Date } }),\n  today: (o) => ({ [o.key]: { type: Date } }),\n  deviceid: (o) => ({ [o.key]: { type: String } }),\n  simserial: (o) => ({ [o.key]: { type: String } }),\n  subscriberid: (o) => ({ [o.key]: { type: String } }),\n  phonenumber: (o) => ({ [o.key]: { type: String } }),\n  username: (o) => ({ [o.key]: { type: String } }),\n  email: (o) => ({\n    [o.key]: { type: String, regEx: SimpleSchema.RegEx.EmailWithTLD },\n  }),\n  audit: (o) => ({ [o.key]: { type: String } }),\n};\n","import { SchemaDefinition } from \"simpl-schema\";\nimport { ODKNode } from \"../../types/ODKNode\";\nimport { XLSForm } from \"../../types/XLSForm\";\nimport ODKFormulaEvaluationContext from \"../odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport createLeafNodeSchemaDefinition from \"./createLeafNodeSchemaDefinition\";\nimport { getNodeOptionalFunction } from \"./getNodeOptionalFunction\";\nimport { getStringInterpolationFunctionOrString } from \"./getStringInterpolationFunctionOrString\";\n\nexport default function createRecursiveNodeSchemaDefinition(options: {\n  node: ODKNode;\n  language: string;\n  xlsForm: XLSForm;\n  context: ODKFormulaEvaluationContext;\n  key: string;\n}): Record<string, SchemaDefinition<unknown>> {\n  const { node, language, xlsForm, context, key } = options;\n  let schemaDefinitions: Record<string, SchemaDefinition<unknown>>;\n  const labelString = node.row.label?.[language] || \"\";\n  const definition: Pick<SchemaDefinition<unknown>, \"label\" | \"optional\"> = {\n    label: getStringInterpolationFunctionOrString(labelString, context, node),\n    optional: getNodeOptionalFunction(node, context),\n  };\n  if (node.row?.type.match(/^begin_repeat$/)) {\n    // We're in a repeated section\n    const childrenSchemaDefinitions = node.children.map((child) =>\n      createRecursiveNodeSchemaDefinition({\n        ...options,\n        node: child,\n        key: key + \".$.\" + child.row.name,\n      })\n    );\n    schemaDefinitions = Object.assign(\n      { [key]: { ...definition, type: Array } },\n      ...childrenSchemaDefinitions\n    );\n  } else if (\n    node.row.type.match(/^begin_group$/) ||\n    node === xlsForm.rootSurveyGroup\n  ) {\n    // We're in a group section or in the root (a special case that has children, but is not of `begin_group` type)\n    const childrenSchemaDefinitions = node.children.map((child) => {\n      if (!child.row) {\n        debugger;\n      }\n      return createRecursiveNodeSchemaDefinition({\n        ...options,\n        node: child,\n        key: key + \".\" + child.row.name,\n      });\n    });\n\n    schemaDefinitions = Object.assign(\n      { [key]: { ...definition, type: Object } },\n      ...childrenSchemaDefinitions\n    );\n  } else {\n    schemaDefinitions = createLeafNodeSchemaDefinition(\n      node,\n      language,\n      xlsForm,\n      context,\n      key\n    );\n  }\n\n  // console.log(`Schema for key \\`${key}\\`:`, schemaDefinitions);\n  return schemaDefinitions;\n}\n","import { SchemaDefinition } from \"simpl-schema\";\nimport { ODKNode } from \"../../types/ODKNode\";\nimport { XLSForm } from \"../../types/XLSForm\";\nimport ODKFormulaEvaluationContext from \"../odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport { getNodeOptionalFunction } from \"./getNodeOptionalFunction\";\nimport { getStringInterpolationFunctionOrString } from \"./getStringInterpolationFunctionOrString\";\nimport { questionTypesToSchemaGenerators } from \"./questionTypesToSchemaGenerators\";\n\nexport type NodeToDefinitionFunctionOptions = {\n  key: string;\n  node: ODKNode;\n  xlsForm: XLSForm;\n  context: ODKFormulaEvaluationContext;\n};\n\nexport type NodeToDefinitionFunction<T> = (\n  options: NodeToDefinitionFunctionOptions\n) => Record<string, SchemaDefinition<T>>;\n\nexport default function createLeafNodeSchemaDefinition(\n  node: ODKNode,\n  language: string,\n  xlsForm: XLSForm,\n  context: ODKFormulaEvaluationContext,\n  key: string\n): Record<string, SchemaDefinition<unknown>> {\n  const { row } = node;\n\n  if (!row) {\n    throw new Error(\"Node needs an associated row for creating a schema.\");\n  }\n\n  const labelString = row.label?.[language] || \"\";\n  const defaults = {\n    type: String,\n    label: getStringInterpolationFunctionOrString(labelString, context, node),\n    optional: getNodeOptionalFunction(node, context),\n  };\n\n  const schemaGeneratorFunction = questionTypesToSchemaGenerators[node.type];\n  if (!schemaGeneratorFunction) {\n    throw new Error(\n      `Could not find schema generator for node type ${JSON.stringify(row)}`\n    );\n  }\n  const schema = schemaGeneratorFunction({ key, node, xlsForm, context });\n  const firstField = schema[Object.keys(schema)[0]];\n  Object.assign(firstField, defaults, { ...firstField });\n  // console.log('Schema for node', JSON.stringify(node.row.name), ':', schema);\n  return schema;\n}\n","import {\n  Alignment,\n  Button,\n  FocusStyleManager,\n  Navbar,\n  NonIdealState,\n  Switch,\n} from \"@blueprintjs/core\";\nimport * as ExcelJS from \"exceljs\";\nimport React, { FormEvent } from \"react\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\nimport ResultCodeTree from \"./code/ResultCodeTree\";\nimport ExcelFileInput from \"./components/ExcelFileInput\";\nimport LanguageSelector from \"./components/LanguageSelector\";\nimport OverflowScrollContainer from \"./components/OverflowScrollContainer\";\nimport { ODKSurveyContext } from \"./lib/ODKSurveyContext\";\nimport useChangeHooks from \"./lib/useChangeHooks\";\nimport { SheetTabs } from \"./SheetTabs\";\nimport { ODKNodeDragAndDropContext } from \"./survey/useNodeDragAndDrop\";\nimport XLSFormSurvey from \"./survey/XLSFormSurvey\";\nimport XLSFormWorksheet from \"./table/XLSFormWorksheet\";\nimport { loadFormFromExcelWorkbook } from \"./xlsform-simple-schema/functions/loadSurveyFromXLSX\";\nimport { createSurveySchemaFromXLSForm } from \"./xlsform-simple-schema/functions/schema-creation/createSurveySchemaFromXLSForm\";\nimport { WorksheetName, XLSForm } from \"./xlsform-simple-schema/index\";\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\nconst StyledXLSFormSurvey = styled(XLSFormSurvey)`\n  max-width: 800px;\n  margin: auto;\n\n  font-size: 20px;\n  .bp3-small {\n    font-size: 16px;\n  }\n\n  .bp3-large {\n    font-size: 20px;\n  }\n\n  .bp3-form-helper-text {\n    font-size: 16px;\n  }\n\n  .bp3-form-group {\n    margin: 0 0 40px;\n  }\n\n  .bp3-control {\n    margin-bottom: 10px;\n  }\n`;\n\nconst AppBody = styled.div`\n  flex: 1;\n  overflow: hidden;\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n`;\n\nfunction NavbarSwitch(props: {\n  checked: boolean;\n  onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n  label: string;\n}) {\n  return (\n    <Switch\n      checked={props.checked}\n      label={props.label}\n      onChange={props.onChange}\n      inline={true}\n      style={{ marginBottom: \"0\" }}\n    />\n  );\n}\n\nfunction App() {\n  const [xlsForm, setXLSForm] = React.useState<XLSForm>();\n  const [language, setLanguage] = React.useState<string>();\n  const [debug, setDebug] = React.useState<boolean>(true);\n  const [showTable, setShowTable] = React.useState<boolean>(false);\n  const [showResult, setShowResult] = React.useState<boolean>(false);\n  const [worksheetName, setWorksheetName] = React.useState<WorksheetName>(\n    \"survey\"\n  );\n\n  const onLoadWorkbook = React.useCallback(\n    async (workbook: ExcelJS.Workbook) => {\n      const xlsForm = await loadFormFromExcelWorkbook(workbook);\n      setXLSForm(xlsForm);\n      setLanguage(\n        xlsForm.worksheets.settings?.rows[0].default_language ||\n          [...xlsForm.languages?.values()][0] ||\n          \"English (en)\"\n      );\n    },\n    []\n  );\n\n  const onDebugChange = React.useCallback(\n    (event: FormEvent<HTMLInputElement>) => {\n      setDebug(!event.currentTarget.checked);\n    },\n    []\n  );\n\n  const onShowTableChange = React.useCallback(\n    (event: FormEvent<HTMLInputElement>) => {\n      setShowTable(event.currentTarget.checked);\n    },\n    []\n  );\n\n  const onShowResultChange = React.useCallback(\n    (event: FormEvent<HTMLInputElement>) => {\n      setShowResult(event.currentTarget.checked);\n    },\n    []\n  );\n\n  const fileInput = <ExcelFileInput onLoadWorkbook={onLoadWorkbook} />;\n\n  const reset = React.useCallback(() => {\n    setXLSForm(undefined);\n  }, []);\n\n  const resetButton = (\n    <Button className=\"bp3-minimal\" icon=\"reset\" text=\"Reset\" onClick={reset} />\n  );\n\n  const resultCodeElement = xlsForm && (\n    <OverflowScrollContainer\n      className={\"bp3-code-block\"}\n      style={{ padding: \"1rem\", margin: \"0\", whiteSpace: \"pre\" }}\n    >\n      <ResultCodeTree {...{ xlsForm }} />\n    </OverflowScrollContainer>\n  );\n\n  const changeHooks = useChangeHooks({\n    language,\n    xlsForm,\n    setXLSForm,\n  });\n\n  const { context } = changeHooks;\n  const [, languageName, languageCode] =\n    language?.match(/^(.*) \\((\\w+)\\)$/) || [];\n\n  const schema = React.useMemo(() => {\n    if (xlsForm && language && context) {\n      return createSurveySchemaFromXLSForm(xlsForm, context, language);\n    }\n    return undefined;\n  }, [xlsForm, language, context]);\n\n  return (\n    <ODKNodeDragAndDropContext.Provider\n      value={{ onDropNode: changeHooks.onMoveNode }}\n    >\n      <ODKSurveyContext.Provider\n        value={{\n          schema,\n          language,\n          languageCode,\n          languageName,\n          debug,\n          xlsForm,\n          ...changeHooks,\n        }}\n      >\n        {xlsForm && (\n          <Navbar>\n            {showTable && (\n              <SheetTabs {...{ setWorksheetName, worksheetName }} />\n            )}\n\n            <Navbar.Group align={Alignment.RIGHT}>\n              {resetButton}\n              <Navbar.Divider />\n              <NavbarSwitch\n                checked={showTable === true}\n                label=\"Table\"\n                onChange={onShowTableChange}\n              />\n              <NavbarSwitch\n                checked={debug === false}\n                label=\"Live View\"\n                onChange={onDebugChange}\n              />\n              <NavbarSwitch\n                checked={showResult === true}\n                label=\"JSON\"\n                onChange={onShowResultChange}\n              />\n              <Navbar.Divider />\n              {xlsForm && language && (\n                <LanguageSelector\n                  languages={Array.from(xlsForm.languages.values())}\n                  language={language}\n                  onChange={setLanguage}\n                />\n              )}\n            </Navbar.Group>\n          </Navbar>\n        )}\n\n        <AppBody>\n          {!xlsForm && (\n            <OverflowScrollContainer>\n              <NonIdealState\n                icon=\"document-open\"\n                title=\"Open an Excel file to start.\"\n                action={fileInput}\n              />\n            </OverflowScrollContainer>\n          )}\n          {xlsForm && language && showTable && (\n            <XLSFormWorksheet\n              xlsForm={xlsForm}\n              language={language}\n              debug={debug}\n              style={{ width: \"50%\" }}\n              worksheetName={worksheetName}\n            />\n          )}\n          {xlsForm && language && (\n            <OverflowScrollContainer\n              style={{ boxShadow: \"0 0px 30px #9fb7c2\", zIndex: 1 }}\n            >\n              <StyledXLSFormSurvey\n                xlsForm={xlsForm}\n                language={language}\n                debug={debug}\n              />\n            </OverflowScrollContainer>\n          )}\n          {xlsForm && language && showResult && resultCodeElement}\n        </AppBody>\n      </ODKSurveyContext.Provider>\n    </ODKNodeDragAndDropContext.Provider>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport PaddedContainer from \"../components/PaddedContainer\";\nimport { ODKSurveyContext } from \"../lib/ODKSurveyContext\";\nimport { XLSForm } from \"../xlsform-simple-schema\";\nimport { FieldSetForKey } from \"./FieldSetForKey\";\n\nexport default function XLSFormSurvey(props: {\n  xlsForm: XLSForm;\n  language: string;\n  debug: boolean;\n  className?: string;\n}) {\n  const { schema, languageCode, debug } = React.useContext(ODKSurveyContext);\n\n  const fieldSets = schema\n    ?.objectKeys()\n    .map((k) => <FieldSetForKey key={k} schemaKey={k} />);\n\n  return (\n    <PaddedContainer\n      horizontal={2}\n      vertical={2}\n      className={props.className}\n      style={{\n        maxWidth: debug ? \"60rem\" : \"50rem\",\n        padding: \"4rem\",\n        margin: \"auto\",\n      }}\n      lang={languageCode}\n    >\n      <form>{fieldSets}</form>\n    </PaddedContainer>\n  );\n}\n","import SimpleSchema from \"simpl-schema\";\nimport { XLSForm } from \"../../types/XLSForm\";\nimport ODKFormulaEvaluationContext from \"../odk-formulas/evaluation/ODKFormulaEvaluationContext\";\nimport createRecursiveNodeSchemaDefinition from \"./createRecursiveNodeSchemaDefinition\";\n\nexport function createSurveySchemaFromXLSForm(\n  xlsForm: XLSForm,\n  context: ODKFormulaEvaluationContext,\n  language: string\n): SimpleSchema {\n  const schemaDefinition = createRecursiveNodeSchemaDefinition({\n    node: xlsForm.rootSurveyGroup,\n    xlsForm,\n    context,\n    language,\n    key: xlsForm.rootSurveyGroup.row.name,\n  });\n\n  const schema = new SimpleSchema(\n    new SimpleSchema(schemaDefinition).mergedSchema()\n  );\n\n  return schema;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { enableAllPlugins, enablePatches } from \"immer\";\n\nenableAllPlugins();\nenablePatches();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}